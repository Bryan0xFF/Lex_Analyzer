/* The following code was generated by JFlex 1.7.0 */

package lexCode;
import static lexCode.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/Bryan/Documents/NetBeansProjects/LexicalAnalyzer/src/lexCode/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\6\1\35\1\35\1\5\22\0\1\4\1\17\1\0"+
    "\1\34\1\0\1\13\1\20\1\36\1\27\1\30\1\11\1\7\1\23"+
    "\1\10\1\24\1\12\2\2\10\2\1\0\1\22\1\14\1\15\1\16"+
    "\1\0\1\33\1\41\1\56\1\53\1\42\1\43\1\54\1\62\1\55"+
    "\1\57\1\71\1\64\1\50\1\65\1\47\1\52\1\51\1\72\1\46"+
    "\1\60\1\45\1\3\1\67\1\66\1\44\1\61\1\63\1\25\1\0"+
    "\1\26\1\0\1\70\1\0\3\1\1\40\1\37\1\40\24\1\1\31"+
    "\1\21\1\32\7\0\1\35\u1fa2\0\1\35\1\35\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\2\1\4\4\1\27\2"+
    "\1\5\1\0\1\5\3\2\2\0\1\4\2\0\2\2"+
    "\1\6\5\2\1\6\20\2\1\6\13\2\1\6\15\2"+
    "\2\6\2\2\1\6\27\2\2\6\21\2\1\6\17\2"+
    "\1\5\1\0\6\2\1\6\1\2\3\0\2\4\2\0"+
    "\1\2\1\6\7\2\1\6\14\2\1\6\57\2\1\6"+
    "\26\2\1\6\13\2\1\6\2\2\1\6\7\2\1\6"+
    "\13\2\1\6\4\2\1\6\11\2\2\0\1\4\1\3"+
    "\1\0\14\2\1\6\10\2\1\0\4\2\1\6\3\2"+
    "\1\6\2\2\1\6\13\2\1\6\15\2\1\6\2\2"+
    "\1\6\2\2\1\6\17\2\1\6\42\2\2\6\2\2"+
    "\3\0\15\2\1\0\1\6\52\2\1\6\27\2\1\6"+
    "\3\0\5\2\1\6\1\0\43\2\1\0\2\7\2\2"+
    "\1\0\11\2\2\6\12\2\1\6\3\2\1\0\1\2"+
    "\1\6\7\2\1\6\2\2\1\6\3\2\1\0\11\2"+
    "\1\0\10\2\1\0\7\2\1\0\1\6\2\2\1\0"+
    "\2\2\1\0\2\2\1\0\2\2\1\0\2\2\1\0"+
    "\2\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\1\2\22\0"+
    "\1\10";

  private static int [] zzUnpackAction() {
    int [] result = new int[700];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375"+
    "\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d"+
    "\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af\0\u06ea\0\u0725"+
    "\0\u0760\0\u079b\0\u07d6\0\73\0\u0811\0\u084c\0\u0887\0\u08c2"+
    "\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\166\0\u0a5f"+
    "\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37"+
    "\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f"+
    "\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7"+
    "\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf"+
    "\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397"+
    "\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534\0\u156f"+
    "\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747"+
    "\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f"+
    "\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u1af7"+
    "\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf"+
    "\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7"+
    "\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\u2044\0\u207f"+
    "\0\u20ba\0\u20f5\0\u2130\0\u216b\0\u21a6\0\u21e1\0\u221c\0\u2257"+
    "\0\u2292\0\u22cd\0\u2308\0\u2343\0\u237e\0\u23b9\0\u23f4\0\u242f"+
    "\0\u246a\0\u24a5\0\u24e0\0\u251b\0\u2556\0\u2591\0\u25cc\0\u2607"+
    "\0\u2642\0\u267d\0\u26b8\0\u26f3\0\73\0\u272e\0\u2769\0\u27a4"+
    "\0\u27df\0\u281a\0\u2855\0\u2890\0\u0f71\0\u28cb\0\u2906\0\u2941"+
    "\0\u297c\0\u29b7\0\u29f2\0\u2a2d\0\u2a68\0\u2aa3\0\u2ade\0\u2b19"+
    "\0\u2b54\0\u2b8f\0\u2bca\0\u2c05\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1"+
    "\0\u2d2c\0\u2d67\0\u2da2\0\u2ddd\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9"+
    "\0\u2f04\0\u2f3f\0\u2f7a\0\u2fb5\0\u2ff0\0\u302b\0\u3066\0\u30a1"+
    "\0\u30dc\0\u3117\0\u3152\0\u318d\0\u31c8\0\u3203\0\u323e\0\u3279"+
    "\0\u32b4\0\u32ef\0\u332a\0\u3365\0\u33a0\0\u33db\0\u3416\0\u3451"+
    "\0\u348c\0\u34c7\0\u3502\0\u353d\0\u3578\0\u35b3\0\u35ee\0\u3629"+
    "\0\u3664\0\u369f\0\u36da\0\u3715\0\u3750\0\u378b\0\u37c6\0\u3801"+
    "\0\u383c\0\u3877\0\u38b2\0\u38ed\0\u3928\0\u3963\0\u399e\0\u39d9"+
    "\0\u3a14\0\u3a4f\0\u3a8a\0\u3ac5\0\u3b00\0\u3b3b\0\u3b76\0\u3bb1"+
    "\0\u3bec\0\u3c27\0\u3c62\0\u3c9d\0\u3cd8\0\u3d13\0\u3d4e\0\u3d89"+
    "\0\u25cc\0\u3dc4\0\u3dff\0\u3e3a\0\u3e75\0\u3eb0\0\u3eeb\0\u3f26"+
    "\0\u3f61\0\u3f9c\0\u3fd7\0\u4012\0\u404d\0\u4088\0\u40c3\0\u40fe"+
    "\0\u4139\0\u4174\0\u41af\0\u41ea\0\u4225\0\u4260\0\u429b\0\u42d6"+
    "\0\u4311\0\u434c\0\u4387\0\u43c2\0\u43fd\0\u4438\0\u4473\0\u44ae"+
    "\0\u44e9\0\u4524\0\u455f\0\u459a\0\u45d5\0\u4610\0\u464b\0\u4686"+
    "\0\u46c1\0\u46fc\0\u4737\0\u4772\0\u47ad\0\u47e8\0\u4823\0\u485e"+
    "\0\u267d\0\73\0\u4899\0\u48d4\0\u490f\0\u494a\0\u4985\0\u49c0"+
    "\0\u49fb\0\u4a36\0\u4a71\0\u4aac\0\u4ae7\0\u4b22\0\u4b5d\0\u4b98"+
    "\0\u4bd3\0\u4c0e\0\u4c49\0\u4c84\0\u4cbf\0\u4cfa\0\u4d35\0\u4d70"+
    "\0\u4dab\0\u4de6\0\u4e21\0\u4e5c\0\u4e97\0\u4ed2\0\u4f0d\0\u4f48"+
    "\0\u4f83\0\u4fbe\0\u4ff9\0\u5034\0\u506f\0\u50aa\0\u50e5\0\u5120"+
    "\0\u515b\0\u5196\0\u51d1\0\u520c\0\u5247\0\u5282\0\u52bd\0\u52f8"+
    "\0\u5333\0\u536e\0\u53a9\0\u53e4\0\u541f\0\u545a\0\u5495\0\u54d0"+
    "\0\u550b\0\u5546\0\u5581\0\u55bc\0\u55f7\0\u5632\0\u566d\0\u56a8"+
    "\0\u56e3\0\u571e\0\u5759\0\u5794\0\u57cf\0\u580a\0\u5845\0\u5880"+
    "\0\u58bb\0\u58f6\0\u5931\0\u596c\0\u59a7\0\u59e2\0\u5a1d\0\u5a58"+
    "\0\u5a93\0\u5ace\0\u45d5\0\u5b09\0\u5b44\0\u5b7f\0\u5bba\0\u5bf5"+
    "\0\u5c30\0\u5c6b\0\u5ca6\0\u5ce1\0\u5d1c\0\u5d57\0\u5d92\0\u5dcd"+
    "\0\u5e08\0\u5e43\0\u5e7e\0\u5eb9\0\u5ef4\0\u5f2f\0\u5f6a\0\u5fa5"+
    "\0\u5fe0\0\u601b\0\u6056\0\u6091\0\u60cc\0\u6107\0\u6142\0\u617d"+
    "\0\u61b8\0\u61f3\0\u622e\0\u6269\0\u62a4\0\u62df\0\u631a\0\u6355"+
    "\0\u23b9\0\u6390\0\u63cb\0\u6406\0\u6441\0\u647c\0\u64b7\0\u64f2"+
    "\0\u27df\0\u652d\0\u6568\0\u65a3\0\u65de\0\u6619\0\u6654\0\u668f"+
    "\0\u66ca\0\u6705\0\u6740\0\u677b\0\u67b6\0\u67f1\0\u682c\0\u6867"+
    "\0\u68a2\0\u68dd\0\u6918\0\u6953\0\u698e\0\u69c9\0\u6a04\0\u6a3f"+
    "\0\u6a7a\0\u6ab5\0\u6af0\0\u6b2b\0\u6b66\0\u6ba1\0\u6bdc\0\u6c17"+
    "\0\u6c52\0\u6c8d\0\u6cc8\0\u6d03\0\u6d3e\0\u6d79\0\u6db4\0\u6def"+
    "\0\u6e2a\0\u3f61\0\u6e65\0\u6ea0\0\u6edb\0\u6f16\0\u6f51\0\u6f8c"+
    "\0\u6fc7\0\u7002\0\u703d\0\u7078\0\u70b3\0\u70ee\0\u7129\0\u7164"+
    "\0\u719f\0\u71da\0\u7215\0\u7250\0\u728b\0\u72c6\0\u7301\0\u733c"+
    "\0\u7377\0\u73b2\0\u73ed\0\u7428\0\u7463\0\u749e\0\u74d9\0\u7514"+
    "\0\u754f\0\u758a\0\u75c5\0\u7600\0\u763b\0\u7676\0\u76b1\0\u541f"+
    "\0\u76ec\0\u7727\0\u7762\0\u779d\0\u77d8\0\u7813\0\u784e\0\u7889"+
    "\0\u281a\0\u78c4\0\u78ff\0\u793a\0\u7975\0\u79b0\0\u79eb\0\u7a26"+
    "\0\u7a61\0\u7a9c\0\u7ad7\0\u7b12\0\u7b4d\0\u7b88\0\u7bc3\0\u7bfe"+
    "\0\u7c39\0\u7c74\0\u7caf\0\u7cea\0\u7d25\0\u7d60\0\u7d9b\0\u7dd6"+
    "\0\u7e11\0\u7e4c\0\u7e87\0\u7ec2\0\u7efd\0\u7f38\0\u7f73\0\u7fae"+
    "\0\u7fe9\0\u8024\0\u805f\0\u809a\0\u80d5\0\u8110\0\73\0\u7727"+
    "\0\u814b\0\u8186\0\u81c1\0\u81fc\0\u8237\0\u8272\0\u82ad\0\u82e8"+
    "\0\u8323\0\u835e\0\u8399\0\u83d4\0\u840f\0\u3416\0\u844a\0\u8485"+
    "\0\u84c0\0\u84fb\0\u8536\0\u8571\0\u85ac\0\u85e7\0\u15aa\0\u8622"+
    "\0\u809a\0\u865d\0\u8698\0\u41ea\0\u86d3\0\u870e\0\73\0\u8749"+
    "\0\u8784\0\u87bf\0\u87fa\0\u8835\0\u8870\0\u88ab\0\u88e6\0\u8921"+
    "\0\u895c\0\u8997\0\u89d2\0\u8a0d\0\u8a48\0\u8a83\0\u8abe\0\u8af9"+
    "\0\u8b34\0\u8b6f\0\u8baa\0\u8be5\0\u8c20\0\u8c5b\0\u8c96\0\u8cd1"+
    "\0\u8d0c\0\u8d47\0\u8d82\0\u8dbd\0\u8df8\0\u8e33\0\u8e6e\0\u8ea9"+
    "\0\u8ee4\0\u8f1f\0\u8f5a\0\u8f95\0\u8fd0\0\u900b\0\u9046\0\u9081"+
    "\0\u90bc\0\u90f7\0\u9132\0\u916d\0\u91a8\0\u91e3\0\u921e\0\u9259"+
    "\0\u9294\0\u92cf\0\u930a\0\u9345\0\u9380\0\u93bb\0\u93f6\0\u9431"+
    "\0\u946c\0\u94a7\0\u88e6\0\u94e2\0\u951d\0\u9558\0\u9593\0\u95ce"+
    "\0\u9609\0\u9644\0\u967f\0\u96ba\0\u96f5\0\u9730\0\u976b\0\u97a6"+
    "\0\u97e1\0\u981c\0\u9857\0\u9892\0\u98cd\0\u9908\0\u9943\0\u997e"+
    "\0\u99b9\0\u99f4\0\u9a2f\0\u9a6a\0\u9aa5\0\u9ae0\0\u9b1b\0\u9b56"+
    "\0\u9b91\0\u9bcc\0\u9c07\0\73";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[700];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\3\6\1\7\2\2\1\10"+
    "\10\2\1\6\3\2\1\11\5\2\1\0\1\12\2\3"+
    "\1\13\1\14\1\15\1\3\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\3"+
    "\1\41\1\3\74\0\3\3\33\0\34\3\2\0\1\4"+
    "\21\0\1\42\12\0\1\43\1\44\1\0\1\44\1\43"+
    "\10\0\1\44\17\0\3\3\33\0\10\3\1\45\1\3"+
    "\1\46\6\3\1\47\12\3\4\0\3\6\14\0\1\6"+
    "\57\0\1\50\73\0\1\51\1\52\70\0\1\53\120\0"+
    "\1\54\35\0\2\3\1\55\33\0\3\3\1\56\2\3"+
    "\1\57\1\60\1\61\1\62\2\3\1\63\2\3\1\64"+
    "\1\3\1\65\6\3\1\66\3\3\1\0\2\3\1\67"+
    "\33\0\2\3\1\70\1\3\1\71\2\3\1\72\3\3"+
    "\1\73\3\3\1\74\1\75\13\3\1\0\3\3\33\0"+
    "\5\3\1\76\1\3\1\77\1\100\1\101\7\3\1\102"+
    "\12\3\1\0\3\3\33\0\2\3\1\103\1\3\1\104"+
    "\2\3\1\105\3\3\1\106\2\3\1\107\1\3\1\110"+
    "\1\111\12\3\1\0\2\3\1\112\33\0\2\3\1\113"+
    "\1\3\1\114\6\3\1\115\4\3\1\116\13\3\1\0"+
    "\2\3\1\117\33\0\2\3\1\120\1\3\1\121\6\3"+
    "\1\122\1\123\17\3\1\0\3\3\33\0\2\3\1\124"+
    "\1\3\1\125\6\3\1\126\4\3\1\127\13\3\1\0"+
    "\2\3\1\130\33\0\2\3\1\131\1\3\1\132\2\3"+
    "\1\133\1\3\1\134\1\3\1\135\4\3\1\136\13\3"+
    "\1\0\2\3\1\137\33\0\7\3\1\140\1\141\1\3"+
    "\1\142\1\3\1\143\1\144\12\3\1\145\3\3\1\0"+
    "\2\3\1\146\33\0\2\3\1\147\4\3\1\150\1\3"+
    "\1\151\1\3\1\152\2\3\1\153\15\3\1\0\2\3"+
    "\1\154\33\0\2\3\1\155\1\3\1\156\2\3\1\157"+
    "\1\3\1\160\1\3\1\161\4\3\1\162\13\3\1\0"+
    "\3\3\33\0\2\3\1\163\10\3\1\164\20\3\1\0"+
    "\2\3\1\165\33\0\2\3\1\166\1\3\1\167\2\3"+
    "\1\170\3\3\1\171\4\3\1\172\1\3\1\57\11\3"+
    "\1\0\3\3\33\0\3\3\1\173\4\3\1\174\4\3"+
    "\1\57\3\3\1\175\4\3\1\176\5\3\1\0\2\3"+
    "\1\177\33\0\2\3\1\200\1\3\1\201\1\3\1\202"+
    "\3\3\1\203\1\204\1\205\1\3\1\206\1\3\1\207"+
    "\1\3\1\210\3\3\1\211\4\3\1\212\1\0\3\3"+
    "\33\0\4\3\1\213\27\3\1\0\3\3\33\0\4\3"+
    "\1\214\2\3\1\215\1\3\1\216\1\3\1\217\20\3"+
    "\1\0\3\3\33\0\13\3\1\220\20\3\1\0\3\3"+
    "\33\0\4\3\1\221\13\3\1\222\13\3\1\0\3\3"+
    "\33\0\2\3\1\223\1\3\1\224\6\3\1\225\4\3"+
    "\1\226\13\3\1\0\3\3\33\0\2\3\1\227\4\3"+
    "\1\230\3\3\1\231\2\3\1\232\1\3\1\233\13\3"+
    "\1\0\3\3\33\0\2\3\1\234\15\3\1\235\13\3"+
    "\1\0\3\3\33\0\13\3\1\236\20\3\2\0\1\42"+
    "\34\0\1\43\1\44\1\0\1\44\1\43\10\0\1\44"+
    "\20\0\1\237\4\0\2\240\63\0\3\3\33\0\12\3"+
    "\1\241\5\3\1\242\4\3\1\243\6\3\1\0\3\3"+
    "\33\0\3\3\1\244\6\3\1\245\21\3\1\0\3\3"+
    "\33\0\2\3\1\246\1\3\1\247\13\3\1\250\13\3"+
    "\11\0\1\251\61\0\11\252\1\253\61\252\5\52\1\254"+
    "\1\255\64\52\2\0\1\256\70\0\5\257\2\0\26\257"+
    "\1\0\35\257\1\0\3\3\33\0\6\3\1\260\25\3"+
    "\1\0\3\3\33\0\2\3\2\57\30\3\1\0\3\3"+
    "\33\0\4\3\1\57\27\3\1\0\3\3\33\0\3\3"+
    "\1\57\16\3\1\57\11\3\1\0\3\3\33\0\6\3"+
    "\1\245\2\3\1\261\22\3\1\0\3\3\33\0\6\3"+
    "\1\262\25\3\1\0\3\3\33\0\21\3\1\263\12\3"+
    "\1\0\3\3\33\0\14\3\1\57\4\3\1\264\12\3"+
    "\1\0\3\3\33\0\23\3\1\57\10\3\1\0\3\3"+
    "\33\0\26\3\1\265\5\3\1\0\3\3\33\0\6\3"+
    "\1\266\13\3\1\57\11\3\1\0\3\3\33\0\2\3"+
    "\1\267\5\3\1\221\1\270\2\3\1\271\1\272\3\3"+
    "\1\273\12\3\1\0\3\3\33\0\13\3\1\265\20\3"+
    "\1\0\2\3\1\274\33\0\26\3\1\275\5\3\1\0"+
    "\3\3\33\0\14\3\1\276\17\3\1\0\3\3\33\0"+
    "\2\3\1\277\16\3\1\300\12\3\1\0\3\3\33\0"+
    "\4\3\1\301\1\3\1\302\5\3\1\303\3\3\1\304"+
    "\13\3\1\0\3\3\33\0\7\3\1\305\24\3\1\0"+
    "\3\3\33\0\3\3\1\306\30\3\1\0\3\3\33\0"+
    "\21\3\1\60\12\3\1\0\3\3\33\0\14\3\1\307"+
    "\17\3\1\0\3\3\33\0\17\3\1\310\14\3\1\0"+
    "\3\3\33\0\5\3\1\311\20\3\1\312\5\3\1\0"+
    "\2\3\1\313\33\0\2\3\1\314\15\3\1\315\1\3"+
    "\1\316\11\3\1\0\3\3\33\0\12\3\1\57\21\3"+
    "\1\0\3\3\33\0\4\3\1\317\27\3\1\0\3\3"+
    "\33\0\26\3\1\320\5\3\1\0\3\3\33\0\4\3"+
    "\1\321\27\3\1\0\3\3\33\0\11\3\1\60\22\3"+
    "\1\0\3\3\33\0\20\3\1\322\13\3\1\0\3\3"+
    "\33\0\2\3\1\323\3\3\1\324\2\3\1\325\1\326"+
    "\1\3\1\327\1\330\3\3\1\331\6\3\1\332\3\3"+
    "\1\0\3\3\33\0\11\3\1\333\15\3\1\334\4\3"+
    "\1\0\3\3\33\0\23\3\1\335\10\3\1\0\3\3"+
    "\33\0\11\3\1\336\14\3\1\337\5\3\1\0\3\3"+
    "\33\0\6\3\1\340\17\3\1\341\5\3\1\0\3\3"+
    "\33\0\5\3\1\214\26\3\1\0\3\3\33\0\6\3"+
    "\1\57\1\3\1\342\3\3\1\343\17\3\1\0\3\3"+
    "\33\0\16\3\1\213\15\3\1\0\3\3\33\0\10\3"+
    "\1\344\10\3\1\214\12\3\1\0\3\3\33\0\2\3"+
    "\1\345\12\3\1\214\12\3\1\346\3\3\1\0\3\3"+
    "\33\0\2\3\1\347\11\3\1\350\12\3\1\245\4\3"+
    "\1\0\3\3\33\0\10\3\1\351\14\3\1\60\6\3"+
    "\1\0\3\3\33\0\17\3\1\352\14\3\1\0\3\3"+
    "\33\0\3\3\1\57\3\3\1\353\11\3\1\354\12\3"+
    "\1\0\3\3\33\0\7\3\1\355\24\3\1\0\3\3"+
    "\33\0\4\3\1\356\6\3\1\357\4\3\1\360\13\3"+
    "\1\0\3\3\33\0\2\3\1\317\31\3\1\0\3\3"+
    "\33\0\21\3\1\361\12\3\1\0\3\3\33\0\30\3"+
    "\1\362\3\3\1\0\3\3\33\0\6\3\1\363\25\3"+
    "\1\0\3\3\33\0\3\3\1\245\30\3\1\0\3\3"+
    "\33\0\11\3\1\221\22\3\1\0\3\3\33\0\4\3"+
    "\1\364\1\3\1\262\25\3\1\0\3\3\33\0\6\3"+
    "\1\365\25\3\1\0\3\3\33\0\15\3\1\366\16\3"+
    "\1\0\3\3\33\0\4\3\1\367\27\3\1\0\3\3"+
    "\33\0\7\3\1\370\24\3\1\0\3\3\33\0\6\3"+
    "\1\371\12\3\1\372\12\3\1\0\3\3\33\0\4\3"+
    "\1\373\6\3\1\374\20\3\1\0\2\3\1\375\33\0"+
    "\13\3\1\101\20\3\1\0\2\3\1\376\33\0\2\3"+
    "\1\377\4\3\1\u0100\1\u0101\1\u0102\14\3\1\u0103\5\3"+
    "\1\0\3\3\33\0\2\3\1\u0104\1\3\1\u0105\27\3"+
    "\1\0\3\3\33\0\10\3\1\u0106\1\u0107\22\3\1\0"+
    "\3\3\33\0\11\3\1\101\22\3\1\0\3\3\33\0"+
    "\6\3\1\u0108\25\3\1\0\3\3\33\0\4\3\1\u0109"+
    "\6\3\1\u010a\20\3\1\0\3\3\33\0\13\3\1\u010b"+
    "\20\3\1\0\2\3\1\u010c\33\0\7\3\1\u010d\24\3"+
    "\1\0\3\3\33\0\7\3\1\u010e\1\3\1\u010f\22\3"+
    "\1\0\3\3\33\0\30\3\1\u0110\3\3\1\0\2\3"+
    "\1\u0111\33\0\11\3\1\u0112\22\3\1\0\3\3\33\0"+
    "\11\3\1\u0113\22\3\1\0\3\3\33\0\14\3\1\u0114"+
    "\17\3\1\0\3\3\33\0\6\3\1\u0115\14\3\1\236"+
    "\10\3\1\0\3\3\33\0\4\3\1\u0116\6\3\1\u0117"+
    "\20\3\1\0\3\3\33\0\6\3\1\u0118\25\3\1\0"+
    "\3\3\33\0\6\3\1\u0119\25\3\1\0\3\3\33\0"+
    "\4\3\1\u011a\27\3\1\0\3\3\33\0\3\3\1\u011b"+
    "\2\3\1\u011c\1\3\1\245\1\3\1\u011d\1\3\1\u011e"+
    "\3\3\1\u011f\1\u0120\12\3\1\0\3\3\33\0\13\3"+
    "\1\u0121\20\3\1\0\3\3\33\0\26\3\1\u0122\5\3"+
    "\1\0\3\3\33\0\17\3\1\u0123\6\3\1\57\5\3"+
    "\1\0\3\3\33\0\30\3\1\60\3\3\1\0\3\3"+
    "\33\0\6\3\1\u0124\2\3\1\u0125\2\3\1\u0126\4\3"+
    "\1\u0127\4\3\1\u0128\5\3\1\0\3\3\33\0\2\3"+
    "\1\u0129\31\3\1\0\3\3\33\0\2\3\1\u012a\31\3"+
    "\1\0\3\3\33\0\26\3\1\60\5\3\1\0\3\3"+
    "\33\0\7\3\1\u012b\6\3\1\u012c\15\3\1\0\2\3"+
    "\1\u012d\33\0\34\3\1\0\3\3\33\0\24\3\1\60"+
    "\7\3\1\0\3\3\33\0\21\3\1\u012e\12\3\1\0"+
    "\3\3\33\0\2\3\1\u012f\31\3\1\0\3\3\33\0"+
    "\11\3\1\u0130\22\3\1\0\3\3\33\0\2\3\1\u0111"+
    "\31\3\1\0\3\3\33\0\6\3\1\57\25\3\1\0"+
    "\3\3\33\0\2\3\1\376\10\3\1\u0131\20\3\1\0"+
    "\3\3\33\0\13\3\1\u0132\20\3\1\0\3\3\33\0"+
    "\6\3\1\u0133\25\3\1\0\3\3\33\0\10\3\1\60"+
    "\23\3\1\0\3\3\33\0\22\3\1\57\11\3\1\0"+
    "\3\3\33\0\11\3\1\u0107\22\3\1\0\3\3\33\0"+
    "\5\3\1\57\1\u0108\25\3\1\0\3\3\33\0\7\3"+
    "\1\246\24\3\1\0\3\3\33\0\3\3\1\u0134\4\3"+
    "\1\171\23\3\1\0\3\3\33\0\10\3\1\u0135\23\3"+
    "\1\0\3\3\33\0\20\3\1\u0136\13\3\1\0\3\3"+
    "\33\0\20\3\1\u0137\13\3\1\0\3\3\33\0\7\3"+
    "\1\u0113\24\3\1\0\3\3\33\0\4\3\1\u0138\13\3"+
    "\1\112\13\3\1\0\3\3\33\0\6\3\1\u0139\25\3"+
    "\1\0\3\3\33\0\7\3\1\u013a\1\3\1\u013b\22\3"+
    "\1\0\3\3\33\0\4\3\1\u013c\27\3\1\0\3\3"+
    "\33\0\20\3\1\317\13\3\2\0\1\237\35\0\1\44"+
    "\1\0\1\44\11\0\1\44\20\0\1\237\71\0\3\3"+
    "\33\0\20\3\1\136\13\3\1\0\3\3\33\0\13\3"+
    "\1\317\17\3\1\u013d\1\0\3\3\33\0\10\3\1\u013e"+
    "\23\3\1\0\3\3\33\0\2\3\1\u0137\31\3\1\0"+
    "\3\3\33\0\4\3\1\u0111\27\3\1\0\3\3\33\0"+
    "\23\3\1\60\10\3\1\0\3\3\33\0\7\3\1\57"+
    "\24\3\1\0\3\3\33\0\10\3\1\66\23\3\12\0"+
    "\1\u013f\60\0\11\252\1\u0140\72\252\1\u0140\1\u0141\60\252"+
    "\6\0\1\255\66\0\1\256\25\0\1\u0142\43\0\1\u0143"+
    "\1\0\1\u0143\33\0\34\u0143\1\0\3\3\33\0\16\3"+
    "\1\u0144\15\3\1\0\3\3\33\0\13\3\1\u0145\20\3"+
    "\1\0\3\3\33\0\20\3\1\u0146\13\3\1\0\3\3"+
    "\33\0\13\3\1\u0147\20\3\1\0\3\3\33\0\4\3"+
    "\1\u0148\27\3\1\0\3\3\33\0\2\3\1\u0149\1\3"+
    "\1\57\27\3\1\0\3\3\33\0\11\3\1\u014a\22\3"+
    "\1\0\3\3\33\0\4\3\1\u014b\27\3\1\0\3\3"+
    "\33\0\11\3\1\u014c\6\3\1\u014d\13\3\1\0\3\3"+
    "\33\0\2\3\1\u014e\1\3\1\u014f\27\3\1\0\3\3"+
    "\33\0\14\3\1\u0150\17\3\1\0\3\3\33\0\17\3"+
    "\1\112\14\3\1\0\3\3\33\0\2\3\1\236\31\3"+
    "\1\0\3\3\33\0\14\3\1\57\17\3\1\0\3\3"+
    "\33\0\23\3\1\u0151\10\3\1\0\3\3\33\0\6\3"+
    "\1\u0152\5\3\1\u0153\10\3\1\57\6\3\1\0\3\3"+
    "\33\0\14\3\1\u0135\17\3\1\0\3\3\33\0\4\3"+
    "\1\u0154\2\3\1\u0155\24\3\1\0\3\3\33\0\4\3"+
    "\1\u0156\27\3\1\0\3\3\33\0\6\3\1\57\12\3"+
    "\1\u0157\12\3\1\0\3\3\33\0\11\3\1\u0158\22\3"+
    "\1\0\3\3\4\0\1\u0159\26\0\34\3\1\0\3\3"+
    "\33\0\2\3\1\u015a\31\3\1\0\3\3\33\0\11\3"+
    "\1\u015b\22\3\1\0\3\3\33\0\6\3\1\u015c\25\3"+
    "\1\0\3\3\33\0\12\3\1\u015d\21\3\1\0\3\3"+
    "\33\0\4\3\1\57\3\3\1\u0145\23\3\1\0\3\3"+
    "\33\0\10\3\1\u015e\7\3\1\u015f\13\3\1\0\3\3"+
    "\33\0\23\3\1\u0160\2\3\1\57\5\3\1\0\3\3"+
    "\33\0\31\3\1\u0161\2\3\1\0\3\3\33\0\10\3"+
    "\1\57\23\3\1\0\3\3\33\0\4\3\1\u0162\27\3"+
    "\1\0\3\3\33\0\33\3\1\u0163\1\0\3\3\33\0"+
    "\21\3\1\u0164\12\3\1\0\3\3\33\0\3\3\1\u0165"+
    "\5\3\1\57\22\3\1\0\2\3\1\u0166\33\0\34\3"+
    "\1\0\3\3\33\0\2\3\1\u0167\31\3\1\0\3\3"+
    "\33\0\11\3\1\u0168\22\3\1\0\3\3\33\0\13\3"+
    "\1\u0169\20\3\1\0\3\3\33\0\4\3\1\u016a\27\3"+
    "\1\0\3\3\33\0\6\3\1\u016b\25\3\1\0\3\3"+
    "\33\0\4\3\1\u016c\6\3\1\u016d\20\3\1\0\3\3"+
    "\33\0\11\3\1\u016e\22\3\1\0\3\3\33\0\14\3"+
    "\1\u016f\4\3\1\57\1\3\1\u0170\10\3\1\0\3\3"+
    "\33\0\16\3\1\214\15\3\1\0\3\3\33\0\11\3"+
    "\1\u0171\22\3\1\0\3\3\33\0\4\3\1\u0172\27\3"+
    "\1\0\2\3\1\u0173\33\0\20\3\1\u0174\13\3\1\0"+
    "\3\3\33\0\4\3\1\u0175\27\3\1\0\3\3\33\0"+
    "\4\3\1\57\7\3\1\u0176\17\3\1\0\3\3\33\0"+
    "\16\3\1\u0177\15\3\1\0\3\3\33\0\23\3\1\u0178"+
    "\10\3\1\0\3\3\33\0\3\3\1\u0110\30\3\1\0"+
    "\3\3\33\0\4\3\1\u0107\27\3\1\0\3\3\33\0"+
    "\3\3\1\57\30\3\1\0\3\3\33\0\2\3\1\u0107"+
    "\31\3\1\0\3\3\33\0\4\3\1\u0179\27\3\1\0"+
    "\3\3\33\0\11\3\1\u017a\22\3\1\0\3\3\33\0"+
    "\6\3\1\u017b\25\3\1\0\3\3\33\0\14\3\1\350"+
    "\17\3\1\0\3\3\33\0\14\3\1\u017c\17\3\1\0"+
    "\3\3\33\0\12\3\1\u014c\1\3\1\u017d\4\3\1\u017e"+
    "\12\3\1\0\3\3\33\0\14\3\1\u017f\17\3\1\0"+
    "\3\3\33\0\10\3\1\214\2\3\1\u0111\12\3\1\u0180"+
    "\1\3\1\u0181\3\3\1\0\3\3\33\0\20\3\1\63"+
    "\13\3\1\0\3\3\33\0\13\3\1\214\20\3\1\0"+
    "\3\3\33\0\4\3\1\u0111\5\3\1\u011d\21\3\1\0"+
    "\3\3\33\0\10\3\1\u0182\23\3\1\0\3\3\33\0"+
    "\4\3\1\u0183\27\3\1\0\3\3\33\0\21\3\1\u0184"+
    "\12\3\1\0\3\3\33\0\7\3\1\u0185\24\3\1\0"+
    "\3\3\33\0\7\3\1\u0186\11\3\1\u0187\12\3\1\0"+
    "\3\3\33\0\2\3\1\u0188\31\3\1\0\3\3\33\0"+
    "\4\3\1\57\1\3\1\57\5\3\1\u0189\17\3\1\0"+
    "\3\3\33\0\2\3\1\u014b\31\3\1\0\3\3\33\0"+
    "\21\3\1\u0175\12\3\1\0\3\3\33\0\21\3\1\u018a"+
    "\12\3\1\0\3\3\33\0\10\3\1\214\23\3\1\0"+
    "\3\3\33\0\11\3\1\u018b\22\3\1\0\3\3\33\0"+
    "\7\3\1\u018c\24\3\1\0\3\3\33\0\6\3\1\u018d"+
    "\1\3\1\u018e\10\3\1\u018f\6\3\1\u0190\3\3\1\0"+
    "\2\3\1\u0191\33\0\11\3\1\u0192\22\3\1\0\3\3"+
    "\33\0\12\3\1\u0193\13\3\1\u0194\5\3\1\0\3\3"+
    "\33\0\7\3\1\u0195\24\3\1\0\3\3\33\0\14\3"+
    "\1\u0196\17\3\1\0\3\3\33\0\14\3\1\63\17\3"+
    "\1\0\3\3\33\0\11\3\1\57\22\3\1\0\3\3"+
    "\33\0\14\3\1\u0118\17\3\1\0\3\3\33\0\4\3"+
    "\1\u0197\27\3\1\0\3\3\33\0\26\3\1\57\5\3"+
    "\1\0\3\3\33\0\2\3\1\214\31\3\1\0\3\3"+
    "\33\0\10\3\1\347\23\3\1\0\3\3\33\0\4\3"+
    "\1\u0198\1\3\1\u0199\25\3\1\0\3\3\33\0\21\3"+
    "\1\214\12\3\1\0\3\3\33\0\4\3\1\57\4\3"+
    "\1\u019a\22\3\1\0\3\3\33\0\20\3\1\250\13\3"+
    "\1\0\3\3\33\0\3\3\1\u019b\30\3\1\0\3\3"+
    "\33\0\25\3\1\57\6\3\1\0\3\3\33\0\25\3"+
    "\1\u0131\6\3\1\0\3\3\33\0\27\3\1\u019c\4\3"+
    "\1\0\3\3\33\0\2\3\1\u0113\31\3\1\0\3\3"+
    "\33\0\27\3\1\101\4\3\1\0\3\3\33\0\16\3"+
    "\1\57\15\3\1\0\3\3\33\0\31\3\1\u019d\2\3"+
    "\1\0\3\3\33\0\10\3\1\u019e\23\3\1\0\3\3"+
    "\33\0\4\3\1\u019f\13\3\1\u01a0\13\3\1\0\3\3"+
    "\33\0\4\3\1\u01a1\6\3\1\57\20\3\1\0\2\3"+
    "\1\214\33\0\34\3\1\0\3\3\33\0\11\3\1\u01a2"+
    "\22\3\1\0\3\3\33\0\6\3\1\u01a3\25\3\1\0"+
    "\3\3\33\0\4\3\1\u01a4\27\3\1\0\3\3\33\0"+
    "\11\3\1\u01a5\22\3\1\0\3\3\33\0\4\3\1\u01a6"+
    "\27\3\1\0\3\3\33\0\21\3\1\u01a7\12\3\1\0"+
    "\2\3\1\u01a8\33\0\34\3\1\0\3\3\33\0\4\3"+
    "\1\u01a9\27\3\1\0\2\3\1\u01aa\33\0\6\3\1\262"+
    "\4\3\1\u010c\20\3\1\0\3\3\33\0\21\3\1\u01ab"+
    "\12\3\1\0\3\3\33\0\2\3\1\u01ac\31\3\1\0"+
    "\3\3\33\0\6\3\1\u01ad\25\3\1\0\3\3\33\0"+
    "\14\3\1\60\17\3\1\0\3\3\33\0\13\3\1\222"+
    "\20\3\1\0\3\3\33\0\4\3\1\u01ae\27\3\1\0"+
    "\3\3\33\0\6\3\1\u01af\25\3\1\0\3\3\33\0"+
    "\6\3\1\u01b0\25\3\1\0\3\3\33\0\11\3\1\u01b1"+
    "\22\3\1\0\3\3\33\0\4\3\1\u01b2\7\3\1\u01b3"+
    "\4\3\1\u01b4\5\3\1\u01b5\4\3\1\0\2\3\1\265"+
    "\33\0\34\3\1\0\3\3\33\0\17\3\1\350\14\3"+
    "\1\0\3\3\33\0\13\3\1\57\20\3\1\0\2\3"+
    "\1\112\33\0\34\3\1\0\2\3\1\u014b\33\0\34\3"+
    "\1\0\3\3\33\0\6\3\1\u01b6\25\3\1\0\3\3"+
    "\33\0\6\3\1\u01b7\25\3\1\0\3\3\33\0\7\3"+
    "\1\60\1\u01b8\23\3\1\0\3\3\33\0\16\3\1\u01b9"+
    "\15\3\1\0\3\3\33\0\14\3\1\123\5\3\1\u0110"+
    "\11\3\1\0\2\3\1\u01ba\33\0\34\3\1\0\3\3"+
    "\33\0\27\3\1\57\4\3\1\0\2\3\1\60\33\0"+
    "\34\3\1\0\3\3\33\0\13\3\1\u01bb\20\3\13\0"+
    "\1\u01bc\57\0\11\252\1\u0140\1\255\60\252\1\u01bd\1\u01be"+
    "\1\u01bd\1\u01be\1\u01bd\2\0\26\u01bd\1\0\1\u01bd\34\u01be"+
    "\1\0\3\3\33\0\13\3\1\u01bf\20\3\1\0\3\3"+
    "\33\0\14\3\1\373\17\3\1\0\3\3\33\0\13\3"+
    "\1\317\20\3\1\0\3\3\33\0\11\3\1\u0193\22\3"+
    "\1\0\3\3\33\0\7\3\1\63\24\3\1\0\3\3"+
    "\33\0\17\3\1\u01c0\14\3\1\0\3\3\33\0\11\3"+
    "\1\u01c1\22\3\1\0\3\3\33\0\6\3\1\60\25\3"+
    "\1\0\3\3\33\0\2\3\1\u01c2\31\3\1\0\3\3"+
    "\33\0\26\3\1\350\5\3\1\0\2\3\1\u01c3\33\0"+
    "\34\3\1\0\3\3\33\0\7\3\1\u01c4\24\3\1\0"+
    "\3\3\33\0\7\3\1\u01c5\24\3\1\0\3\3\33\0"+
    "\10\3\1\u01c6\23\3\1\0\3\3\33\0\7\3\1\u01c7"+
    "\10\3\1\u01c8\13\3\1\0\3\3\33\0\13\3\1\u01c9"+
    "\20\3\1\0\3\3\33\0\7\3\1\u01ca\24\3\1\0"+
    "\3\3\33\0\2\3\1\u01a9\31\3\1\0\3\3\33\0"+
    "\12\3\1\u01cb\21\3\1\0\3\3\33\0\6\3\1\u0175"+
    "\25\3\1\0\3\3\33\0\30\3\1\u0107\3\3\43\0"+
    "\1\u01cc\30\0\3\3\33\0\12\3\1\60\21\3\1\0"+
    "\3\3\33\0\4\3\1\u01cd\27\3\1\0\3\3\33\0"+
    "\21\3\1\u01ce\12\3\1\0\3\3\33\0\13\3\1\u01cf"+
    "\20\3\1\0\3\3\33\0\21\3\1\u01d0\12\3\1\0"+
    "\3\3\33\0\11\3\1\u0110\22\3\1\0\3\3\33\0"+
    "\23\3\1\245\10\3\1\0\3\3\33\0\14\3\1\u01d1"+
    "\17\3\1\0\3\3\33\0\21\3\1\u01d2\2\3\1\u01d3"+
    "\7\3\1\0\2\3\1\350\33\0\34\3\1\0\3\3"+
    "\33\0\4\3\1\u01b2\27\3\1\0\3\3\33\0\6\3"+
    "\1\u01d4\25\3\1\0\3\3\33\0\7\3\1\317\24\3"+
    "\1\0\3\3\33\0\6\3\1\u01d5\25\3\1\0\3\3"+
    "\33\0\20\3\1\u01d6\13\3\1\0\3\3\33\0\10\3"+
    "\1\u01d7\23\3\1\0\3\3\33\0\7\3\1\u01d8\24\3"+
    "\1\0\3\3\33\0\7\3\1\u01d9\3\3\1\u01c2\20\3"+
    "\1\0\3\3\33\0\7\3\1\214\24\3\1\0\3\3"+
    "\33\0\25\3\1\60\6\3\1\0\3\3\33\0\17\3"+
    "\1\u01da\14\3\1\0\3\3\33\0\13\3\1\u01db\20\3"+
    "\1\0\2\3\1\u01dc\33\0\34\3\1\0\3\3\33\0"+
    "\20\3\1\u01dd\13\3\1\0\3\3\33\0\7\3\1\u017a"+
    "\24\3\1\0\3\3\33\0\7\3\1\350\24\3\1\0"+
    "\3\3\33\0\13\3\1\u01ca\20\3\1\0\3\3\33\0"+
    "\21\3\1\57\12\3\1\0\3\3\33\0\11\3\1\u01de"+
    "\22\3\1\0\3\3\33\0\4\3\1\u01df\27\3\1\0"+
    "\2\3\1\u01e0\33\0\34\3\1\0\3\3\33\0\10\3"+
    "\1\u0133\23\3\1\0\3\3\33\0\20\3\1\276\13\3"+
    "\1\0\3\3\33\0\20\3\1\350\13\3\1\0\3\3"+
    "\33\0\4\3\1\376\27\3\1\0\3\3\33\0\20\3"+
    "\1\u01e1\13\3\1\0\3\3\33\0\4\3\1\u01e2\27\3"+
    "\1\0\3\3\33\0\4\3\1\u01e3\27\3\1\0\3\3"+
    "\33\0\2\3\1\u01e4\31\3\1\0\3\3\33\0\20\3"+
    "\1\u01e5\13\3\1\0\3\3\33\0\3\3\1\u01e6\1\3"+
    "\1\u01e7\1\3\1\u01e8\23\3\1\u01e9\1\0\3\3\33\0"+
    "\6\3\1\u01ea\25\3\1\0\3\3\33\0\4\3\1\u0157"+
    "\27\3\1\0\3\3\33\0\11\3\1\u01eb\22\3\1\0"+
    "\3\3\33\0\4\3\1\u01ec\27\3\1\0\3\3\33\0"+
    "\13\3\1\u0111\20\3\1\0\3\3\33\0\11\3\1\u01ed"+
    "\22\3\1\0\3\3\33\0\2\3\1\u01ee\31\3\1\0"+
    "\3\3\33\0\6\3\1\u01ef\25\3\1\0\3\3\33\0"+
    "\4\3\1\u01f0\27\3\1\0\3\3\33\0\4\3\1\u01f1"+
    "\27\3\1\0\3\3\33\0\2\3\1\u01f2\15\3\1\u01f3"+
    "\13\3\1\0\3\3\33\0\4\3\1\u01f4\27\3\1\0"+
    "\3\3\33\0\6\3\1\u01f5\25\3\1\0\3\3\33\0"+
    "\4\3\1\u016c\27\3\1\0\3\3\33\0\26\3\1\317"+
    "\5\3\1\0\3\3\33\0\2\3\1\u01f6\31\3\1\0"+
    "\3\3\33\0\20\3\1\214\13\3\1\0\3\3\33\0"+
    "\2\3\1\u01f7\26\3\1\u019d\2\3\1\0\3\3\33\0"+
    "\25\3\1\u01f8\6\3\1\0\3\3\33\0\6\3\1\u01f9"+
    "\25\3\1\0\3\3\33\0\20\3\1\u01fa\13\3\1\0"+
    "\3\3\33\0\7\3\1\134\24\3\1\0\3\3\33\0"+
    "\15\3\1\u01fb\16\3\1\0\3\3\33\0\11\3\1\u01fc"+
    "\22\3\1\0\3\3\33\0\4\3\1\107\27\3\1\0"+
    "\3\3\33\0\11\3\1\u01fd\22\3\1\0\3\3\33\0"+
    "\6\3\1\u01fe\25\3\1\0\3\3\33\0\5\3\1\57"+
    "\26\3\1\0\3\3\33\0\14\3\1\u01ff\17\3\1\0"+
    "\3\3\33\0\7\3\1\u0200\13\3\1\245\10\3\1\0"+
    "\2\3\1\u0201\33\0\34\3\1\0\3\3\33\0\20\3"+
    "\1\u0202\13\3\1\0\3\3\33\0\7\3\1\214\1\u0203"+
    "\23\3\1\0\3\3\33\0\2\3\1\63\31\3\1\0"+
    "\3\3\33\0\3\3\1\u0204\30\3\1\0\3\3\33\0"+
    "\6\3\1\u0205\25\3\1\0\3\3\33\0\21\3\1\245"+
    "\12\3\1\0\3\3\33\0\14\3\1\214\17\3\1\0"+
    "\3\3\33\0\7\3\1\u0206\24\3\1\0\3\3\33\0"+
    "\20\3\1\u0207\13\3\1\0\3\3\33\0\10\3\1\u0208"+
    "\23\3\1\0\3\3\33\0\20\3\1\u0209\13\3\1\0"+
    "\3\3\33\0\26\3\1\u020a\5\3\1\0\3\3\33\0"+
    "\3\3\1\u013e\30\3\1\0\3\3\33\0\4\3\1\u020b"+
    "\27\3\1\0\3\3\33\0\11\3\1\u020c\22\3\1\0"+
    "\3\3\33\0\7\3\1\u020d\24\3\1\0\3\3\33\0"+
    "\2\3\1\57\10\3\1\u0201\20\3\1\0\3\3\33\0"+
    "\6\3\1\373\25\3\1\0\3\3\33\0\2\3\1\u020e"+
    "\31\3\1\0\3\3\33\0\15\3\1\u0187\16\3\1\0"+
    "\3\3\33\0\4\3\1\u0165\27\3\1\0\3\3\33\0"+
    "\4\3\1\u020f\27\3\1\0\3\3\33\0\4\3\1\u0210"+
    "\27\3\1\0\3\3\33\0\27\3\1\317\4\3\14\0"+
    "\1\u0211\114\0\1\u0212\34\0\1\u01bd\1\u01be\1\u01bd\1\u01be"+
    "\1\u01bd\2\0\26\u01bd\1\0\1\u0213\34\u01be\1\0\3\3"+
    "\33\0\7\3\1\u0214\24\3\1\0\3\3\33\0\2\3"+
    "\1\101\31\3\1\0\3\3\33\0\7\3\1\60\24\3"+
    "\1\0\3\3\33\0\11\3\1\214\22\3\1\0\3\3"+
    "\33\0\7\3\1\u0215\24\3\1\0\3\3\33\0\20\3"+
    "\1\u0216\13\3\1\0\3\3\33\0\13\3\1\u0209\20\3"+
    "\1\0\3\3\33\0\20\3\1\u0217\13\3\1\0\3\3"+
    "\33\0\10\3\1\u01a9\23\3\1\0\3\3\33\0\10\3"+
    "\1\u0218\23\3\1\0\3\3\33\0\10\3\1\350\23\3"+
    "\1\0\3\3\33\0\6\3\1\u0219\25\3\44\0\1\u021a"+
    "\27\0\3\3\33\0\21\3\1\u021b\12\3\1\0\3\3"+
    "\33\0\20\3\1\207\13\3\1\0\3\3\33\0\7\3"+
    "\1\u0180\24\3\1\0\3\3\33\0\2\3\1\u0106\6\3"+
    "\1\u0192\22\3\1\0\3\3\33\0\13\3\1\u021c\20\3"+
    "\1\0\3\3\33\0\6\3\1\u021d\25\3\1\0\3\3"+
    "\33\0\13\3\1\u021e\20\3\1\0\3\3\33\0\4\3"+
    "\1\121\27\3\1\0\3\3\33\0\20\3\1\200\13\3"+
    "\1\0\3\3\33\0\14\3\1\u01a5\17\3\1\0\3\3"+
    "\33\0\15\3\1\u021f\16\3\1\0\3\3\33\0\4\3"+
    "\1\u0220\27\3\1\0\3\3\33\0\20\3\1\u01a9\13\3"+
    "\1\0\3\3\33\0\2\3\1\u01df\31\3\1\0\2\3"+
    "\1\376\33\0\34\3\1\0\3\3\33\0\20\3\1\u0221"+
    "\13\3\1\0\3\3\33\0\15\3\1\57\16\3\1\0"+
    "\2\3\1\375\33\0\34\3\1\0\3\3\33\0\14\3"+
    "\1\u0113\17\3\1\0\3\3\33\0\2\3\1\246\31\3"+
    "\1\0\3\3\33\0\21\3\1\262\12\3\1\0\3\3"+
    "\33\0\7\3\1\200\24\3\1\0\3\3\33\0\3\3"+
    "\1\u0222\30\3\1\0\3\3\33\0\7\3\1\221\24\3"+
    "\1\0\3\3\33\0\11\3\1\u0223\22\3\1\0\3\3"+
    "\33\0\2\3\1\u0224\31\3\1\0\3\3\33\0\26\3"+
    "\1\u0107\5\3\1\0\3\3\33\0\13\3\1\u0225\20\3"+
    "\1\0\2\3\1\u0226\33\0\34\3\1\0\3\3\33\0"+
    "\2\3\1\u0227\31\3\1\0\3\3\33\0\10\3\1\u0228"+
    "\23\3\1\0\3\3\33\0\13\3\1\66\20\3\1\0"+
    "\3\3\33\0\3\3\1\u0229\30\3\1\0\3\3\33\0"+
    "\4\3\1\u022a\27\3\1\0\3\3\33\0\21\3\1\u012a"+
    "\12\3\1\0\3\3\33\0\21\3\1\u022b\12\3\1\0"+
    "\3\3\33\0\20\3\1\u022c\13\3\1\0\3\3\33\0"+
    "\10\3\1\u013d\23\3\1\0\3\3\33\0\14\3\1\u01cb"+
    "\17\3\1\0\3\3\33\0\7\3\1\u022d\24\3\1\0"+
    "\3\3\33\0\6\3\1\u022e\25\3\1\0\3\3\33\0"+
    "\14\3\1\u022f\17\3\1\0\3\3\33\0\12\3\1\u0230"+
    "\21\3\1\0\3\3\33\0\4\3\1\u0231\27\3\1\0"+
    "\3\3\33\0\23\3\1\317\10\3\1\0\3\3\33\0"+
    "\2\3\1\u0232\31\3\1\0\3\3\33\0\13\3\1\u01df"+
    "\20\3\1\0\3\3\33\0\4\3\1\u0233\27\3\1\0"+
    "\3\3\33\0\20\3\1\u0234\13\3\1\0\3\3\33\0"+
    "\2\3\1\u0235\31\3\1\0\3\3\33\0\21\3\1\u0125"+
    "\6\3\1\350\3\3\1\0\3\3\33\0\3\3\1\60"+
    "\30\3\1\0\3\3\33\0\2\3\1\u0236\31\3\1\0"+
    "\3\3\33\0\21\3\1\u0237\12\3\1\0\3\3\33\0"+
    "\20\3\1\373\13\3\1\0\3\3\33\0\7\3\1\u0110"+
    "\24\3\1\0\3\3\33\0\20\3\1\u0238\13\3\1\0"+
    "\3\3\33\0\13\3\1\u0239\20\3\1\0\3\3\33\0"+
    "\6\3\1\u023a\25\3\1\0\3\3\33\0\21\3\1\u023b"+
    "\12\3\1\0\3\3\33\0\2\3\1\57\31\3\1\0"+
    "\3\3\33\0\26\3\1\u023c\5\3\1\0\3\3\33\0"+
    "\20\3\1\376\13\3\1\0\3\3\33\0\7\3\1\u0187"+
    "\24\3\1\0\3\3\33\0\7\3\1\u023d\24\3\1\0"+
    "\3\3\33\0\30\3\1\245\3\3\14\0\1\u023e\114\0"+
    "\1\u023f\72\0\1\u0240\35\0\3\3\33\0\20\3\1\u0241"+
    "\13\3\1\0\3\3\33\0\2\3\1\274\1\3\1\347"+
    "\27\3\1\0\3\3\33\0\12\3\1\u0235\4\3\1\60"+
    "\14\3\1\0\3\3\33\0\17\3\1\u0242\14\3\1\0"+
    "\3\3\33\0\10\3\1\u0125\23\3\43\0\1\u0243\30\0"+
    "\3\3\33\0\2\3\1\u0244\31\3\1\0\3\3\33\0"+
    "\10\3\1\u0245\23\3\1\0\3\3\33\0\2\3\1\67"+
    "\31\3\1\0\3\3\33\0\10\3\1\u0246\23\3\1\0"+
    "\3\3\33\0\20\3\1\u0247\13\3\1\0\3\3\33\0"+
    "\10\3\1\u0248\23\3\1\0\3\3\33\0\3\3\1\u0249"+
    "\30\3\1\0\2\3\1\u01c2\33\0\34\3\1\0\3\3"+
    "\33\0\4\3\1\u024a\27\3\1\0\3\3\33\0\6\3"+
    "\1\u024b\25\3\1\0\3\3\33\0\27\3\1\u024c\4\3"+
    "\1\0\3\3\33\0\4\3\1\u01e4\27\3\1\0\3\3"+
    "\33\0\12\3\1\u0175\21\3\1\0\3\3\33\0\6\3"+
    "\1\u024d\25\3\1\0\3\3\33\0\4\3\1\u024e\27\3"+
    "\1\0\3\3\33\0\7\3\1\u024f\24\3\1\0\3\3"+
    "\33\0\12\3\1\u0250\21\3\1\0\3\3\33\0\10\3"+
    "\1\u0251\23\3\1\0\3\3\33\0\2\3\1\u0252\31\3"+
    "\1\0\3\3\33\0\4\3\1\57\13\3\1\u0146\13\3"+
    "\1\0\3\3\33\0\6\3\1\u0253\25\3\1\0\3\3"+
    "\33\0\13\3\1\u020c\20\3\1\0\3\3\33\0\5\3"+
    "\1\u0254\26\3\1\0\3\3\33\0\14\3\1\u0235\17\3"+
    "\1\0\3\3\33\0\10\3\1\u0255\23\3\1\0\3\3"+
    "\33\0\6\3\1\u0256\25\3\1\0\3\3\33\0\6\3"+
    "\1\u0187\25\3\1\0\3\3\33\0\11\3\1\u0257\22\3"+
    "\1\0\3\3\33\0\20\3\1\u0167\13\3\1\0\3\3"+
    "\33\0\6\3\1\u0258\25\3\1\0\3\3\33\0\10\3"+
    "\1\u0259\23\3\1\0\3\3\33\0\20\3\1\u025a\13\3"+
    "\1\0\3\3\33\0\6\3\1\u025b\25\3\1\0\3\3"+
    "\33\0\31\3\1\u025c\2\3\1\0\3\3\33\0\10\3"+
    "\1\u0110\23\3\14\0\1\u025d\57\0\3\3\33\0\24\3"+
    "\1\u01a5\7\3\1\0\2\3\1\u025e\33\0\34\3\53\0"+
    "\1\u025f\20\0\3\3\33\0\26\3\1\u0260\5\3\1\0"+
    "\3\3\33\0\30\3\1\u0190\3\3\1\0\3\3\33\0"+
    "\4\3\1\u0261\27\3\1\0\3\3\33\0\23\3\1\u0222"+
    "\10\3\1\0\3\3\33\0\14\3\1\341\17\3\1\0"+
    "\3\3\33\0\14\3\1\u0262\17\3\1\0\3\3\33\0"+
    "\23\3\1\341\10\3\1\0\3\3\33\0\2\3\1\u0263"+
    "\31\3\1\0\3\3\33\0\21\3\1\u0264\12\3\1\0"+
    "\3\3\33\0\31\3\1\u0265\2\3\1\0\3\3\33\0"+
    "\4\3\1\347\27\3\1\0\3\3\33\0\13\3\1\u0266"+
    "\20\3\1\0\3\3\33\0\21\3\1\u0267\12\3\1\0"+
    "\3\3\33\0\20\3\1\u0268\13\3\1\0\3\3\33\0"+
    "\4\3\1\u0269\27\3\1\0\3\3\33\0\6\3\1\u0267"+
    "\25\3\1\0\3\3\33\0\23\3\1\171\10\3\1\0"+
    "\3\3\33\0\22\3\1\u026a\11\3\1\0\3\3\33\0"+
    "\22\3\1\u026b\11\3\1\0\3\3\33\0\14\3\1\u026c"+
    "\17\3\1\0\3\3\33\0\20\3\1\u026d\13\3\15\0"+
    "\1\u026e\56\0\3\3\33\0\6\3\1\u024f\25\3\1\0"+
    "\3\3\33\0\12\3\1\112\21\3\1\0\3\3\33\0"+
    "\31\3\1\u026f\2\3\1\0\3\3\33\0\13\3\1\u0107"+
    "\20\3\1\0\3\3\33\0\21\3\1\u0270\12\3\1\0"+
    "\3\3\33\0\4\3\1\214\27\3\1\0\2\3\1\u01a8"+
    "\33\0\3\3\1\373\2\3\1\u0271\25\3\1\0\3\3"+
    "\33\0\10\3\1\345\23\3\1\0\3\3\33\0\6\3"+
    "\1\u0272\25\3\1\0\3\3\33\0\10\3\1\u0273\23\3"+
    "\1\0\3\3\33\0\7\3\1\u0119\24\3\1\0\3\3"+
    "\33\0\14\3\1\u0262\14\3\1\u0274\2\3\1\0\3\3"+
    "\33\0\2\3\1\u0275\31\3\1\0\3\3\33\0\21\3"+
    "\1\u0276\3\3\1\u0277\6\3\1\0\3\3\33\0\14\3"+
    "\1\u0175\17\3\16\0\1\u0278\55\0\3\3\33\0\16\3"+
    "\1\u0279\7\3\1\u027a\5\3\1\0\3\3\33\0\13\3"+
    "\1\u027b\20\3\1\0\3\3\33\0\20\3\1\u027c\13\3"+
    "\1\0\3\3\33\0\2\3\1\274\31\3\1\0\3\3"+
    "\33\0\6\3\1\u0210\25\3\1\0\3\3\33\0\20\3"+
    "\1\u027d\13\3\1\0\2\3\1\u027e\33\0\34\3\1\0"+
    "\3\3\33\0\20\3\1\u027f\13\3\1\0\3\3\33\0"+
    "\4\3\1\u0280\27\3\16\0\1\u0281\55\0\3\3\33\0"+
    "\13\3\1\u0282\20\3\1\0\3\3\33\0\20\3\1\u0283"+
    "\13\3\1\0\2\3\1\u0284\33\0\34\3\1\0\3\3"+
    "\33\0\26\3\1\u0285\5\3\1\0\3\3\33\0\10\3"+
    "\1\u0286\23\3\1\0\3\3\33\0\3\3\1\u0194\30\3"+
    "\1\0\3\3\33\0\26\3\1\u0287\5\3\1\0\3\3"+
    "\33\0\22\3\1\u0288\11\3\15\0\1\u0289\56\0\2\3"+
    "\1\u0111\33\0\34\3\1\0\3\3\33\0\10\3\1\u0193"+
    "\23\3\1\0\3\3\33\0\7\3\1\u012a\24\3\1\0"+
    "\3\3\33\0\4\3\1\u028a\27\3\1\0\3\3\33\0"+
    "\21\3\1\u0190\12\3\1\0\3\3\33\0\20\3\1\u028b"+
    "\13\3\1\0\3\3\33\0\12\3\1\u028c\21\3\15\0"+
    "\1\u028d\56\0\3\3\33\0\21\3\1\u01d2\12\3\1\0"+
    "\3\3\33\0\11\3\1\u028e\22\3\1\0\3\3\33\0"+
    "\16\3\1\u028f\15\3\15\0\1\u0290\56\0\3\3\33\0"+
    "\2\3\1\u0291\31\3\1\0\3\3\33\0\7\3\1\u0292"+
    "\24\3\15\0\1\u0293\56\0\3\3\33\0\7\3\1\u0294"+
    "\24\3\1\0\3\3\33\0\2\3\1\u0295\31\3\17\0"+
    "\1\u0296\54\0\3\3\33\0\20\3\1\u0297\13\3\1\0"+
    "\3\3\33\0\21\3\1\u0298\12\3\15\0\1\u0299\56\0"+
    "\3\3\33\0\6\3\1\u029a\25\3\1\0\3\3\33\0"+
    "\4\3\1\u029b\27\3\20\0\1\u029c\53\0\3\3\33\0"+
    "\22\3\1\u029d\11\3\20\0\1\u029e\53\0\3\3\33\0"+
    "\3\3\1\u029f\2\3\1\u0272\25\3\21\0\1\u02a0\52\0"+
    "\3\3\33\0\4\3\1\u02a1\27\3\21\0\1\u02a2\52\0"+
    "\3\3\33\0\6\3\1\u02a3\25\3\17\0\1\u02a4\54\0"+
    "\3\3\33\0\2\3\1\u02a5\31\3\22\0\1\u02a6\51\0"+
    "\3\3\33\0\20\3\1\u02a7\13\3\23\0\1\u02a8\50\0"+
    "\3\3\33\0\11\3\1\u02a9\22\3\23\0\1\u02aa\50\0"+
    "\3\3\33\0\21\3\1\u029b\12\3\24\0\1\u02ab\72\0"+
    "\1\u02ac\73\0\1\u02ad\73\0\1\u02ae\71\0\1\u02af\73\0"+
    "\1\u02b0\73\0\1\u02b1\73\0\1\u02b2\73\0\1\u02b3\73\0"+
    "\1\u02b4\67\0\1\u02b5\73\0\1\u02b6\73\0\1\u02b7\73\0"+
    "\1\u02b8\73\0\1\u02b9\73\0\1\u02ba\72\0\1\u02bb\72\0"+
    "\1\u02bc\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[40002];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\40\1\1\0\1\11\3\1\2\0\1\1"+
    "\2\0\163\1\1\0\10\1\3\0\1\1\1\11\2\0"+
    "\217\1\2\0\1\1\1\11\1\0\25\1\1\0\142\1"+
    "\3\0\15\1\1\0\104\1\3\0\6\1\1\0\43\1"+
    "\1\0\1\11\3\1\1\0\31\1\1\0\1\1\1\11"+
    "\16\1\1\0\11\1\1\0\10\1\1\0\7\1\1\0"+
    "\3\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\22\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[700];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ERROR;
            } 
            // fall through
          case 9: break;
          case 2: 
            { lexeme=yytext(); return IDENTIFICADORES;
            } 
            // fall through
          case 10: break;
          case 3: 
            { lexeme=yytext(); return INT;
            } 
            // fall through
          case 11: break;
          case 4: 
            { /*Ignore*/
            } 
            // fall through
          case 12: break;
          case 5: 
            { lexeme=yytext(); return FLOAT;
            } 
            // fall through
          case 13: break;
          case 6: 
            { lexeme=yytext(); return RESERVADAS;
            } 
            // fall through
          case 14: break;
          case 7: 
            { lexeme=yytext(); return STRING;
            } 
            // fall through
          case 15: break;
          case 8: 
            { lexeme=yytext(); return OPERADORES;
            } 
            // fall through
          case 16: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
