/* The following code was generated by JFlex 1.7.0 */

package lexCode;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/Bryan/OneDrive - Universidad Rafael Landivar/Documentos/NetBeansProjects/Lex_Analyzer/LexicalAnalyzer/src/lexCode/Lexer.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\7\1\7\1\7\1\7\22\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\6\1\0\1\0\1\0\1\57\1\57\7\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\17\1\31\1\26\1\20\1\2\1\27"+
    "\1\35\1\30\1\32\1\43\1\37\1\5\1\40\1\3\1\25\1\24"+
    "\1\44\1\23\1\33\1\22\1\4\1\42\1\41\1\21\1\34\1\36"+
    "\1\0\1\0\1\0\1\0\1\1\1\0\1\13\1\51\1\14\1\56"+
    "\1\10\1\47\1\55\1\54\1\15\2\0\1\50\1\60\1\45\1\16"+
    "\1\12\1\0\1\53\1\11\1\46\1\61\1\52\4\0\1\0\1\0"+
    "\1\0\7\0\1\7\u1fa2\0\1\7\1\7\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\36\1\10\0\1\2\16\0\1\2\3\0\1\2"+
    "\14\0\1\2\17\0\1\2\1\0\1\2\2\0\1\2"+
    "\31\0\1\2\1\0\1\2\24\0\1\2\21\0\1\2"+
    "\21\0\1\2\11\0\1\2\1\0\1\2\5\0\1\2"+
    "\55\0\1\2\27\0\1\2\14\0\1\2\1\0\1\2"+
    "\11\0\1\2\14\0\1\2\4\0\1\2\1\0\1\2"+
    "\20\0\1\2\27\0\1\2\10\0\1\2\3\0\1\2"+
    "\2\0\1\2\21\0\1\2\2\0\1\2\2\0\1\2"+
    "\21\0\1\2\3\0\1\2\43\0\2\2\31\0\1\2"+
    "\45\0\1\2\6\0\1\2\31\0\1\2\1\0\1\2"+
    "\5\0\1\3\52\0\1\4\1\0\1\5\13\0\1\2"+
    "\2\0\1\2\14\0\1\2\1\0\1\6\14\0\1\2"+
    "\4\0\1\2\45\0\1\7\4\0\1\10\1\2\7\0"+
    "\1\11\12\0\1\12\12\0\1\13\11\0\1\14";

  private static int [] zzUnpackAction() {
    int [] result = new int[733];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee"+
    "\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e"+
    "\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e"+
    "\0\u0640\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e"+
    "\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e"+
    "\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\62\0\u0a8c"+
    "\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c"+
    "\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac"+
    "\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c"+
    "\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc"+
    "\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c"+
    "\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec"+
    "\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c"+
    "\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676\0\u16a8\0\u16da\0\u170c"+
    "\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806\0\u1838\0\u186a\0\u189c"+
    "\0\u18ce\0\u1900\0\u1932\0\u1964\0\u1996\0\u19c8\0\u19fa\0\u1a2c"+
    "\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc"+
    "\0\u1bee\0\u1c20\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c"+
    "\0\u1d7e\0\u1db0\0\u1de2\0\u1e14\0\u1e46\0\u1e78\0\u1eaa\0\u1edc"+
    "\0\u1f0e\0\u1f40\0\u1f72\0\u1fa4\0\u1fd6\0\u2008\0\u203a\0\u206c"+
    "\0\u209e\0\u20d0\0\u2102\0\u2134\0\u2166\0\u2198\0\u21ca\0\u21fc"+
    "\0\u222e\0\u2260\0\u2292\0\u22c4\0\u22f6\0\u2328\0\u235a\0\u238c"+
    "\0\u23be\0\u23f0\0\u2422\0\u2454\0\u2486\0\u24b8\0\u24ea\0\u251c"+
    "\0\u254e\0\u2580\0\u25b2\0\u25e4\0\u2616\0\u2648\0\u0dac\0\u267a"+
    "\0\u26ac\0\u26de\0\u2710\0\u2742\0\u2774\0\u27a6\0\u27d8\0\u280a"+
    "\0\u283c\0\u286e\0\u28a0\0\u28d2\0\u2904\0\u2936\0\u2968\0\u299a"+
    "\0\u29cc\0\u29fe\0\u2a30\0\u2a62\0\u2a94\0\u2ac6\0\u2af8\0\u2b2a"+
    "\0\u2b5c\0\u2b8e\0\u2bc0\0\u2bf2\0\u2c24\0\u2c56\0\u2c88\0\u2cba"+
    "\0\u2cec\0\u2d1e\0\u2d50\0\u2d82\0\u2db4\0\u2de6\0\u2e18\0\u2e4a"+
    "\0\u2e7c\0\u2eae\0\u2ee0\0\u2f12\0\u2f44\0\u2f76\0\u2fa8\0\u2fda"+
    "\0\u300c\0\u303e\0\u3070\0\u30a2\0\u30d4\0\u3106\0\u3138\0\u316a"+
    "\0\u319c\0\u31ce\0\u3200\0\u3232\0\u3264\0\u3296\0\u32c8\0\u32fa"+
    "\0\u332c\0\u335e\0\u3390\0\u33c2\0\u33f4\0\u3426\0\u2260\0\u3458"+
    "\0\u348a\0\u34bc\0\u34ee\0\u3520\0\u3552\0\u3584\0\u35b6\0\u35e8"+
    "\0\u361a\0\u364c\0\u367e\0\u36b0\0\u36e2\0\u3714\0\u3746\0\u3778"+
    "\0\u37aa\0\u37dc\0\u380e\0\u3840\0\u3872\0\u38a4\0\u38d6\0\u3908"+
    "\0\u393a\0\u396c\0\u399e\0\u39d0\0\u3a02\0\u3a34\0\u3a66\0\u3a98"+
    "\0\u3aca\0\u3afc\0\u3b2e\0\u3b60\0\u3b92\0\u3bc4\0\u3bf6\0\u3c28"+
    "\0\u3c5a\0\u3c8c\0\u3cbe\0\u3cf0\0\u3d22\0\u3d54\0\u3d86\0\u3db8"+
    "\0\u3dea\0\u3e1c\0\u3e4e\0\u3e80\0\u3eb2\0\u3ee4\0\u3f16\0\u3f48"+
    "\0\u3f7a\0\u3fac\0\u3fde\0\u4010\0\u4042\0\u4074\0\u40a6\0\u40d8"+
    "\0\u410a\0\u413c\0\u416e\0\u41a0\0\u41d2\0\u4204\0\u4236\0\u4268"+
    "\0\u429a\0\u42cc\0\u42fe\0\u4330\0\u4362\0\u4394\0\u43c6\0\u43f8"+
    "\0\u442a\0\u445c\0\u448e\0\u44c0\0\u44f2\0\u3b92\0\u4524\0\u4556"+
    "\0\u4588\0\u45ba\0\u45ec\0\u461e\0\u4650\0\u4682\0\u46b4\0\u46e6"+
    "\0\u4718\0\u474a\0\u477c\0\u47ae\0\u47e0\0\u4812\0\u4844\0\u4876"+
    "\0\u48a8\0\u48da\0\u490c\0\u493e\0\u4970\0\u49a2\0\u49d4\0\u4a06"+
    "\0\u4a38\0\u4a6a\0\u4a9c\0\u4ace\0\u4b00\0\u4b32\0\u4b64\0\u4b96"+
    "\0\u4bc8\0\u4bfa\0\u4c2c\0\u4c5e\0\u4c90\0\u4cc2\0\u4cf4\0\u4d26"+
    "\0\u4d58\0\u4d8a\0\u4dbc\0\u4dee\0\u4e20\0\u4e52\0\u3bf6\0\u4e84"+
    "\0\u4eb6\0\u4ee8\0\u4f1a\0\u4f4c\0\u4f7e\0\u4fb0\0\u4fe2\0\u5014"+
    "\0\u5046\0\u5078\0\u50aa\0\u50dc\0\u510e\0\u5140\0\u5172\0\u51a4"+
    "\0\u51d6\0\u5208\0\u523a\0\u526c\0\u529e\0\u52d0\0\u5302\0\u5334"+
    "\0\u5366\0\u5398\0\u53ca\0\u53fc\0\u542e\0\u5460\0\u5492\0\u54c4"+
    "\0\u54f6\0\u5528\0\u555a\0\u558c\0\u55be\0\u55f0\0\u5622\0\u5654"+
    "\0\u5686\0\u56b8\0\u56ea\0\u571c\0\u574e\0\u5780\0\u57b2\0\u57e4"+
    "\0\u5816\0\u5848\0\u587a\0\u58ac\0\u58de\0\u5910\0\u5942\0\u5974"+
    "\0\u24b8\0\u59a6\0\u59d8\0\u5a0a\0\u5a3c\0\u5a6e\0\u5aa0\0\u5ad2"+
    "\0\u5b04\0\u5b36\0\u5b68\0\u5b9a\0\u5bcc\0\u5bfe\0\u5c30\0\u5c62"+
    "\0\u5c94\0\u5cc6\0\u5cf8\0\u5d2a\0\u5d5c\0\u5d8e\0\u5dc0\0\u5df2"+
    "\0\u5e24\0\u5e56\0\u5e88\0\u5eba\0\u5eec\0\u5f1e\0\u5f50\0\u5f82"+
    "\0\u5fb4\0\u5fe6\0\u6018\0\u604a\0\u35b6\0\u607c\0\u60ae\0\u60e0"+
    "\0\u6112\0\u6144\0\u6176\0\u61a8\0\u61da\0\u620c\0\u623e\0\u6270"+
    "\0\u62a2\0\u62d4\0\u6306\0\u6338\0\u636a\0\u639c\0\u63ce\0\u6400"+
    "\0\u6432\0\u6464\0\u6496\0\u64c8\0\u64fa\0\u652c\0\u655e\0\u6590"+
    "\0\u65c2\0\u65f4\0\u6626\0\u6658\0\u668a\0\u66bc\0\u66ee\0\u6720"+
    "\0\u6752\0\u6784\0\u67b6\0\u67e8\0\u681a\0\u684c\0\u687e\0\u68b0"+
    "\0\u68e2\0\u6914\0\u6946\0\u4010\0\u6978\0\u24ea\0\u69aa\0\u69dc"+
    "\0\u6a0e\0\u6a40\0\u6a72\0\62\0\u6aa4\0\u6ad6\0\u6b08\0\u6b3a"+
    "\0\u6b6c\0\u6b9e\0\u6bd0\0\u6c02\0\u6c34\0\u6c66\0\u6c98\0\u6cca"+
    "\0\u6cfc\0\u6d2e\0\u6d60\0\u6d92\0\u6dc4\0\u6df6\0\u6e28\0\u6e5a"+
    "\0\u6e8c\0\u6ebe\0\u6ef0\0\u6f22\0\u6f54\0\u6f86\0\u6fb8\0\u6fea"+
    "\0\u701c\0\u704e\0\u7080\0\u70b2\0\u70e4\0\u7116\0\u7148\0\u717a"+
    "\0\u71ac\0\u71de\0\u7210\0\u7242\0\u7274\0\u72a6\0\u72d8\0\u730a"+
    "\0\62\0\u733c\0\u736e\0\u73a0\0\u73d2\0\u7404\0\u7436\0\u7468"+
    "\0\u749a\0\u74cc\0\u74fe\0\u7530\0\u7562\0\u7594\0\u75c6\0\u238c"+
    "\0\u75f8\0\u762a\0\u765c\0\u768e\0\u76c0\0\u76f2\0\u7724\0\u7756"+
    "\0\u10cc\0\u7788\0\u77ba\0\u77ec\0\u7274\0\u781e\0\62\0\u7850"+
    "\0\u380e\0\u7882\0\u78b4\0\u78e6\0\u7918\0\u794a\0\u797c\0\u79ae"+
    "\0\u79e0\0\u7a12\0\u7a44\0\u7a76\0\u7aa8\0\u7ada\0\u7b0c\0\u7b3e"+
    "\0\u7b70\0\u7ba2\0\u7bd4\0\u7c06\0\u7c38\0\u7c6a\0\u7c9c\0\u7cce"+
    "\0\u7d00\0\u7d32\0\u7d64\0\u7d96\0\u7dc8\0\u7dfa\0\u7e2c\0\u7e5e"+
    "\0\u7e90\0\u7ec2\0\u7ef4\0\u7f26\0\u7f58\0\u7f8a\0\u7fbc\0\u7fee"+
    "\0\u8020\0\u8052\0\u8084\0\u80b6\0\u80e8\0\u811a\0\u814c\0\u817e"+
    "\0\u81b0\0\u81e2\0\u8214\0\u8246\0\u8278\0\u82aa\0\62\0\u82dc"+
    "\0\u830e\0\u8340\0\u8372\0\62\0\u83a4\0\u83d6\0\u8408\0\u843a"+
    "\0\u846c\0\u849e\0\u84d0\0\u8502\0\62\0\u8534\0\u8566\0\u8598"+
    "\0\u85ca\0\u85fc\0\u862e\0\u8660\0\u8692\0\u86c4\0\u86f6\0\62"+
    "\0\u8728\0\u875a\0\u878c\0\u87be\0\u87f0\0\u7a76\0\u8822\0\u8854"+
    "\0\u8886\0\u88b8\0\u88ea\0\u891c\0\u894e\0\u8980\0\u89b2\0\u89e4"+
    "\0\u8a16\0\u8a48\0\u8a7a\0\u8aac\0\62";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[733];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\6\1\2\1\0\1\7"+
    "\4\2\1\10\1\2\1\11\1\12\1\2\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\3\2\1\35\1\2\1\36\1\37\7\2\65\0\1\40"+
    "\1\0\1\41\13\0\1\42\1\0\1\43\7\0\1\44"+
    "\30\0\1\45\1\0\1\46\12\0\1\47\5\0\1\50"+
    "\1\51\36\0\1\52\20\0\1\53\6\0\1\54\30\0"+
    "\1\55\14\0\1\56\5\0\1\57\4\0\1\60\40\0"+
    "\1\61\115\0\1\62\17\0\1\63\1\64\1\65\12\0"+
    "\1\66\1\0\1\67\1\70\2\0\1\71\2\0\1\72"+
    "\1\0\1\73\6\0\1\74\21\0\1\75\1\0\1\76"+
    "\10\0\1\77\1\0\1\100\3\0\1\101\1\0\1\102"+
    "\3\0\1\103\1\104\31\0\1\105\14\0\1\106\3\0"+
    "\1\107\1\0\1\110\2\0\1\111\1\0\1\112\1\113"+
    "\30\0\1\114\1\0\1\115\12\0\1\116\5\0\1\117"+
    "\4\0\1\120\31\0\1\121\1\0\1\122\1\123\11\0"+
    "\1\124\3\0\1\125\1\0\1\126\4\0\1\127\32\0"+
    "\1\130\1\131\16\0\1\132\1\133\1\0\1\134\1\135"+
    "\12\0\1\136\23\0\1\137\1\140\10\0\1\141\1\142"+
    "\3\0\1\143\1\0\1\144\2\0\1\145\33\0\1\146"+
    "\1\0\1\147\1\150\11\0\1\151\3\0\1\152\1\0"+
    "\1\153\4\0\1\154\15\0\1\155\30\0\1\156\5\0"+
    "\1\157\36\0\1\160\1\0\1\161\10\0\1\162\1\0"+
    "\1\163\3\0\1\164\1\0\1\165\4\0\1\166\1\0"+
    "\1\67\30\0\1\167\14\0\1\170\6\0\1\67\3\0"+
    "\1\171\4\0\1\172\4\0\1\62\10\0\1\173\5\0"+
    "\1\174\1\0\1\175\10\0\1\176\1\0\1\177\2\0"+
    "\1\200\1\0\1\201\1\202\1\203\1\0\1\204\1\0"+
    "\1\205\1\0\1\206\3\0\1\207\3\0\1\210\1\0"+
    "\1\211\15\0\1\212\61\0\1\213\2\0\1\214\15\0"+
    "\1\215\1\0\1\216\61\0\1\217\36\0\1\220\27\0"+
    "\1\221\31\0\1\222\14\0\1\223\5\0\1\224\4\0"+
    "\1\225\46\0\1\226\3\0\1\227\1\0\1\230\2\0"+
    "\1\231\1\0\1\232\42\0\1\233\3\0\1\234\12\0"+
    "\1\235\54\0\1\236\104\0\1\237\26\0\1\162\57\0"+
    "\1\233\66\0\1\240\74\0\1\70\30\0\1\241\17\0"+
    "\1\242\3\0\1\243\3\0\1\244\52\0\1\245\64\0"+
    "\1\246\54\0\1\213\45\0\1\247\32\0\1\250\43\0"+
    "\1\251\15\0\1\252\24\0\1\253\16\0\1\67\3\0"+
    "\1\254\63\0\1\212\55\0\1\255\5\0\1\256\4\0"+
    "\1\257\42\0\1\260\3\0\1\261\37\0\1\262\14\0"+
    "\1\263\12\0\1\264\46\0\1\265\7\0\1\213\12\0"+
    "\1\266\22\0\1\267\27\0\1\213\45\0\1\270\6\0"+
    "\1\271\12\0\1\261\23\0\1\272\33\0\1\70\34\0"+
    "\1\273\115\0\1\274\33\0\1\67\13\0\1\67\47\0"+
    "\1\275\44\0\1\276\14\0\1\261\56\0\2\67\43\0"+
    "\1\67\101\0\1\277\72\0\1\300\54\0\1\67\4\0"+
    "\1\301\63\0\1\67\27\0\1\220\1\0\1\302\11\0"+
    "\1\303\6\0\1\304\1\305\3\0\1\306\66\0\1\307"+
    "\76\0\1\310\26\0\1\311\11\0\1\67\52\0\1\307"+
    "\40\0\1\312\33\0\1\313\47\0\1\314\52\0\1\315"+
    "\13\0\1\316\47\0\1\317\16\0\1\320\52\0\1\321"+
    "\34\0\1\322\12\0\1\323\12\0\1\324\1\0\1\325"+
    "\51\0\1\67\37\0\1\326\117\0\1\327\23\0\1\330"+
    "\64\0\1\331\11\0\1\332\2\0\1\333\1\0\1\334"+
    "\1\0\1\335\1\336\1\0\1\337\1\0\1\340\6\0"+
    "\1\341\24\0\1\70\106\0\1\342\34\0\1\343\33\0"+
    "\1\344\55\0\1\345\47\0\1\346\67\0\1\347\47\0"+
    "\1\326\62\0\1\67\2\0\1\350\7\0\1\351\30\0"+
    "\1\352\22\0\1\353\4\0\1\354\62\0\1\355\70\0"+
    "\1\356\24\0\1\220\76\0\1\357\57\0\1\261\43\0"+
    "\1\360\17\0\1\277\61\0\1\361\66\0\1\362\34\0"+
    "\1\363\102\0\1\364\42\0\1\365\20\0\1\41\114\0"+
    "\1\366\23\0\1\367\10\0\1\370\30\0\1\371\22\0"+
    "\1\372\37\0\1\373\1\374\1\375\11\0\1\376\3\0"+
    "\1\377\14\0\1\u0100\23\0\1\u0101\14\0\1\u0102\64\0"+
    "\1\u0103\42\0\1\u0104\1\0\1\u0105\101\0\1\u0106\41\0"+
    "\1\41\56\0\1\u0107\22\0\1\u0108\40\0\1\u0109\16\0"+
    "\1\u010a\43\0\1\u010b\15\0\1\u010c\54\0\1\u010d\105\0"+
    "\1\u010e\23\0\1\u010f\1\u0110\76\0\1\u0111\12\0\1\236"+
    "\31\0\1\u0112\122\0\1\67\41\0\1\u0113\35\0\1\u0114"+
    "\22\0\1\u0115\56\0\1\u0116\61\0\1\u0117\42\0\1\261"+
    "\14\0\1\u0118\1\0\1\u0119\1\0\1\u011a\1\0\1\u011b"+
    "\3\0\1\u011c\1\u011d\30\0\1\u011e\104\0\1\u011f\74\0"+
    "\1\u0120\31\0\1\u0121\56\0\1\u0122\14\0\1\u0123\3\0"+
    "\1\u0124\4\0\1\u0125\4\0\1\u0126\52\0\1\u0127\6\0"+
    "\1\67\101\0\1\u0128\43\0\1\70\36\0\1\u0129\61\0"+
    "\1\u012a\102\0\1\70\44\0\1\u012b\4\0\1\u012c\35\0"+
    "\1\u012d\113\0\1\70\56\0\1\u012e\45\0\1\u012f\47\0"+
    "\1\u0130\127\0\1\u0131\25\0\1\u010f\64\0\1\67\64\0"+
    "\1\u0132\53\0\1\374\5\0\1\u0133\56\0\1\u0134\42\0"+
    "\1\70\112\0\1\67\32\0\1\u0105\77\0\1\263\57\0"+
    "\1\u0135\1\u0103\42\0\1\165\14\0\1\u0136\44\0\1\u0137"+
    "\110\0\1\u0138\61\0\1\u0139\52\0\1\u0112\40\0\1\u013a"+
    "\27\0\1\115\51\0\1\u013b\112\0\1\u013c\13\0\1\u013d"+
    "\15\0\1\u013e\40\0\1\u013f\111\0\1\326\45\0\1\u0140"+
    "\51\0\1\u0141\101\0\1\u0137\35\0\1\u0142\20\0\1\u0143"+
    "\40\0\1\u0144\101\0\1\67\10\0\1\u0145\33\0\1\u0146"+
    "\73\0\1\u0147\47\0\1\u0148\56\0\1\u0149\63\0\1\u014a"+
    "\25\0\1\u014b\31\0\1\u014c\61\0\1\67\23\0\1\u014d"+
    "\63\0\1\u014e\63\0\1\127\54\0\1\326\16\0\1\u014f"+
    "\20\0\1\u0150\75\0\1\u0139\44\0\1\u010f\102\0\1\67"+
    "\73\0\1\70\27\0\1\74\76\0\1\u010e\43\0\1\u0105"+
    "\114\0\1\u0151\44\0\1\67\60\0\1\u0105\44\0\1\u0152"+
    "\72\0\1\u0153\56\0\1\u0154\101\0\1\u0155\56\0\1\u0156"+
    "\66\0\1\u0157\54\0\1\u0158\36\0\1\u0159\61\0\1\u015a"+
    "\64\0\1\u015b\61\0\1\u015c\24\0\1\u015d\31\0\1\u015e"+
    "\14\0\1\u015f\70\0\1\u0160\50\0\1\u0161\46\0\1\67"+
    "\14\0\1\u0162\73\0\1\115\47\0\1\236\70\0\1\67"+
    "\70\0\1\u0163\46\0\1\u0164\3\0\1\u0165\10\0\1\67"+
    "\44\0\1\u0166\63\0\1\u0167\42\0\1\u0168\56\0\1\67"+
    "\1\u0156\61\0\1\u0169\26\0\1\u016a\64\0\1\u016b\2\0"+
    "\1\67\22\0\1\u016c\63\0\1\67\60\0\1\u016d\123\0"+
    "\1\u016e\34\0\1\u016f\47\0\1\67\12\0\1\u0170\45\0"+
    "\1\u0171\62\0\1\u0172\101\0\1\u0173\36\0\1\u0174\63\0"+
    "\1\u0175\77\0\1\u0176\41\0\1\u0177\22\0\1\u0178\67\0"+
    "\1\u0179\33\0\1\u017a\102\0\1\u017b\4\0\1\67\1\0"+
    "\1\u017c\54\0\1\213\57\0\1\u017d\40\0\1\u017e\76\0"+
    "\1\u017f\65\0\1\271\57\0\1\u015c\1\0\1\u0180\4\0"+
    "\1\u0181\54\0\1\u0182\36\0\1\213\21\0\1\u010f\12\0"+
    "\1\u0183\1\0\1\u0184\51\0\1\71\54\0\1\213\36\0"+
    "\1\u010f\21\0\1\u011a\40\0\1\u0185\60\0\1\u0186\112\0"+
    "\1\u0187\51\0\1\u0188\61\0\1\u0189\7\0\1\u018a\61\0"+
    "\1\u018b\36\0\1\u018c\70\0\1\u018d\44\0\1\67\17\0"+
    "\1\67\3\0\1\u018e\52\0\1\u015a\75\0\1\u014c\31\0"+
    "\1\u018f\16\0\1\u0190\10\0\1\u0191\6\0\1\u0192\22\0"+
    "\1\213\62\0\1\u0193\1\u0194\61\0\1\u0195\77\0\1\u0196"+
    "\62\0\1\u0197\13\0\1\u0198\47\0\1\u0199\56\0\1\u019a"+
    "\64\0\1\u0116\61\0\1\71\40\0\1\67\73\0\1\213"+
    "\44\0\1\u019b\117\0\1\67\24\0\1\270\60\0\1\u019c"+
    "\17\0\1\u019d\41\0\1\u019e\2\0\1\u019f\107\0\1\213"+
    "\41\0\1\u01a0\100\0\1\264\47\0\1\u01a1\102\0\1\u01a2"+
    "\57\0\1\67\61\0\1\u0133\41\0\1\u0112\103\0\1\41"+
    "\50\0\1\67\32\0\1\u01a3\62\0\1\u01a4\27\0\1\u01a5"+
    "\31\0\1\u01a6\22\0\1\67\40\0\1\213\62\0\1\u01a7"+
    "\76\0\1\u01a8\41\0\1\u01a9\62\0\1\u01aa\63\0\1\u01ab"+
    "\56\0\1\u01ac\124\0\1\u01ad\16\0\1\u01ae\63\0\1\u01af"+
    "\61\0\1\u01b0\15\0\1\277\2\0\1\u0109\67\0\1\u01b1"+
    "\45\0\1\u01b2\75\0\1\u01b3\77\0\1\u01b4\32\0\1\u01b5"+
    "\65\0\1\70\60\0\1\221\36\0\1\u01b6\101\0\1\u01b7"+
    "\61\0\1\u01b8\44\0\1\u01b9\56\0\1\u01ba\23\0\1\u01bb"+
    "\4\0\1\u01bc\5\0\1\u01bd\35\0\1\u01be\75\0\1\271"+
    "\34\0\1\307\102\0\1\67\67\0\1\u01bf\32\0\1\115"+
    "\61\0\1\u015a\77\0\1\u01c0\61\0\1\u01c1\42\0\1\u01c2"+
    "\17\0\1\70\66\0\1\u01c3\45\0\1\u01c4\51\0\1\u01c5"+
    "\103\0\1\51\5\0\1\u010e\66\0\1\67\33\0\1\162"+
    "\50\0\1\u01c6\102\0\1\u01c7\55\0\1\u01ae\66\0\1\u01c8"+
    "\57\0\1\u014c\101\0\1\u0105\43\0\1\70\67\0\1\u01c9"+
    "\52\0\1\u017e\61\0\1\271\63\0\1\u01c7\67\0\1\67"+
    "\33\0\1\u01ca\56\0\1\u01cb\63\0\1\70\102\0\1\u01cc"+
    "\40\0\1\u01cd\60\0\1\u0134\72\0\1\u01ce\122\0\1\u01cf"+
    "\31\0\1\u01d0\62\0\1\371\60\0\1\326\41\0\1\u0197"+
    "\77\0\1\71\60\0\1\70\44\0\1\u01d1\73\0\1\u01d2"+
    "\102\0\1\271\44\0\1\u01d3\42\0\1\u01d4\100\0\1\u01d5"+
    "\104\0\1\u01d6\44\0\1\u01d7\33\0\1\u01d8\101\0\1\u01d9"+
    "\6\0\1\u01da\54\0\1\u01db\61\0\1\u01dc\36\0\1\u01dd"+
    "\112\0\1\u01de\33\0\1\u010e\111\0\1\261\52\0\1\u01df"+
    "\66\0\1\u01e0\2\0\1\u01e1\27\0\1\271\77\0\1\u01e2"+
    "\61\0\1\u01e3\62\0\1\326\70\0\1\u01e4\32\0\1\u01e5"+
    "\101\0\1\u01e6\70\0\1\u01e7\52\0\1\u01e8\1\0\1\u01d2"+
    "\57\0\1\213\75\0\1\70\24\0\1\u01ba\110\0\1\u01e9"+
    "\55\0\1\u01ea\40\0\1\u01eb\57\0\1\374\111\0\1\314"+
    "\61\0\1\271\61\0\1\u01ec\31\0\1\u01ed\61\0\1\u01ee"+
    "\76\0\1\u01ef\74\0\1\u01f0\47\0\1\u01f1\1\u01f2\1\0"+
    "\1\u01f3\20\0\1\u01f4\37\0\1\u01f5\41\0\1\u0145\64\0"+
    "\1\u01f6\56\0\1\u01f7\104\0\1\u010f\56\0\1\u01f8\104\0"+
    "\1\u01f9\21\0\1\u01fa\73\0\1\u01fb\44\0\1\u01fc\76\0"+
    "\1\u01fd\12\0\1\u01fe\51\0\1\u01ff\41\0\1\u0177\117\0"+
    "\1\326\40\0\1\u0200\44\0\1\u0201\61\0\1\u0202\111\0"+
    "\1\213\66\0\1\u0203\23\0\1\u01a3\15\0\1\u0204\64\0"+
    "\1\u0205\71\0\1\u0206\52\0\1\123\41\0\1\u0207\31\0"+
    "\1\u0208\53\0\1\u0209\100\0\1\u020a\20\0\1\u020b\56\0"+
    "\1\111\64\0\1\u020c\75\0\1\67\66\0\1\u020d\56\0"+
    "\1\u020e\11\0\1\261\30\0\1\u020f\107\0\1\u0210\32\0"+
    "\1\u0211\17\0\1\213\60\0\1\u0212\56\0\1\71\62\0"+
    "\1\u0213\107\0\1\u0214\41\0\1\213\66\0\1\261\51\0"+
    "\1\u0215\70\0\1\u0216\32\0\1\u0217\100\0\1\u0218\55\0"+
    "\1\u0219\75\0\1\u021a\67\0\1\u021b\41\0\1\u0150\43\0"+
    "\1\u021c\64\0\1\u021d\77\0\1\u021e\55\0\1\67\5\0"+
    "\1\u020f\56\0\1\371\56\0\1\u021f\107\0\1\u0220\46\0"+
    "\1\205\56\0\1\u018a\34\0\1\u0170\61\0\1\u0221\111\0"+
    "\1\u0222\103\0\1\u0223\7\0\1\u0224\100\0\1\u0225\43\0"+
    "\1\271\100\0\1\u0226\66\0\1\67\36\0\1\365\103\0"+
    "\1\u0112\74\0\1\326\37\0\1\263\57\0\1\u0227\54\0"+
    "\1\u0228\74\0\1\u0229\61\0\1\70\61\0\1\u022a\43\0"+
    "\1\213\106\0\1\u022b\45\0\1\u022c\62\0\1\41\67\0"+
    "\1\u021a\66\0\1\u022d\32\0\1\u01ae\61\0\1\u022e\101\0"+
    "\1\u0183\71\0\1\u022f\33\0\1\u0194\11\0\1\u0104\67\0"+
    "\1\u0230\56\0\1\u0231\64\0\1\u0232\66\0\1\177\31\0"+
    "\1\45\105\0\1\u01ab\62\0\1\u0233\34\0\1\u0234\64\0"+
    "\1\270\106\0\1\u01ae\46\0\1\u01cb\46\0\1\374\107\0"+
    "\1\u0235\62\0\1\277\51\0\1\177\56\0\1\u0236\64\0"+
    "\1\220\43\0\1\u0237\73\0\1\u0238\102\0\1\u0105\46\0"+
    "\1\u0239\40\0\1\u023a\74\0\1\u023b\45\0\1\u023c\60\0"+
    "\1\u023d\125\0\1\u023e\40\0\1\74\54\0\1\u023f\67\0"+
    "\1\u01c8\65\0\1\u0240\32\0\1\u014f\101\0\1\u0241\60\0"+
    "\1\u0242\72\0\1\u012a\61\0\1\u0243\52\0\1\u0244\63\0"+
    "\1\u0245\35\0\1\u0246\114\0\1\326\43\0\1\202\65\0"+
    "\1\u0247\55\0\1\u0248\44\0\1\u0249\104\0\1\u01cb\36\0"+
    "\1\u024a\76\0\1\u024b\75\0\1\u0122\6\0\1\271\37\0"+
    "\1\70\60\0\1\u024c\75\0\1\u024d\60\0\1\u024e\61\0"+
    "\1\371\44\0\1\u024f\76\0\1\u0250\54\0\1\u0251\56\0"+
    "\1\u0252\62\0\1\u010e\106\0\1\u0253\44\0\1\u0254\45\0"+
    "\1\67\102\0\1\u0255\53\0\1\374\52\0\1\u018a\61\0"+
    "\1\u0256\113\0\1\u0257\46\0\1\261\22\0\1\u0258\71\0"+
    "\1\u0228\50\0\1\314\75\0\1\u0259\116\0\1\67\40\0"+
    "\1\u025a\31\0\1\270\14\0\1\312\66\0\1\u024b\4\0"+
    "\1\70\61\0\1\u025b\33\0\1\u0122\75\0\1\u025c\45\0"+
    "\1\u025d\75\0\1\76\45\0\1\u025e\110\0\1\u025f\32\0"+
    "\1\u0260\76\0\1\u0261\45\0\1\u01d2\57\0\1\u0262\101\0"+
    "\1\u0263\100\0\1\u0264\22\0\1\u01ef\103\0\1\u014c\57\0"+
    "\1\u0265\62\0\1\u0266\51\0\1\u0267\50\0\1\u0268\62\0"+
    "\1\u0269\75\0\1\u026a\44\0\1\67\27\0\1\u0157\53\0"+
    "\1\u026b\62\0\1\u021d\56\0\1\u026c\60\0\1\u026d\65\0"+
    "\1\u026e\62\0\1\u024b\106\0\1\u026f\11\0\1\u0270\100\0"+
    "\1\u018a\44\0\1\u0271\106\0\1\u016f\51\0\1\u0272\106\0"+
    "\1\u0273\34\0\1\u0274\42\0\1\u0275\110\0\1\u0276\45\0"+
    "\1\u0277\65\0\1\u0278\40\0\1\u0279\63\0\1\u010e\60\0"+
    "\1\u027a\114\0\1\u027b\62\0\1\u01ab\27\0\1\u027c\115\0"+
    "\1\u027d\63\0\1\u0192\21\0\1\u027e\114\0\1\u0236\52\0"+
    "\1\252\61\0\1\u027f\70\0\1\252\43\0\1\u0280\75\0"+
    "\1\u0281\27\0\1\u0282\62\0\1\270\132\0\1\u0283\41\0"+
    "\1\u0284\60\0\1\u0285\54\0\1\u0286\36\0\1\u0287\101\0"+
    "\1\u0284\100\0\1\165\73\0\1\u0288\43\0\1\165\60\0"+
    "\1\u0289\42\0\1\u028a\100\0\1\u028b\53\0\1\u028c\65\0"+
    "\1\u028d\102\0\1\u028e\31\0\1\u028f\60\0\1\u0266\63\0"+
    "\1\115\36\0\1\u0290\105\0\1\u0105\67\0\1\u0291\30\0"+
    "\1\213\63\0\1\u01af\13\0\1\371\1\0\1\u0292\54\0"+
    "\1\u0293\66\0\1\u0294\42\0\1\u0295\61\0\1\265\101\0"+
    "\1\u0117\54\0\1\u0296\44\0\1\u0297\24\0\1\u027f\47\0"+
    "\1\u0298\64\0\1\u0299\75\0\1\u029a\3\0\1\u029b\50\0"+
    "\1\u014c\106\0\1\u029c\33\0\1\u0133\64\0\1\u029d\7\0"+
    "\1\u029e\46\0\1\u029f\66\0\1\u02a0\45\0\1\u02a1\62\0"+
    "\1\312\64\0\1\u0224\112\0\1\u02a2\40\0\1\u02a3\42\0"+
    "\1\u02a4\52\0\1\u02a5\107\0\1\u02a6\31\0\1\u02a7\75\0"+
    "\1\u02a8\70\0\1\u02a9\66\0\1\u02aa\33\0\1\u02ab\115\0"+
    "\1\u02ac\54\0\1\u02ad\4\0\1\u02ae\100\0\1\u02af\5\0"+
    "\1\u02b0\134\0\1\u02b1\23\0\1\u0198\101\0\1\u02b2\55\0"+
    "\1\u02b3\100\0\1\u02b4\12\0\1\u010f\60\0\1\u0197\101\0"+
    "\1\u012a\40\0\1\u02b5\74\0\1\u02b6\125\0\1\u02b7\33\0"+
    "\1\u0192\44\0\1\u02b8\75\0\1\u02b9\53\0\1\u02ba\70\0"+
    "\1\u01e0\106\0\1\u02bb\51\0\1\u02bc\64\0\1\u02bd\13\0"+
    "\1\u02be\104\0\1\u02bf\43\0\1\u02c0\115\0\1\u02c1\32\0"+
    "\1\u02c2\65\0\1\u02c3\106\0\1\u02c4\26\0\1\u02c5\67\0"+
    "\1\u02c6\55\0\1\u02c7\52\0\1\u02c8\121\0\1\u02c9\43\0"+
    "\1\u02ca\62\0\1\u02cb\43\0\1\u02cc\66\0\1\u02cd\41\0"+
    "\1\u02ce\124\0\1\u02cf\50\0\1\u02d0\35\0\1\u02d1\71\0"+
    "\1\u02d2\1\0\1\u0294\52\0\1\u02d3\50\0\1\u02d4\61\0"+
    "\1\u02d5\101\0\1\u02d6\112\0\1\u02d7\25\0\1\u02d8\115\0"+
    "\1\u02d9\40\0\1\u02da\45\0\1\u02db\50\0\1\u02dc\127\0"+
    "\1\u02dd\41\0\1\u02ce\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[35550];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\35\1\10\0\1\1\16\0\1\11\3\0"+
    "\1\1\14\0\1\1\17\0\1\1\1\0\1\1\2\0"+
    "\1\1\31\0\1\1\1\0\1\1\24\0\1\1\21\0"+
    "\1\1\21\0\1\1\11\0\1\1\1\0\1\1\5\0"+
    "\1\1\55\0\1\1\27\0\1\1\14\0\1\1\1\0"+
    "\1\1\11\0\1\1\14\0\1\1\4\0\1\1\1\0"+
    "\1\1\20\0\1\1\27\0\1\1\10\0\1\1\3\0"+
    "\1\1\2\0\1\1\21\0\1\1\2\0\1\1\2\0"+
    "\1\1\21\0\1\1\3\0\1\1\43\0\2\1\31\0"+
    "\1\1\45\0\1\1\6\0\1\1\31\0\1\1\1\0"+
    "\1\1\5\0\1\11\52\0\1\1\1\0\1\11\13\0"+
    "\1\1\2\0\1\1\14\0\1\1\1\0\1\11\14\0"+
    "\1\1\4\0\1\1\45\0\1\11\4\0\1\11\1\1"+
    "\7\0\1\11\12\0\1\11\12\0\1\1\11\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[733];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Symbol symbol(int type){
        return new Symbol (type, yyline, yycolumn);
    }

    private Symbol symbol(int type, Object value){
        return new Symbol (type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 226) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol(sym.ERROR, yychar, yyline, yytext());
            } 
            // fall through
          case 13: break;
          case 2: 
            { return new Symbol(sym.RESERVADAS, yychar, yyline, yytext());
            } 
            // fall through
          case 14: break;
          case 3: 
            { return new Symbol(sym.INT, yychar, yyline, yytext());
            } 
            // fall through
          case 15: break;
          case 4: 
            { return new Symbol(sym.STRING, yychar, yyline, yytext());
            } 
            // fall through
          case 16: break;
          case 5: 
            { /*Ignore*/
            } 
            // fall through
          case 17: break;
          case 6: 
            { return new Symbol(sym.OPERADORES, yychar, yyline, yytext());
            } 
            // fall through
          case 18: break;
          case 7: 
            { return new Symbol(sym.FLOATERROR, yychar, yyline, yytext());
            } 
            // fall through
          case 19: break;
          case 8: 
            { return new Symbol(sym.STRINGERROR, yychar, yyline, yytext());
            } 
            // fall through
          case 20: break;
          case 9: 
            { return new Symbol(sym.IDENTIFICADORES, yychar, yyline, yytext());
            } 
            // fall through
          case 21: break;
          case 10: 
            { return new Symbol(sym.COMMENT, yychar, yyline, yytext());
            } 
            // fall through
          case 22: break;
          case 11: 
            { /*ignore*/
            } 
            // fall through
          case 23: break;
          case 12: 
            { return new Symbol(sym.ERRORCOMMENT, yychar, yyline, yytext());
            } 
            // fall through
          case 24: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
