/* The following code was generated by JFlex 1.7.0 */

package lexCode;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/Bryan/OneDrive - Universidad Rafael Landivar/Documentos/NetBeansProjects/Lex_Analyzer/LexicalAnalyzer/src/lexCode/Lexer.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\2\0\1\1\22\0\1\1\1\47\5\0\1\0"+
    "\1\50\1\51\1\52\1\0\1\45\1\0\1\44\14\0\1\46\1\60"+
    "\1\56\1\57\1\0\1\53\1\7\1\14\1\6\1\11\1\10\1\20"+
    "\1\30\1\31\1\16\1\42\1\26\1\23\1\24\1\5\1\12\1\13"+
    "\1\27\1\3\1\15\1\2\1\4\1\21\1\22\1\17\1\25\1\0"+
    "\1\54\1\0\1\55\3\0\1\37\5\0\1\41\1\0\1\32\2\0"+
    "\1\35\1\0\1\34\1\36\2\0\1\40\1\0\1\33\4\0\1\43"+
    "\2\0\1\1\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff93\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\24\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\17\0\1\17\12\0\1\20\1\21\5\0\1\22\10\0"+
    "\1\23\15\0\1\24\1\0\1\25\1\26\3\0\1\27"+
    "\11\0\1\30\7\0\1\31\1\32\1\33\1\0\1\34"+
    "\7\0\1\35\5\0\1\36\1\37\1\40\4\0\1\41"+
    "\4\0\1\42\3\0\1\43\6\0\1\44\1\45\1\46"+
    "\3\0\1\47\2\0\1\50\5\0\1\51\1\52\12\0"+
    "\1\53\2\0\1\54\4\0\1\55\1\56\7\0\1\57"+
    "\4\0\1\60\1\0\1\61\5\0\1\62\1\63\1\0"+
    "\1\64\2\0\1\65\3\0\1\66\5\0\1\67\4\0"+
    "\1\70\4\0\1\71\1\72\4\0\1\73\4\0\1\74"+
    "\1\75\4\0\1\76\1\77\2\0\1\100\2\0\1\101"+
    "\2\0\1\102\1\103\1\0\1\104\1\105\1\0\1\106"+
    "\1\0\1\107\1\110\3\0\1\111\3\0\1\112\1\0"+
    "\1\113\1\114\1\115\4\0\1\116\2\0\1\117\1\120"+
    "\3\0\1\121\1\0\1\122\2\0\1\123\1\124\3\0"+
    "\1\125\1\126\1\127\1\0\1\130\2\0\1\131\1\132"+
    "\3\0\1\133\3\0\1\134\1\135\3\0\1\136\1\0"+
    "\1\137\2\0\1\140\3\0\1\141";

  private static int [] zzUnpackAction() {
    int [] result = new int[342];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0436"+
    "\0\u0436\0\u0436\0\u0436\0\u0436\0\u0436\0\u0436\0\u0436\0\u0436"+
    "\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d"+
    "\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715"+
    "\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d"+
    "\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u0436\0\u0436\0\u09c3"+
    "\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0436\0\u0ab8\0\u0ae9\0\u0b1a"+
    "\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0436\0\u0c40\0\u0c71"+
    "\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9"+
    "\0\u0e2a\0\u0e5b\0\u0e8c\0\u0436\0\u0ebd\0\u0436\0\u0436\0\u0eee"+
    "\0\u0f1f\0\u0f50\0\u0436\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\u1045"+
    "\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u0436\0\u113a\0\u116b\0\u119c"+
    "\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u0436\0\u0436\0\u0436\0\u1291"+
    "\0\u0436\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8"+
    "\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u0436\0\u0436"+
    "\0\u0436\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603\0\u1634\0\u1665"+
    "\0\u1696\0\u16c7\0\u0436\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc"+
    "\0\u17ed\0\u181e\0\u184f\0\u1880\0\u18b1\0\u0436\0\u0436\0\u0436"+
    "\0\u18e2\0\u1913\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u0436\0\u1a08"+
    "\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u0436\0\u0436\0\u1afd\0\u1b2e"+
    "\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54\0\u1c85\0\u1cb6"+
    "\0\u0436\0\u1ce7\0\u1d18\0\u0436\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc"+
    "\0\u0436\0\u1e0d\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33"+
    "\0\u1f64\0\u0436\0\u1f95\0\u1fc6\0\u1ff7\0\u2028\0\u0436\0\u2059"+
    "\0\u0436\0\u208a\0\u20bb\0\u20ec\0\u211d\0\u214e\0\u0436\0\u0436"+
    "\0\u217f\0\u0436\0\u21b0\0\u21e1\0\u0436\0\u2212\0\u2243\0\u2274"+
    "\0\u0436\0\u22a5\0\u22d6\0\u2307\0\u2338\0\u2369\0\u0436\0\u239a"+
    "\0\u23cb\0\u23fc\0\u242d\0\u0436\0\u245e\0\u248f\0\u24c0\0\u24f1"+
    "\0\u0436\0\u0436\0\u2522\0\u2553\0\u2584\0\u25b5\0\u0436\0\u25e6"+
    "\0\u2617\0\u2648\0\u2679\0\u0436\0\u0436\0\u26aa\0\u26db\0\u270c"+
    "\0\u273d\0\u0436\0\u0436\0\u276e\0\u279f\0\u0436\0\u27d0\0\u2801"+
    "\0\u2832\0\u2863\0\u2894\0\u0436\0\u0436\0\u28c5\0\u0436\0\u0436"+
    "\0\u28f6\0\u0436\0\u2927\0\u0436\0\u0436\0\u2958\0\u2989\0\u29ba"+
    "\0\u0436\0\u29eb\0\u2a1c\0\u2a4d\0\u0436\0\u2a7e\0\u0436\0\u0436"+
    "\0\u0436\0\u2aaf\0\u2ae0\0\u2b11\0\u2b42\0\u0436\0\u2b73\0\u2ba4"+
    "\0\u0436\0\u0436\0\u2bd5\0\u2c06\0\u2c37\0\u0436\0\u2c68\0\u0436"+
    "\0\u2c99\0\u2cca\0\u0436\0\u0436\0\u2cfb\0\u2d2c\0\u2d5d\0\u0436"+
    "\0\u0436\0\u0436\0\u2d8e\0\u0436\0\u2dbf\0\u2df0\0\u0436\0\u0436"+
    "\0\u2e21\0\u2e52\0\u2e83\0\u0436\0\u2eb4\0\u2ee5\0\u2f16\0\u0436"+
    "\0\u0436\0\u2f47\0\u2f78\0\u2fa9\0\u0436\0\u2fda\0\u0436\0\u300b"+
    "\0\u303c\0\u0436\0\u306d\0\u309e\0\u30cf\0\u0436";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[342];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\0"+
    "\1\20\1\21\1\0\1\22\1\23\1\0\1\24\1\0"+
    "\1\25\11\0\1\26\1\0\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\0\1\2\62\0\1\44\3\0\1\45\2\0"+
    "\1\46\56\0\1\47\1\0\1\50\3\0\1\51\47\0"+
    "\1\52\5\0\1\53\1\0\1\54\47\0\1\55\5\0"+
    "\1\56\51\0\1\57\1\60\5\0\1\61\57\0\1\62"+
    "\3\0\1\63\3\0\1\64\1\0\1\65\42\0\1\66"+
    "\11\0\1\67\44\0\1\70\3\0\1\71\1\72\5\0"+
    "\1\73\45\0\1\74\1\75\1\76\12\0\1\77\13\0"+
    "\1\100\27\0\1\101\4\0\1\102\60\0\1\103\5\0"+
    "\1\104\6\0\1\105\4\0\1\106\32\0\1\107\1\0"+
    "\1\110\1\111\1\112\22\0\1\113\32\0\1\114\3\0"+
    "\1\115\6\0\1\116\13\0\1\117\27\0\1\120\1\121"+
    "\5\0\1\122\10\0\1\123\11\0\1\124\32\0\1\125"+
    "\6\0\1\126\52\0\1\127\57\0\1\130\6\0\1\131"+
    "\52\0\1\132\53\0\1\133\6\0\1\134\60\0\1\135"+
    "\205\0\1\136\60\0\1\137\6\0\1\140\2\0\1\141"+
    "\65\0\1\142\57\0\1\143\47\0\1\144\4\0\1\145"+
    "\4\0\1\146\67\0\1\147\65\0\1\150\46\0\1\151"+
    "\53\0\1\152\57\0\1\153\73\0\1\154\37\0\1\155"+
    "\2\0\1\156\63\0\1\157\53\0\1\160\61\0\1\161"+
    "\1\162\15\0\1\163\1\164\45\0\1\165\55\0\1\166"+
    "\102\0\1\167\32\0\1\170\67\0\1\171\65\0\1\172"+
    "\54\0\1\173\50\0\1\174\64\0\1\175\6\0\1\176"+
    "\60\0\1\177\54\0\1\200\51\0\1\201\113\0\1\202"+
    "\35\0\1\203\3\0\1\204\45\0\1\205\105\0\1\206"+
    "\32\0\1\207\111\0\1\210\51\0\1\211\37\0\1\212"+
    "\76\0\1\213\62\0\1\214\75\0\1\215\22\0\1\216"+
    "\2\0\1\217\3\0\1\220\3\0\1\221\53\0\1\222"+
    "\103\0\1\223\37\0\1\224\53\0\1\225\15\0\1\226"+
    "\40\0\1\227\67\0\1\230\104\0\1\231\25\0\1\232"+
    "\17\0\1\233\45\0\1\234\70\0\1\235\57\0\1\236"+
    "\46\0\1\237\100\0\1\240\45\0\1\241\64\0\1\242"+
    "\47\0\1\243\60\0\1\244\76\0\1\245\41\0\1\246"+
    "\65\0\1\247\53\0\1\250\77\0\1\251\66\0\1\252"+
    "\56\0\1\253\40\0\1\254\54\0\1\255\100\0\1\256"+
    "\43\0\1\257\61\0\1\260\66\0\1\261\50\0\1\262"+
    "\70\0\1\263\47\0\1\264\16\0\1\265\61\0\1\266"+
    "\44\0\1\267\65\0\1\270\56\0\1\271\54\0\1\272"+
    "\74\0\1\273\43\0\1\274\54\0\1\275\66\0\1\276"+
    "\60\0\1\277\2\0\1\300\110\0\1\301\23\0\1\302"+
    "\76\0\1\303\42\0\1\304\70\0\1\305\54\0\1\306"+
    "\56\0\1\307\60\0\1\310\102\0\1\311\40\0\1\312"+
    "\56\0\1\313\60\0\1\314\60\0\1\315\55\0\1\316"+
    "\77\0\1\317\42\0\1\320\75\0\1\321\45\0\1\322"+
    "\57\0\1\323\110\0\1\324\27\0\1\325\56\0\1\326"+
    "\76\0\1\327\40\0\1\330\62\0\1\331\61\0\1\332"+
    "\61\0\1\333\67\0\1\334\53\0\1\335\53\0\1\336"+
    "\73\0\1\337\56\0\1\340\46\0\1\341\62\0\1\342"+
    "\56\0\1\343\101\0\1\344\37\0\1\345\70\0\1\346"+
    "\50\0\1\347\60\0\1\350\102\0\1\351\43\0\1\352"+
    "\67\0\1\353\45\0\1\354\57\0\1\355\72\0\1\356"+
    "\53\0\1\357\67\0\1\360\45\0\1\361\60\0\1\362"+
    "\61\0\1\363\64\0\1\364\57\0\1\365\61\0\1\366"+
    "\55\0\1\367\76\0\1\370\50\0\1\371\53\0\1\372"+
    "\106\0\1\373\27\0\1\374\74\0\1\375\44\0\1\376"+
    "\57\0\1\377\60\0\1\u0100\74\0\1\u0101\44\0\1\u0102"+
    "\111\0\1\u0103\56\0\1\u0104\37\0\1\u0105\63\0\1\u0106"+
    "\54\0\1\u0107\60\0\1\u0108\56\0\1\u0109\76\0\1\u010a"+
    "\44\0\1\u010b\61\0\1\u010c\60\0\1\u010d\54\0\1\u010e"+
    "\64\0\1\u010f\53\0\1\u0110\60\0\1\u0111\62\0\1\u0112"+
    "\55\0\1\u0113\60\0\1\u0114\73\0\1\u0115\52\0\1\u0116"+
    "\54\0\1\u0117\62\0\1\u0118\55\0\1\u0119\67\0\1\u011a"+
    "\52\0\1\u011b\62\0\1\u011c\76\0\1\u011d\47\0\1\u011e"+
    "\50\0\1\u011f\117\0\1\u0120\21\0\1\u0121\74\0\1\u0122"+
    "\60\0\1\u0123\72\0\1\u0124\37\0\1\u0125\66\0\1\u0126"+
    "\45\0\1\u0127\64\0\1\u0128\67\0\1\u0129\54\0\1\u012a"+
    "\55\0\1\u012b\67\0\1\u012c\52\0\1\u012d\61\0\1\u012e"+
    "\65\0\1\u012f\53\0\1\u0130\56\0\1\u0131\56\0\1\u0132"+
    "\101\0\1\u0133\35\0\1\u0134\74\0\1\u0135\62\0\1\u0136"+
    "\52\0\1\u0137\53\0\1\u0138\56\0\1\u0139\65\0\1\u013a"+
    "\52\0\1\u013b\104\0\1\u013c\34\0\1\u013d\74\0\1\u013e"+
    "\52\0\1\u013f\52\0\1\u0140\61\0\1\u0141\62\0\1\u0142"+
    "\71\0\1\u0143\47\0\1\u0144\71\0\1\u0145\52\0\1\u0146"+
    "\55\0\1\u0147\63\0\1\u0148\52\0\1\u0149\64\0\1\u014a"+
    "\64\0\1\u014b\51\0\1\u014c\57\0\1\u014d\65\0\1\u014e"+
    "\56\0\1\u014f\63\0\1\u0150\61\0\1\u0151\60\0\1\u0152"+
    "\61\0\1\u0153\51\0\1\u0154\65\0\1\u0155\65\0\1\u0156"+
    "\43\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12544];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\24\0\13\11\2\1\17\0\1\1\12\0"+
    "\2\11\5\0\1\11\10\0\1\11\15\0\1\11\1\0"+
    "\2\11\3\0\1\11\11\0\1\11\7\0\3\11\1\0"+
    "\1\11\7\0\1\1\5\0\3\11\4\0\1\1\4\0"+
    "\1\11\3\0\1\1\6\0\3\11\3\0\1\1\2\0"+
    "\1\11\5\0\2\11\12\0\1\11\2\0\1\11\4\0"+
    "\1\11\1\1\7\0\1\11\4\0\1\11\1\0\1\11"+
    "\5\0\2\11\1\0\1\11\2\0\1\11\3\0\1\11"+
    "\5\0\1\11\4\0\1\11\4\0\2\11\4\0\1\11"+
    "\4\0\2\11\4\0\2\11\2\0\1\11\2\0\1\1"+
    "\2\0\2\11\1\0\2\11\1\0\1\11\1\0\2\11"+
    "\3\0\1\11\3\0\1\11\1\0\3\11\4\0\1\11"+
    "\2\0\2\11\3\0\1\11\1\0\1\11\2\0\2\11"+
    "\3\0\3\11\1\0\1\11\2\0\2\11\3\0\1\11"+
    "\3\0\2\11\3\0\1\11\1\0\1\11\2\0\1\11"+
    "\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[342];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Symbol symbol(int type, Object value){
       return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /*Ignore*/
            } 
            // fall through
          case 98: break;
          case 2: 
            { return new Symbol(sym.Punto, yychar, yyline, yytext());
            } 
            // fall through
          case 99: break;
          case 3: 
            { return new Symbol(sym.Coma, yychar, yyline, yytext());
            } 
            // fall through
          case 100: break;
          case 4: 
            { return new Symbol(sym.Punto_Coma, yychar, yyline, yytext());
            } 
            // fall through
          case 101: break;
          case 5: 
            { return new Symbol(sym.Negar, yychar, yyline, yytext());
            } 
            // fall through
          case 102: break;
          case 6: 
            { return new Symbol(sym.Parentesis_a, yychar, yyline, yytext());
            } 
            // fall through
          case 103: break;
          case 7: 
            { return new Symbol(sym.Parentesis_c, yychar, yyline, yytext());
            } 
            // fall through
          case 104: break;
          case 8: 
            { return new Symbol(sym.Asterisco, yychar, yyline, yytext());
            } 
            // fall through
          case 105: break;
          case 9: 
            { return new Symbol(sym.Arroba, yychar, yyline, yytext());
            } 
            // fall through
          case 106: break;
          case 10: 
            { return new Symbol(sym.Corchete_a, yychar, yyline, yytext());
            } 
            // fall through
          case 107: break;
          case 11: 
            { return new Symbol(sym.Corchete_c, yychar, yyline, yytext());
            } 
            // fall through
          case 108: break;
          case 12: 
            { return new Symbol(sym.Igual, yychar, yyline, yytext());
            } 
            // fall through
          case 109: break;
          case 13: 
            { return new Symbol(sym.MayorQue, yychar, yyline, yytext());
            } 
            // fall through
          case 110: break;
          case 14: 
            { return new Symbol(sym.MenorQue, yychar, yyline, yytext());
            } 
            // fall through
          case 111: break;
          case 15: 
            { return new Symbol(sym.As, yychar, yyline, yytext());
            } 
            // fall through
          case 112: break;
          case 16: 
            { return new Symbol(sym.On, yychar, yyline, yytext());
            } 
            // fall through
          case 113: break;
          case 17: 
            { return new Symbol(sym.Of, yychar, yyline, yytext());
            } 
            // fall through
          case 114: break;
          case 18: 
            { return new Symbol(sym.By, yychar, yyline, yytext());
            } 
            // fall through
          case 115: break;
          case 19: 
            { return new Symbol(sym.If, yychar, yyline, yytext());
            } 
            // fall through
          case 116: break;
          case 20: 
            { return new Symbol(sym.Go, yychar, yyline, yytext());
            } 
            // fall through
          case 117: break;
          case 21: 
            { return new Symbol(sym.MayorIgual, yychar, yyline, yytext());
            } 
            // fall through
          case 118: break;
          case 22: 
            { return new Symbol(sym.MenorIgual, yychar, yyline, yytext());
            } 
            // fall through
          case 119: break;
          case 23: 
            { return new Symbol(sym.Top, yychar, yyline, yytext());
            } 
            // fall through
          case 120: break;
          case 24: 
            { return new Symbol(sym.Not, yychar, yyline, yytext());
            } 
            // fall through
          case 121: break;
          case 25: 
            { return new Symbol(sym.Add, yychar, yyline, yytext());
            } 
            // fall through
          case 122: break;
          case 26: 
            { return new Symbol(sym.Asc, yychar, yyline, yytext());
            } 
            // fall through
          case 123: break;
          case 27: 
            { return new Symbol(sym.Avg, yychar, yyline, yytext());
            } 
            // fall through
          case 124: break;
          case 28: 
            { return new Symbol(sym.End, yychar, yyline, yytext());
            } 
            // fall through
          case 125: break;
          case 29: 
            { return new Symbol(sym.Out, yychar, yyline, yytext());
            } 
            // fall through
          case 126: break;
          case 30: 
            { return new Symbol(sym.BIT, yychar, yyline, yytext());
            } 
            // fall through
          case 127: break;
          case 31: 
            { return new Symbol(sym.Bit, yychar, yyline, yytext());
            } 
            // fall through
          case 128: break;
          case 32: 
            { return new Symbol(sym.Sum, yychar, yyline, yytext());
            } 
            // fall through
          case 129: break;
          case 33: 
            { return new Symbol(sym.INT, yychar, yyline, yytext());
            } 
            // fall through
          case 130: break;
          case 34: 
            { return new Symbol(sym.Int, yychar, yyline, yytext());
            } 
            // fall through
          case 131: break;
          case 35: 
            { return new Symbol(sym.For, yychar, yyline, yytext());
            } 
            // fall through
          case 132: break;
          case 36: 
            { return new Symbol(sym.Max, yychar, yyline, yytext());
            } 
            // fall through
          case 133: break;
          case 37: 
            { return new Symbol(sym.Min, yychar, yyline, yytext());
            } 
            // fall through
          case 134: break;
          case 38: 
            { return new Symbol(sym.Key, yychar, yyline, yytext());
            } 
            // fall through
          case 135: break;
          case 39: 
            { return new Symbol(sym.Transaction, yychar, yyline, yytext());
            } 
            // fall through
          case 136: break;
          case 40: 
            { return new Symbol(sym.Read, yychar, yyline, yytext());
            } 
            // fall through
          case 137: break;
          case 41: 
            { return new Symbol(sym.User, yychar, yyline, yytext());
            } 
            // fall through
          case 138: break;
          case 42: 
            { return new Symbol(sym.Null, yychar, yyline, yytext());
            } 
            // fall through
          case 139: break;
          case 43: 
            { return new Symbol(sym.Drop, yychar, yyline, yytext());
            } 
            // fall through
          case 140: break;
          case 44: 
            { return new Symbol(sym.Desc, yychar, yyline, yytext());
            } 
            // fall through
          case 141: break;
          case 45: 
            { return new Symbol(sym.Only, yychar, yyline, yytext());
            } 
            // fall through
          case 142: break;
          case 46: 
            { return new Symbol(sym.Proc, yychar, yyline, yytext());
            } 
            // fall through
          case 143: break;
          case 47: 
            { return new Symbol(sym.Into, yychar, yyline, yytext());
            } 
            // fall through
          case 144: break;
          case 48: 
            { return new Symbol(sym.From, yychar, yyline, yytext());
            } 
            // fall through
          case 145: break;
          case 49: 
            { return new Symbol(sym.Full, yychar, yyline, yytext());
            } 
            // fall through
          case 146: break;
          case 50: 
            { return new Symbol(sym.View, yychar, yyline, yytext());
            } 
            // fall through
          case 147: break;
          case 51: 
            { return new Symbol(sym.Left, yychar, yyline, yytext());
            } 
            // fall through
          case 148: break;
          case 52: 
            { return new Symbol(sym.Join, yychar, yyline, yytext());
            } 
            // fall through
          case 149: break;
          case 53: 
            { return new Symbol(sym.Table, yychar, yyline, yytext());
            } 
            // fall through
          case 150: break;
          case 54: 
            { return new Symbol(sym.Right, yychar, yyline, yytext());
            } 
            // fall through
          case 151: break;
          case 55: 
            { return new Symbol(sym.Count, yychar, yyline, yytext());
            } 
            // fall through
          case 152: break;
          case 56: 
            { return new Symbol(sym.Alter, yychar, yyline, yytext());
            } 
            // fall through
          case 153: break;
          case 57: 
            { return new Symbol(sym.Order, yychar, yyline, yytext());
            } 
            // fall through
          case 154: break;
          case 58: 
            { return new Symbol(sym.Outer, yychar, yyline, yytext());
            } 
            // fall through
          case 155: break;
          case 59: 
            { return new Symbol(sym.Begin, yychar, yyline, yytext());
            } 
            // fall through
          case 156: break;
          case 60: 
            { return new Symbol(sym.Inner, yychar, yyline, yytext());
            } 
            // fall through
          case 157: break;
          case 61: 
            { return new Symbol(sym.Index, yychar, yyline, yytext());
            } 
            // fall through
          case 158: break;
          case 62: 
            { return new Symbol(sym.FLOAT, yychar, yyline, yytext());
            } 
            // fall through
          case 159: break;
          case 63: 
            { return new Symbol(sym.Float, yychar, yyline, yytext());
            } 
            // fall through
          case 160: break;
          case 64: 
            { return new Symbol(sym.Group, yychar, yyline, yytext());
            } 
            // fall through
          case 161: break;
          case 65: 
            { return new Symbol(sym.Return, yychar, yyline, yytext());
            } 
            // fall through
          case 162: break;
          case 66: 
            { return new Symbol(sym.Unique, yychar, yyline, yytext());
            } 
            // fall through
          case 163: break;
          case 67: 
            { return new Symbol(sym.Update, yychar, yyline, yytext());
            } 
            // fall through
          case 164: break;
          case 68: 
            { return new Symbol(sym.Create, yychar, yyline, yytext());
            } 
            // fall through
          case 165: break;
          case 69: 
            { return new Symbol(sym.Cursor, yychar, yyline, yytext());
            } 
            // fall through
          case 166: break;
          case 70: 
            { return new Symbol(sym.Column, yychar, yyline, yytext());
            } 
            // fall through
          case 167: break;
          case 71: 
            { return new Symbol(sym.Commit, yychar, yyline, yytext());
            } 
            // fall through
          case 168: break;
          case 72: 
            { return new Symbol(sym.Exists, yychar, yyline, yytext());
            } 
            // fall through
          case 169: break;
          case 73: 
            { return new Symbol(sym.Output, yychar, yyline, yytext());
            } 
            // fall through
          case 170: break;
          case 74: 
            { return new Symbol(sym.Scroll, yychar, yyline, yytext());
            } 
            // fall through
          case 171: break;
          case 75: 
            { return new Symbol(sym.Select, yychar, yyline, yytext());
            } 
            // fall through
          case 172: break;
          case 76: 
            { return new Symbol(sym.String, yychar, yyline, yytext());
            } 
            // fall through
          case 173: break;
          case 77: 
            { return new Symbol(sym.Insert, yychar, yyline, yytext());
            } 
            // fall through
          case 174: break;
          case 78: 
            { return new Symbol(sym.Values, yychar, yyline, yytext());
            } 
            // fall through
          case 175: break;
          case 79: 
            { return new Symbol(sym.Returns, yychar, yyline, yytext());
            } 
            // fall through
          case 176: break;
          case 80: 
            { return new Symbol(sym.Rebuild, yychar, yyline, yytext());
            } 
            // fall through
          case 177: break;
          case 81: 
            { return new Symbol(sym.Collate, yychar, yyline, yytext());
            } 
            // fall through
          case 178: break;
          case 82: 
            { return new Symbol(sym.Declare, yychar, yyline, yytext());
            } 
            // fall through
          case 179: break;
          case 83: 
            { return new Symbol(sym.Primary, yychar, yyline, yytext());
            } 
            // fall through
          case 180: break;
          case 84: 
            { return new Symbol(sym.Percent, yychar, yyline, yytext());
            } 
            // fall through
          case 181: break;
          case 85: 
            { return new Symbol(sym.Foreign, yychar, yyline, yytext());
            } 
            // fall through
          case 182: break;
          case 86: 
            { return new Symbol(sym.VARCHAR, yychar, yyline, yytext());
            } 
            // fall through
          case 183: break;
          case 87: 
            { return new Symbol(sym.Truncate, yychar, yyline, yytext());
            } 
            // fall through
          case 184: break;
          case 88: 
            { return new Symbol(sym.Rollback, yychar, yyline, yytext());
            } 
            // fall through
          case 185: break;
          case 89: 
            { return new Symbol(sym.Database, yychar, yyline, yytext());
            } 
            // fall through
          case 186: break;
          case 90: 
            { return new Symbol(sym.Distinct, yychar, yyline, yytext());
            } 
            // fall through
          case 187: break;
          case 91: 
            { return new Symbol(sym.Function, yychar, yyline, yytext());
            } 
            // fall through
          case 188: break;
          case 92: 
            { return new Symbol(sym.Procedure, yychar, yyline, yytext());
            } 
            // fall through
          case 189: break;
          case 93: 
            { return new Symbol(sym.Save, yychar, yyline, yytext());
            } 
            // fall through
          case 190: break;
          case 94: 
            { return new Symbol(sym.Constraint, yychar, yyline, yytext());
            } 
            // fall through
          case 191: break;
          case 95: 
            { return new Symbol(sym.Tran, yychar, yyline, yytext());
            } 
            // fall through
          case 192: break;
          case 96: 
            { return new Symbol(sym.Nonclustered, yychar, yyline, yytext());
            } 
            // fall through
          case 193: break;
          case 97: 
            { return new Symbol(sym.Id, yychar, yyline, yytext());
            } 
            // fall through
          case 194: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
