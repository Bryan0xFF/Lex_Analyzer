
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Oct 31 18:24:33 CST 2019
//----------------------------------------------------

package lexCode;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Oct 31 18:24:33 CST 2019
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\341\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\016\005\000\002" +
    "\021\003\000\002\021\005\000\002\021\007\000\002\015" +
    "\005\000\002\015\006\000\002\015\005\000\002\015\006" +
    "\000\002\015\006\000\002\036\004\000\002\036\002\000" +
    "\002\035\003\000\002\035\003\000\002\032\004\000\002" +
    "\032\006\000\002\033\003\000\002\033\005\000\002\022" +
    "\005\000\002\022\003\000\002\022\002\000\002\037\007" +
    "\000\002\037\005\000\002\037\005\000\002\037\003\000" +
    "\002\020\006\000\002\020\005\000\002\020\006\000\002" +
    "\057\005\000\002\057\007\000\002\057\006\000\002\057" +
    "\006\000\002\057\007\000\002\061\003\000\002\061\003" +
    "\000\002\061\006\000\002\061\003\000\002\060\004\000" +
    "\002\042\004\000\002\042\005\000\002\043\003\000\002" +
    "\043\004\000\002\040\005\000\002\044\003\000\002\044" +
    "\002\000\002\041\005\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\045\004\000\002\045\003\000" +
    "\002\046\005\000\002\046\004\000\002\046\005\000\002" +
    "\050\006\000\002\051\006\000\002\051\006\000\002\051" +
    "\005\000\002\051\004\000\002\051\004\000\002\051\003" +
    "\000\002\047\012\000\002\052\005\000\002\052\003\000" +
    "\002\053\005\000\002\054\007\000\002\054\005\000\002" +
    "\055\004\000\002\055\002\000\002\056\004\000\002\056" +
    "\005\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\062\004\000" +
    "\002\067\003\000\002\067\003\000\002\063\005\000\002" +
    "\070\003\000\002\070\004\000\002\070\002\000\002\064" +
    "\005\000\002\065\005\000\002\065\006\000\002\066\005" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\013\014\000\002\071\005\000\002" +
    "\071\003\000\002\072\005\000\002\072\005\000\002\072" +
    "\005\000\002\072\005\000\002\072\003\000\002\072\003" +
    "\000\002\072\003\000\002\072\003\000\002\010\004\000" +
    "\002\073\004\000\002\073\004\000\002\073\003\000\002" +
    "\074\007\000\002\074\003\000\002\075\004\000\002\075" +
    "\003\000\002\076\005\000\002\076\006\000\002\076\010" +
    "\000\002\076\004\000\002\076\005\000\002\076\007\000" +
    "\002\076\006\000\002\076\005\000\002\077\004\000\002" +
    "\077\007\000\002\077\002\000\002\101\004\000\002\101" +
    "\003\000\002\100\006\000\002\100\006\000\002\100\006" +
    "\000\002\100\006\000\002\100\006\000\002\100\006\000" +
    "\002\103\006\000\002\103\005\000\002\103\007\000\002" +
    "\103\010\000\002\132\003\000\002\132\005\000\002\132" +
    "\004\000\002\132\006\000\002\107\006\000\002\105\005" +
    "\000\002\105\005\000\002\105\005\000\002\105\006\000" +
    "\002\105\005\000\002\105\006\000\002\105\006\000\002" +
    "\105\003\000\002\105\003\000\002\105\002\000\002\106" +
    "\005\000\002\106\004\000\002\104\007\000\002\107\004" +
    "\000\002\120\005\000\002\111\005\000\002\112\005\000" +
    "\002\121\003\000\002\121\003\000\002\121\003\000\002" +
    "\121\003\000\002\121\003\000\002\116\003\000\002\116" +
    "\003\000\002\113\006\000\002\113\006\000\002\113\003" +
    "\000\002\115\003\000\002\115\002\000\002\114\006\000" +
    "\002\117\003\000\002\117\003\000\002\117\002\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\122" +
    "\005\000\002\122\005\000\002\122\005\000\002\122\005" +
    "\000\002\125\006\000\002\126\006\000\002\126\010\000" +
    "\002\126\002\000\002\127\003\000\002\127\003\000\002" +
    "\127\002\000\002\131\003\000\002\131\003\000\002\131" +
    "\006\000\002\131\003\000\002\130\003\000\002\123\010" +
    "\000\002\123\010\000\002\133\005\000\002\133\002\000" +
    "\002\137\005\000\002\137\007\000\002\135\010\000\002" +
    "\135\007\000\002\136\003\000\002\136\003\000\002\136" +
    "\003\000\002\136\003\000\002\136\004\000\002\124\007" +
    "\000\002\140\004\000\002\140\003\000\002\140\002\000" +
    "\002\141\006\000\002\142\005\000\002\142\004\000\002" +
    "\142\002\000\002\144\004\000\002\144\002\000\002\143" +
    "\005\000\002\143\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01bb\000\030\004\006\024\032\034\017\057\011\061" +
    "\037\062\004\063\021\067\043\072\030\132\042\143\026" +
    "\001\002\000\006\064\177\065\176\001\002\000\006\005" +
    "\uff4c\022\uff4c\001\002\000\004\031\u01b8\001\002\000\006" +
    "\005\uff9f\022\uff9f\001\002\000\006\005\ufffd\022\ufffd\001" +
    "\002\000\034\004\006\024\032\034\017\057\011\061\037" +
    "\062\004\063\021\064\177\065\176\067\043\072\030\132" +
    "\042\143\026\001\002\000\006\005\ufff7\022\ufff7\001\002" +
    "\000\006\005\ufffe\022\ufffe\001\002\000\006\005\u01b3\022" +
    "\u01b4\001\002\000\006\005\uffac\022\uffac\001\002\000\006" +
    "\005\uff4a\022\uff4a\001\002\000\016\025\u0150\027\u0152\031" +
    "\u014e\133\u0151\134\u014f\140\u014d\001\002\000\006\005\uff4b" +
    "\022\uff4b\001\002\000\006\064\177\065\176\001\002\000" +
    "\006\005\uffad\022\uffad\001\002\000\006\005\ufffb\022\ufffb" +
    "\001\002\000\006\005\uffae\022\uffae\001\002\000\006\005" +
    "\uffaf\022\uffaf\001\002\000\004\006\u0137\001\002\000\006" +
    "\005\ufff9\022\ufff9\001\002\000\030\006\243\073\255\074" +
    "\244\075\253\077\257\100\241\103\245\104\250\105\256" +
    "\106\246\107\251\001\002\000\006\005\uffa0\022\uffa0\001" +
    "\002\000\014\025\206\026\210\027\207\030\211\031\205" +
    "\001\002\000\006\005\ufff8\022\ufff8\001\002\000\006\005" +
    "\ufffc\022\ufffc\001\002\000\006\005\ufffa\022\ufffa\001\002" +
    "\000\006\005\uffb0\022\uffb0\001\002\000\006\064\177\065" +
    "\176\001\002\000\006\005\uff9e\022\uff9e\001\002\000\006" +
    "\005\uff9d\022\uff9d\001\002\000\010\133\105\134\104\140" +
    "\103\001\002\000\004\070\046\001\002\000\004\002\045" +
    "\001\002\000\004\002\001\001\002\000\004\006\047\001" +
    "\002\000\052\005\ufff5\006\ufff5\013\077\021\ufff5\022\ufff5" +
    "\032\ufff5\033\ufff5\034\ufff5\041\ufff5\066\ufff5\076\ufff5\112" +
    "\ufff5\113\ufff5\114\ufff5\115\ufff5\116\ufff5\117\ufff5\120\ufff5" +
    "\131\ufff5\146\ufff5\001\002\000\004\041\051\001\002\000" +
    "\004\006\052\001\002\000\006\021\075\042\uff9a\001\002" +
    "\000\004\042\054\001\002\000\004\071\055\001\002\000" +
    "\004\041\056\001\002\000\012\006\060\007\063\010\062" +
    "\012\061\001\002\000\004\042\074\001\002\000\006\021" +
    "\072\042\uff95\001\002\000\006\021\070\042\uff94\001\002" +
    "\000\006\021\066\042\uff92\001\002\000\006\021\064\042" +
    "\uff93\001\002\000\012\006\060\007\063\010\062\012\061" +
    "\001\002\000\004\042\uff97\001\002\000\012\006\060\007" +
    "\063\010\062\012\061\001\002\000\004\042\uff96\001\002" +
    "\000\012\006\060\007\063\010\062\012\061\001\002\000" +
    "\004\042\uff98\001\002\000\012\006\060\007\063\010\062" +
    "\012\061\001\002\000\004\042\uff99\001\002\000\006\005" +
    "\uff9c\022\uff9c\001\002\000\004\006\052\001\002\000\004" +
    "\042\uff9b\001\002\000\004\006\100\001\002\000\052\005" +
    "\ufff4\006\ufff4\013\101\021\ufff4\022\ufff4\032\ufff4\033\ufff4" +
    "\034\ufff4\041\ufff4\066\ufff4\076\ufff4\112\ufff4\113\ufff4\114" +
    "\ufff4\115\ufff4\116\ufff4\117\ufff4\120\ufff4\131\ufff4\146\ufff4" +
    "\001\002\000\004\006\102\001\002\000\050\005\ufff3\006" +
    "\ufff3\021\ufff3\022\ufff3\032\ufff3\033\ufff3\034\ufff3\041\ufff3" +
    "\066\ufff3\076\ufff3\112\ufff3\113\ufff3\114\ufff3\115\ufff3\116" +
    "\ufff3\117\ufff3\120\ufff3\131\ufff3\146\ufff3\001\002\000\004" +
    "\006\134\001\002\000\004\006\047\001\002\000\004\006" +
    "\047\001\002\000\006\066\111\076\uff42\001\002\000\006" +
    "\005\uff49\022\uff49\001\002\000\004\076\130\001\002\000" +
    "\004\006\112\001\002\000\012\054\117\055\115\056\114" +
    "\137\116\001\002\000\012\021\uff3f\076\uff3f\135\125\136" +
    "\124\001\002\000\042\004\uff3b\021\uff3b\024\uff3b\034\uff3b" +
    "\042\uff3b\057\uff3b\061\uff3b\062\uff3b\063\uff3b\067\uff3b\072" +
    "\uff3b\076\uff3b\132\uff3b\135\uff3b\136\uff3b\143\uff3b\001\002" +
    "\000\042\004\uff3d\021\uff3d\024\uff3d\034\uff3d\042\uff3d\057" +
    "\uff3d\061\uff3d\062\uff3d\063\uff3d\067\uff3d\072\uff3d\076\uff3d" +
    "\132\uff3d\135\uff3d\136\uff3d\143\uff3d\001\002\000\004\041" +
    "\120\001\002\000\042\004\uff3e\021\uff3e\024\uff3e\034\uff3e" +
    "\042\uff3e\057\uff3e\061\uff3e\062\uff3e\063\uff3e\067\uff3e\072" +
    "\uff3e\076\uff3e\132\uff3e\135\uff3e\136\uff3e\143\uff3e\001\002" +
    "\000\004\007\121\001\002\000\004\042\122\001\002\000" +
    "\042\004\uff3c\021\uff3c\024\uff3c\034\uff3c\042\uff3c\057\uff3c" +
    "\061\uff3c\062\uff3c\063\uff3c\067\uff3c\072\uff3c\076\uff3c\132" +
    "\uff3c\135\uff3c\136\uff3c\143\uff3c\001\002\000\006\021\126" +
    "\076\uff44\001\002\000\006\021\uff40\076\uff40\001\002\000" +
    "\006\021\uff41\076\uff41\001\002\000\006\066\111\076\uff42" +
    "\001\002\000\004\076\uff43\001\002\000\030\004\006\024" +
    "\032\034\017\057\011\061\037\062\004\063\021\067\043" +
    "\072\030\132\042\143\026\001\002\000\006\005\uff45\022" +
    "\uff45\001\002\000\006\005\uff3a\022\uff3a\001\002\000\006" +
    "\005\uff48\022\uff48\001\002\000\040\005\uffdf\013\171\021" +
    "\170\022\uffdf\033\uffdf\036\uffdf\037\uffdf\041\uffdf\042\uffdf" +
    "\044\uffdf\045\uffdf\122\uffdf\131\uffdf\141\uffdf\146\uffdf\001" +
    "\002\000\006\041\136\141\uff36\001\002\000\004\066\162" +
    "\001\002\000\004\141\140\001\002\000\004\141\142\001" +
    "\002\000\006\005\uff39\022\uff39\001\002\000\012\054\117" +
    "\055\115\056\114\137\116\001\002\000\032\004\006\024" +
    "\032\034\017\057\011\061\037\062\004\063\021\067\043" +
    "\072\030\076\144\132\042\143\026\001\002\000\030\004" +
    "\006\024\032\034\017\057\011\061\037\062\004\063\021" +
    "\067\043\072\030\132\042\143\026\001\002\000\004\142" +
    "\146\001\002\000\014\007\153\010\150\011\151\012\147" +
    "\066\152\001\002\000\006\005\uff2e\022\uff2e\001\002\000" +
    "\006\005\uff30\022\uff30\001\002\000\006\005\uff2f\022\uff2f" +
    "\001\002\000\004\006\155\001\002\000\006\005\uff31\022" +
    "\uff31\001\002\000\006\005\uff32\022\uff32\001\002\000\006" +
    "\005\uff2d\022\uff2d\001\002\000\004\142\157\001\002\000" +
    "\014\007\153\010\150\011\151\012\147\066\152\001\002" +
    "\000\006\005\uff33\022\uff33\001\002\000\004\042\167\001" +
    "\002\000\004\006\163\001\002\000\012\054\117\055\115" +
    "\056\114\137\116\001\002\000\006\021\165\042\uff35\001" +
    "\002\000\004\066\162\001\002\000\004\042\uff34\001\002" +
    "\000\004\141\uff37\001\002\000\004\006\134\001\002\000" +
    "\004\006\172\001\002\000\036\005\uffe0\021\173\022\uffe0" +
    "\033\uffe0\036\uffe0\037\uffe0\041\uffe0\042\uffe0\044\uffe0\045" +
    "\uffe0\122\uffe0\131\uffe0\141\uffe0\146\uffe0\001\002\000\004" +
    "\006\134\001\002\000\034\005\uffe2\022\uffe2\033\uffe2\036" +
    "\uffe2\037\uffe2\041\uffe2\042\uffe2\044\uffe2\045\uffe2\122\uffe2" +
    "\131\uffe2\141\uffe2\146\uffe2\001\002\000\034\005\uffe1\022" +
    "\uffe1\033\uffe1\036\uffe1\037\uffe1\041\uffe1\042\uffe1\044\uffe1" +
    "\045\uffe1\122\uffe1\131\uffe1\141\uffe1\146\uffe1\001\002\000" +
    "\012\005\uffa9\006\uffa9\022\uffa9\066\uffa9\001\002\000\012" +
    "\005\uffaa\006\uffaa\022\uffaa\066\uffaa\001\002\000\012\005" +
    "\uffa5\006\202\022\uffa5\066\203\001\002\000\006\005\uffa8" +
    "\022\uffa8\001\002\000\006\005\uffa7\022\uffa7\001\002\000" +
    "\004\006\204\001\002\000\006\005\uffa6\022\uffa6\001\002" +
    "\000\004\006\047\001\002\000\004\006\232\001\002\000" +
    "\006\006\uffec\014\214\001\002\000\010\006\uffec\014\214" +
    "\032\uffec\001\002\000\004\006\212\001\002\000\006\005" +
    "\ufff0\022\ufff0\001\002\000\006\006\047\032\220\001\002" +
    "\000\004\015\215\001\002\000\006\006\uffed\032\uffed\001" +
    "\002\000\010\005\uffe7\021\226\022\uffe7\001\002\000\006" +
    "\005\uffef\022\uffef\001\002\000\004\006\047\001\002\000" +
    "\006\005\uffeb\022\uffeb\001\002\000\006\005\uffea\022\uffea" +
    "\001\002\000\010\005\uffe9\021\224\022\uffe9\001\002\000" +
    "\004\032\220\001\002\000\006\005\uffe8\022\uffe8\001\002" +
    "\000\004\006\047\001\002\000\006\005\uffe6\022\uffe6\001" +
    "\002\000\004\006\134\001\002\000\006\005\uffee\022\uffee" +
    "\001\002\000\012\005\uffe3\006\233\021\234\022\uffe3\001" +
    "\002\000\006\005\uffe4\022\uffe4\001\002\000\004\006\236" +
    "\001\002\000\006\005\ufff1\022\ufff1\001\002\000\012\005" +
    "\uffe3\006\233\021\234\022\uffe3\001\002\000\006\005\uffe5" +
    "\022\uffe5\001\002\000\006\005\ufff2\022\ufff2\001\002\000" +
    "\024\006\243\073\255\074\244\075\253\103\245\104\250" +
    "\105\256\106\246\107\251\001\002\000\012\005\uff8c\022" +
    "\uff8c\033\uff8c\146\uff8c\001\002\000\012\013\u012c\021\uff7f" +
    "\076\261\110\uff7f\001\002\000\020\006\243\075\253\103" +
    "\245\104\250\105\256\106\246\107\251\001\002\000\004" +
    "\041\u0126\001\002\000\004\041\u0123\001\002\000\012\005" +
    "\uff8a\022\uff8a\033\uff8a\146\uff8a\001\002\000\004\041\u0120" +
    "\001\002\000\004\041\u011d\001\002\000\012\005\uff91\022" +
    "\uff91\033\uff91\146\uff91\001\002\000\006\021\u011a\110\265" +
    "\001\002\000\012\005\uff8e\022\uff8e\033\uff8e\146\uff8e\001" +
    "\002\000\004\041\u0116\001\002\000\004\041\u0113\001\002" +
    "\000\024\006\243\073\255\074\244\075\253\103\245\104" +
    "\250\105\256\106\246\107\251\001\002\000\010\021\uff7f" +
    "\076\261\110\uff7f\001\002\000\006\006\u010b\101\u010c\001" +
    "\002\000\006\021\263\110\265\001\002\000\020\006\243" +
    "\075\253\103\245\104\250\105\256\106\246\107\251\001" +
    "\002\000\012\005\uff82\022\uff82\033\uff82\146\uff82\001\002" +
    "\000\004\006\047\001\002\000\034\005\uff64\006\271\021" +
    "\272\022\uff64\033\uff64\112\300\113\277\114\274\115\276" +
    "\116\301\120\275\131\267\146\uff64\001\002\000\004\121" +
    "\u0105\001\002\000\012\005\uff75\022\uff75\033\uff75\146\uff75" +
    "\001\002\000\032\005\uff64\021\u0102\022\uff64\033\uff64\112" +
    "\300\113\277\114\274\115\276\116\301\120\275\131\267" +
    "\146\uff64\001\002\000\004\006\047\001\002\000\012\005" +
    "\uff66\022\uff66\033\uff66\146\uff66\001\002\000\006\111\364" +
    "\113\365\001\002\000\004\121\331\001\002\000\006\111" +
    "\323\113\324\001\002\000\004\111\321\001\002\000\004" +
    "\111\317\001\002\000\004\113\303\001\002\000\012\005" +
    "\uff65\022\uff65\033\uff65\146\uff65\001\002\000\004\111\304" +
    "\001\002\000\004\006\047\001\002\000\006\006\307\032" +
    "\311\001\002\000\012\005\uff67\022\uff67\033\uff67\146\uff67" +
    "\001\002\000\004\032\311\001\002\000\012\005\uff62\022" +
    "\uff62\033\uff62\146\uff62\001\002\000\004\006\047\001\002" +
    "\000\004\117\313\001\002\000\004\006\047\001\002\000" +
    "\030\005\uff64\022\uff64\033\uff64\112\300\113\277\114\274" +
    "\115\276\116\301\120\275\131\267\146\uff64\001\002\000" +
    "\012\005\uff61\022\uff61\033\uff61\146\uff61\001\002\000\012" +
    "\005\uff63\022\uff63\033\uff63\146\uff63\001\002\000\004\006" +
    "\047\001\002\000\012\005\uff6d\022\uff6d\033\uff6d\146\uff6d" +
    "\001\002\000\004\006\047\001\002\000\012\005\uff6c\022" +
    "\uff6c\033\uff6c\146\uff6c\001\002\000\004\006\047\001\002" +
    "\000\004\111\325\001\002\000\004\006\047\001\002\000" +
    "\012\005\uff68\022\uff68\033\uff68\146\uff68\001\002\000\012" +
    "\005\uff69\022\uff69\033\uff69\146\uff69\001\002\000\012\005" +
    "\uff60\022\uff60\033\uff60\146\uff60\001\002\000\004\006\134" +
    "\001\002\000\006\122\335\131\267\001\002\000\012\005" +
    "\uff6e\022\uff6e\033\uff6e\146\uff6e\001\002\000\012\005\uff5f" +
    "\022\uff5f\033\uff5f\146\uff5f\001\002\000\014\103\245\104" +
    "\250\105\256\106\246\107\251\001\002\000\014\117\345" +
    "\123\341\124\340\125\343\126\344\001\002\000\012\005" +
    "\uff5e\022\uff5e\033\uff5e\146\uff5e\001\002\000\006\007\uff5b" +
    "\010\uff5b\001\002\000\006\007\uff5c\010\uff5c\001\002\000" +
    "\006\007\350\010\347\001\002\000\006\007\uff59\010\uff59" +
    "\001\002\000\006\007\uff58\010\uff58\001\002\000\006\007" +
    "\uff5a\010\uff5a\001\002\000\010\127\352\130\354\131\267" +
    "\001\002\000\012\042\uff56\127\uff56\130\uff56\131\uff56\001" +
    "\002\000\012\042\uff57\127\uff57\130\uff57\131\uff57\001\002" +
    "\000\012\005\uff53\022\uff53\033\uff53\146\uff53\001\002\000" +
    "\016\052\355\103\uff51\104\uff51\105\uff51\106\uff51\107\uff51" +
    "\001\002\000\012\005\uff5d\022\uff5d\033\uff5d\146\uff5d\001" +
    "\002\000\016\052\355\103\uff51\104\uff51\105\uff51\106\uff51" +
    "\107\uff51\001\002\000\014\103\uff52\104\uff52\105\uff52\106" +
    "\uff52\107\uff52\001\002\000\014\103\245\104\250\105\256" +
    "\106\246\107\251\001\002\000\014\117\345\123\341\124" +
    "\340\125\343\126\344\001\002\000\012\005\uff54\022\uff54" +
    "\033\uff54\146\uff54\001\002\000\014\103\245\104\250\105" +
    "\256\106\246\107\251\001\002\000\014\117\345\123\341" +
    "\124\340\125\343\126\344\001\002\000\012\005\uff55\022" +
    "\uff55\033\uff55\146\uff55\001\002\000\004\006\047\001\002" +
    "\000\004\111\366\001\002\000\004\006\047\001\002\000" +
    "\012\005\uff6a\022\uff6a\033\uff6a\146\uff6a\001\002\000\012" +
    "\005\uff6b\022\uff6b\033\uff6b\146\uff6b\001\002\000\030\005" +
    "\uff64\022\uff64\033\uff64\112\300\113\277\114\274\115\276" +
    "\116\301\120\275\131\267\146\uff64\001\002\000\034\005" +
    "\uff72\006\373\021\374\022\uff72\033\uff72\112\uff72\113\uff72" +
    "\114\uff72\115\uff72\116\uff72\120\uff72\131\uff72\146\uff72\001" +
    "\002\000\032\005\uff70\021\376\022\uff70\033\uff70\112\uff70" +
    "\113\uff70\114\uff70\115\uff70\116\uff70\120\uff70\131\uff70\146" +
    "\uff70\001\002\000\004\006\047\001\002\000\030\005\uff71" +
    "\022\uff71\033\uff71\112\uff71\113\uff71\114\uff71\115\uff71\116" +
    "\uff71\120\uff71\131\uff71\146\uff71\001\002\000\004\006\047" +
    "\001\002\000\030\005\uff6f\022\uff6f\033\uff6f\112\uff6f\113" +
    "\uff6f\114\uff6f\115\uff6f\116\uff6f\120\uff6f\131\uff6f\146\uff6f" +
    "\001\002\000\012\005\uff74\022\uff74\033\uff74\146\uff74\001" +
    "\002\000\012\005\uff76\022\uff76\033\uff76\146\uff76\001\002" +
    "\000\004\006\047\001\002\000\030\005\uff64\022\uff64\033" +
    "\uff64\112\300\113\277\114\274\115\276\116\301\120\275" +
    "\131\267\146\uff64\001\002\000\012\005\uff73\022\uff73\033" +
    "\uff73\146\uff73\001\002\000\004\006\134\001\002\000\016" +
    "\005\uff4d\022\uff4d\033\uff4d\044\u0107\045\u0108\146\uff4d\001" +
    "\002\000\012\005\uff4f\022\uff4f\033\uff4f\146\uff4f\001\002" +
    "\000\012\005\uff4e\022\uff4e\033\uff4e\146\uff4e\001\002\000" +
    "\012\005\uff50\022\uff50\033\uff50\146\uff50\001\002\000\012" +
    "\005\uff83\022\uff83\033\uff83\146\uff83\001\002\000\006\021" +
    "\uff81\110\uff81\001\002\000\004\006\u010d\001\002\000\004" +
    "\006\u010e\001\002\000\006\006\u010e\102\uff7d\001\002\000" +
    "\004\102\u0110\001\002\000\006\021\uff80\110\uff80\001\002" +
    "\000\004\102\uff7e\001\002\000\012\005\uff90\022\uff90\033" +
    "\uff90\146\uff90\001\002\000\004\006\134\001\002\000\004" +
    "\042\u0115\001\002\000\022\021\uff78\076\uff78\110\uff78\117" +
    "\uff78\123\uff78\124\uff78\125\uff78\126\uff78\001\002\000\006" +
    "\007\350\010\347\001\002\000\004\042\u0118\001\002\000" +
    "\022\006\243\074\244\075\253\103\245\104\250\105\256" +
    "\106\246\107\251\001\002\000\012\005\uff8d\022\uff8d\033" +
    "\uff8d\146\uff8d\001\002\000\020\006\243\075\253\103\245" +
    "\104\250\105\256\106\246\107\251\001\002\000\012\005" +
    "\uff86\022\uff86\033\uff86\146\uff86\001\002\000\012\005\uff89" +
    "\022\uff89\033\uff89\146\uff89\001\002\000\004\006\134\001" +
    "\002\000\004\042\u011f\001\002\000\022\021\uff7a\076\uff7a" +
    "\110\uff7a\117\uff7a\123\uff7a\124\uff7a\125\uff7a\126\uff7a\001" +
    "\002\000\004\006\134\001\002\000\004\042\u0122\001\002" +
    "\000\022\021\uff79\076\uff79\110\uff79\117\uff79\123\uff79\124" +
    "\uff79\125\uff79\126\uff79\001\002\000\004\006\134\001\002" +
    "\000\004\042\u0125\001\002\000\022\021\uff77\076\uff77\110" +
    "\uff77\117\uff77\123\uff77\124\uff77\125\uff77\126\uff77\001\002" +
    "\000\006\007\u0128\075\u0127\001\002\000\004\042\u012a\001" +
    "\002\000\004\042\u0129\001\002\000\022\021\uff7b\076\uff7b" +
    "\110\uff7b\117\uff7b\123\uff7b\124\uff7b\125\uff7b\126\uff7b\001" +
    "\002\000\022\021\uff7c\076\uff7c\110\uff7c\117\uff7c\123\uff7c" +
    "\124\uff7c\125\uff7c\126\uff7c\001\002\000\012\005\uff8b\022" +
    "\uff8b\033\uff8b\146\uff8b\001\002\000\004\006\u0131\001\002" +
    "\000\006\021\u012e\110\265\001\002\000\020\006\243\075" +
    "\253\103\245\104\250\105\256\106\246\107\251\001\002" +
    "\000\012\005\uff85\022\uff85\033\uff85\146\uff85\001\002\000" +
    "\012\005\uff88\022\uff88\033\uff88\146\uff88\001\002\000\010" +
    "\021\uff7f\076\261\110\uff7f\001\002\000\006\021\u0133\110" +
    "\265\001\002\000\020\006\243\075\253\103\245\104\250" +
    "\105\256\106\246\107\251\001\002\000\012\005\uff84\022" +
    "\uff84\033\uff84\146\uff84\001\002\000\012\005\uff87\022\uff87" +
    "\033\uff87\146\uff87\001\002\000\012\005\uff8f\022\uff8f\033" +
    "\uff8f\146\uff8f\001\002\000\004\144\u0138\001\002\000\010" +
    "\006\u0139\145\u013b\146\uff29\001\002\000\004\146\uff2a\001" +
    "\002\000\004\146\u013d\001\002\000\004\006\u013c\001\002" +
    "\000\004\146\uff2b\001\002\000\004\072\030\001\002\000" +
    "\006\005\uff2c\022\uff2c\001\002\000\012\005\uff25\022\uff25" +
    "\033\uff25\146\u0141\001\002\000\010\005\uff23\022\uff23\033" +
    "\u0145\001\002\000\006\147\u0142\151\u0143\001\002\000\004" +
    "\150\u0144\001\002\000\010\005\uff26\022\uff26\033\uff26\001" +
    "\002\000\010\005\uff27\022\uff27\033\uff27\001\002\000\004" +
    "\006\u0147\001\002\000\006\005\uff28\022\uff28\001\002\000" +
    "\010\005\uff21\021\u0149\022\uff21\001\002\000\006\005\uff24" +
    "\022\uff24\001\002\000\004\006\u0147\001\002\000\006\005" +
    "\uff22\022\uff22\001\002\000\012\005\uffa5\006\202\022\uffa5" +
    "\066\203\001\002\000\006\005\uffa4\022\uffa4\001\002\000" +
    "\004\006\134\001\002\000\004\006\047\001\002\000\004" +
    "\006\047\001\002\000\004\006\u0155\001\002\000\004\006" +
    "\047\001\002\000\004\072\030\001\002\000\006\005\uffdd" +
    "\022\uffdd\001\002\000\006\005\uff46\022\uff46\001\002\000" +
    "\004\036\u0157\001\002\000\006\005\uffdc\022\uffdc\001\002" +
    "\000\004\006\u0158\001\002\000\012\005\uffd1\022\uffd1\051" +
    "\u015b\052\u0159\001\002\000\004\051\u015c\001\002\000\006" +
    "\005\uffd0\022\uffd0\001\002\000\006\005\uffcf\022\uffcf\001" +
    "\002\000\006\005\uffce\022\uffce\001\002\000\006\005\uff47" +
    "\022\uff47\001\002\000\004\034\u0160\001\002\000\006\005" +
    "\uffde\022\uffde\001\002\000\004\035\u0161\001\002\000\010" +
    "\006\u0163\016\u0164\034\u0165\001\002\000\006\005\uffdb\022" +
    "\uffdb\001\002\000\020\013\171\021\170\036\uffdf\054\u01aa" +
    "\055\u01a7\056\u01a6\137\u01a8\001\002\000\016\006\u016f\017" +
    "\u0176\026\u0170\040\u0177\046\u0178\053\u0173\001\002\000\004" +
    "\026\u0168\001\002\000\004\036\u0157\001\002\000\006\005" +
    "\uffd2\022\uffd2\001\002\000\004\006\134\001\002\000\006" +
    "\005\uffda\022\uffda\001\002\000\004\037\u016b\001\002\000" +
    "\010\005\uffcb\022\uffcb\043\u016d\001\002\000\006\005\uffcd" +
    "\022\uffcd\001\002\000\006\005\uffcc\022\uffcc\001\002\000" +
    "\006\005\uffc8\022\uffc8\001\002\000\004\006\134\001\002" +
    "\000\006\006\u0198\033\u0197\001\002\000\006\005\uffd9\022" +
    "\uffd9\001\002\000\006\005\uffc7\022\uffc7\001\002\000\004" +
    "\043\u0188\001\002\000\006\005\uffc5\022\uffc5\001\002\000" +
    "\006\005\uffc9\022\uffc9\001\002\000\004\047\u0187\001\002" +
    "\000\004\006\u0186\001\002\000\004\047\u0179\001\002\000" +
    "\004\041\u017a\001\002\000\004\006\u017c\001\002\000\006" +
    "\005\uffc2\022\uffc2\001\002\000\006\021\u0184\042\uffb8\001" +
    "\002\000\004\042\u017e\001\002\000\004\050\u017f\001\002" +
    "\000\004\006\047\001\002\000\004\041\u0181\001\002\000" +
    "\004\006\u017c\001\002\000\004\042\u0183\001\002\000\006" +
    "\005\uffba\022\uffba\001\002\000\004\006\u017c\001\002\000" +
    "\004\042\uffb9\001\002\000\006\005\uffc6\022\uffc6\001\002" +
    "\000\004\043\u0188\001\002\000\004\041\u018a\001\002\000" +
    "\006\005\uffc4\022\uffc4\001\002\000\004\006\u018b\001\002" +
    "\000\012\021\u018f\042\uffbb\044\u018e\045\u0190\001\002\000" +
    "\004\042\u018d\001\002\000\006\005\uffc1\022\uffc1\001\002" +
    "\000\006\021\u0194\042\uffbd\001\002\000\004\006\u018b\001" +
    "\002\000\006\021\u0191\042\uffbc\001\002\000\004\006\u018b" +
    "\001\002\000\004\042\uffbf\001\002\000\004\042\uffbe\001" +
    "\002\000\004\006\u018b\001\002\000\004\042\uffc0\001\002" +
    "\000\006\005\uffc3\022\uffc3\001\002\000\006\005\uffb2\022" +
    "\uffb2\001\002\000\006\041\u0199\043\u019b\001\002\000\004" +
    "\006\u018b\001\002\000\006\005\uffb7\022\uffb7\001\002\000" +
    "\010\005\uffb1\022\uffb1\041\u019c\001\002\000\004\006\u018b" +
    "\001\002\000\004\042\u019e\001\002\000\010\005\uffb3\022" +
    "\uffb3\032\u019f\001\002\000\004\006\047\001\002\000\006" +
    "\005\uffb6\022\uffb6\001\002\000\006\005\uffb4\022\uffb4\001" +
    "\002\000\004\042\u01a3\001\002\000\006\005\uffb5\022\uffb5" +
    "\001\002\000\004\036\u0157\001\002\000\006\005\uffca\022" +
    "\uffca\001\002\000\012\005\uffd3\022\uffd3\051\uffd3\052\uffd3" +
    "\001\002\000\012\005\uffd5\022\uffd5\051\uffd5\052\uffd5\001" +
    "\002\000\004\041\u01ac\001\002\000\012\005\uffd8\022\uffd8" +
    "\051\u015b\052\u0159\001\002\000\012\005\uffd6\022\uffd6\051" +
    "\uffd6\052\uffd6\001\002\000\006\005\uffd7\022\uffd7\001\002" +
    "\000\004\007\u01ad\001\002\000\004\042\u01ae\001\002\000" +
    "\012\005\uffd4\022\uffd4\051\uffd4\052\uffd4\001\002\000\006" +
    "\041\136\141\uff36\001\002\000\004\141\u01b1\001\002\000" +
    "\004\141\142\001\002\000\006\005\uff38\022\uff38\001\002" +
    "\000\014\002\uffff\005\uffff\022\uffff\060\uffff\142\uffff\001" +
    "\002\000\014\002\000\005\000\022\000\060\000\142\000" +
    "\001\002\000\006\005\uffab\022\uffab\001\002\000\004\060" +
    "\u01b7\001\002\000\006\005\uffa1\022\uffa1\001\002\000\004" +
    "\006\047\001\002\000\006\005\ufff6\022\ufff6\001\002\000" +
    "\006\006\u01bb\066\u01bc\001\002\000\006\005\uffa3\022\uffa3" +
    "\001\002\000\004\006\u01bd\001\002\000\006\005\uffa2\022" +
    "\uffa2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01bb\000\056\002\043\003\013\004\012\005\007\006" +
    "\033\007\022\010\006\011\040\013\030\014\037\015\034" +
    "\016\011\017\026\020\032\062\035\063\024\064\023\065" +
    "\021\066\014\122\004\123\017\124\015\001\001\000\004" +
    "\067\u01b9\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\002\u01b5\003\013" +
    "\004\012\005\007\006\033\007\022\010\006\011\040\013" +
    "\030\014\037\015\034\016\011\017\026\020\032\062\035" +
    "\063\024\064\023\065\021\066\014\067\u01b4\122\004\123" +
    "\017\124\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\067\u014a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\073\251\074\253\075\241\076\246\100\257\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\067" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\071\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\072\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\072\064\001\001\000\002\001\001\000\004\072\066\001" +
    "\001\000\002\001\001\000\004\072\070\001\001\000\002" +
    "\001\001\000\004\072\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\071\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\134\001\001\000\006\021\105" +
    "\125\132\001\001\000\006\021\105\125\106\001\001\000" +
    "\004\126\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\131\112\001\001\000\004\127" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\126\126\001\001\000\002\001" +
    "\001\000\060\002\131\003\013\004\012\005\007\006\033" +
    "\007\022\010\006\011\040\013\030\014\037\015\034\016" +
    "\011\017\026\020\032\062\035\063\024\064\023\065\021" +
    "\066\014\122\004\123\017\124\015\130\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\133\136\001\001\000\004\137\160\001" +
    "\001\000\002\001\001\000\004\135\140\001\001\000\002" +
    "\001\001\000\004\131\142\001\001\000\056\002\144\003" +
    "\013\004\012\005\007\006\033\007\022\010\006\011\040" +
    "\013\030\014\037\015\034\016\011\017\026\020\032\062" +
    "\035\063\024\064\023\065\021\066\014\122\004\123\017" +
    "\124\015\001\001\000\056\002\155\003\013\004\012\005" +
    "\007\006\033\007\022\010\006\011\040\013\030\014\037" +
    "\015\034\016\011\017\026\020\032\062\035\063\024\064" +
    "\023\065\021\066\014\122\004\123\017\124\015\001\001" +
    "\000\002\001\001\000\004\136\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\136\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\131\163\001" +
    "\001\000\002\001\001\000\004\137\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\070\200\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\237\001\001\000\002\001\001\000\004\036\227" +
    "\001\001\000\004\036\212\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\021\215\032\220\033\221\035\216" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\222\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\224\001\001\000\002\001\001\000\006\021\215\033\226" +
    "\001\001\000\002\001\001\000\004\037\230\001\001\000" +
    "\002\001\001\000\004\022\234\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\236\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\074\u0135" +
    "\075\241\076\246\100\257\001\001\000\002\001\001\000" +
    "\004\077\u012c\001\001\000\006\076\u012a\100\257\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\103\u011a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\074\u0111\075\241\076\246\100\257" +
    "\001\001\000\004\077\261\001\001\000\002\001\001\000" +
    "\004\103\263\001\001\000\006\076\u0109\100\257\001\001" +
    "\000\002\001\001\000\004\021\265\001\001\000\010\105" +
    "\267\107\272\114\301\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\105\u0100\107\272\114\301\001\001\000" +
    "\006\021\371\132\370\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\120\327\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\304\106\305\001" +
    "\001\000\004\104\307\001\001\000\002\001\001\000\004" +
    "\104\315\001\001\000\002\001\001\000\004\021\311\001" +
    "\001\000\002\001\001\000\004\021\313\001\001\000\010" +
    "\105\314\107\272\114\301\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\304\106\317\001\001\000\002" +
    "\001\001\000\006\021\304\106\321\001\001\000\002\001" +
    "\001\000\006\021\304\106\326\001\001\000\002\001\001" +
    "\000\006\021\304\106\325\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\331\001\001" +
    "\000\006\111\333\114\332\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\100\335\001\001\000\006\112\336" +
    "\121\341\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\116\345\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\113\352\114" +
    "\350\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\115\360\001\001\000\002\001\001\000" +
    "\004\115\355\001\001\000\002\001\001\000\004\100\356" +
    "\001\001\000\006\112\357\121\341\001\001\000\002\001" +
    "\001\000\004\100\361\001\001\000\006\112\362\121\341" +
    "\001\001\000\002\001\001\000\006\021\304\106\367\001" +
    "\001\000\002\001\001\000\006\021\304\106\366\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\105\377\107" +
    "\272\114\301\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\371\132\374\001\001\000\002\001\001\000" +
    "\006\021\371\132\376\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\371\132\u0102\001" +
    "\001\000\010\105\u0103\107\272\114\301\001\001\000\002" +
    "\001\001\000\004\037\u0105\001\001\000\004\117\u0108\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\101\u010e\001\001\000\004\101\u0110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\u0113\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\116\u0116\001\001\000\002\001\001\000" +
    "\010\075\u0118\076\246\100\257\001\001\000\002\001\001" +
    "\000\006\076\u011b\100\257\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\u011d\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\u0120\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\u0123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\103\u012e\001" +
    "\001\000\006\076\u012f\100\257\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\077\u0131\001\001\000\004\103" +
    "\u0133\001\001\000\006\076\u0134\100\257\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\140\u0139\001\001\000\002\001\001\000\004" +
    "\141\u013d\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\u013e\001\001\000\002\001\001\000\004\142\u013f" +
    "\001\001\000\004\144\u0145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\143\u0147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\143\u0149\001\001\000\002\001\001" +
    "\000\004\070\u014b\001\001\000\002\001\001\000\004\037" +
    "\u01ae\001\001\000\004\021\u015d\001\001\000\006\021\105" +
    "\125\u015c\001\001\000\002\001\001\000\006\021\105\125" +
    "\u0153\001\001\000\004\010\u0152\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\u0155\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\u0159\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\057\u015e\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\037\u0165\060\u0161\001" +
    "\001\000\002\001\001\000\004\061\u01a8\001\001\000\014" +
    "\041\u0170\045\u0174\046\u0173\053\u016d\056\u0171\001\001\000" +
    "\002\001\001\000\004\042\u0166\001\001\000\002\001\001" +
    "\000\006\037\u0169\040\u0168\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\u016b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\u01a3\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\u0195\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\u017a\001\001\000\004\052\u017c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\u017f\001\001\000\002\001\001\000" +
    "\004\052\u0181\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\u0184\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\u0188\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\u018b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\u0192\001\001\000\002\001\001\000\004\051\u0191\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\u0194" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\u0199\001\001\000\004\051\u01a1\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\u019c\001" +
    "\001\000\002\001\001\000\004\055\u019f\001\001\000\004" +
    "\021\u01a0\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\u01a4\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\u01aa\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\133\u01af\001\001\000\002\001\001" +
    "\000\004\135\u01b1\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\u01b8\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getSymbol(){
    return this.s;
    }    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // OF_ID ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OF_ID",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // OF_ID ::= Id Coma OF_ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OF_ID",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // OF_ID_INIT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OF_ID_INIT",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // OF_ID_INIT ::= Of OF_ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OF_ID_INIT",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // FOR_EXTENDED ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_EXTENDED",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // FOR_EXTENDED ::= For Update 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_EXTENDED",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // FOR_EXTENDED ::= For Read Only 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_EXTENDED",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // FOR_CURSOR ::= For SELECT FOR_EXTENDED OF_ID_INIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_CURSOR",95, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // OP_CURSOR ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_CURSOR",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // OP_CURSOR ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_CURSOR",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // OP_CURSOR ::= Scroll Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_CURSOR",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // CURSORS ::= Declare Id Cursor OP_CURSOR FOR_CURSOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CURSORS",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // OP_RETURN ::= Arroba Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RETURN",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // OP_RETURN ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RETURN",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // OP_RETURN ::= Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RETURN",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // OP_RETURN ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RETURN",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // OP_RETURN ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RETURN",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // FUNCTION_BODY ::= Returns PROC_TYPE INICIO Return OP_RETURN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCTION_BODY",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // FUNCTION_BODY ::= Returns PROC_TYPE As INICIO Return OP_RETURN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCTION_BODY",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // PROC_PARAMS_FUNCTION ::= Arroba Id PROC_TYPE Coma PROC_PARAMS_FUNCTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROC_PARAMS_FUNCTION",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // PROC_PARAMS_FUNCTION ::= Arroba Id PROC_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROC_PARAMS_FUNCTION",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // FUNCTION_OPTIONS ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCTION_OPTIONS",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // FUNCTION_OPTIONS ::= Parentesis_a PROC_PARAMS_FUNCTION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCTION_OPTIONS",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // FUNCTION ::= Alter Function TABLENAME_TWO FUNCTION_OPTIONS Returns FUNCTION_BODY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCTION",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // FUNCTION ::= Create Function TABLENAME_TWO FUNCTION_OPTIONS Returns FUNCTION_BODY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCTION",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // PROC_AS ::= INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROC_AS",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // PROC_TYPE ::= BIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROC_TYPE",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // PROC_TYPE ::= VARCHAR Parentesis_a Int Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROC_TYPE",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // PROC_TYPE ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROC_TYPE",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // PROC_TYPE ::= INT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROC_TYPE",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // OUT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // OUT ::= Output 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // OUT ::= Out 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // PROC_PARAMS ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROC_PARAMS",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // PROC_PARAMS ::= Arroba Id PROC_TYPE OUT Coma PROC_PARAMS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROC_PARAMS",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // PROC_PARAMS ::= Arroba Id PROC_TYPE OUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROC_PARAMS",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // PROC_OP ::= TABLENAME PROC_PARAMS As PROC_AS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROC_OP",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // PROCEDURE ::= Alter Proc PROC_OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROCEDURE",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // PROCEDURE ::= Alter Procedure PROC_OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROCEDURE",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // PROCEDURE ::= Create Procedure PROC_OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROCEDURE",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // PROCEDURE ::= Create Proc PROC_OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROCEDURE",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // TSQL ::= CURSORS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TSQL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // TSQL ::= FUNCTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TSQL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // TSQL ::= PROCEDURE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TSQL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // ORDER_TYPE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ORDER_TYPE",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // ORDER_TYPE ::= Desc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ORDER_TYPE",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // ORDER_TYPE ::= Asc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ORDER_TYPE",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // ORDER ::= Order By TABLENAME_TWO ORDER_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ORDER",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // NOT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOT",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // NOT ::= Not 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOT",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // REP_STATEMENT ::= ORDER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REP_STATEMENT",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // REP_STATEMENT ::= Or NOT METHOD_NAME EXPR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REP_STATEMENT",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // REP_STATEMENT ::= And NOT METHOD_NAME EXPR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REP_STATEMENT",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // NUM_TYPE ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUM_TYPE",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // NUM_TYPE ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUM_TYPE",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // CONDITION ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDITION",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // CONDITION ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDITION",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // CONDITION ::= Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDITION",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // CONDITION ::= MenorQue 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDITION",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // CONDITION ::= MayorQue 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDITION",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // EXPR ::= CONDITION NUM_TYPE REP_STATEMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // HAVING ::= Having METHOD_NAME EXPR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("HAVING",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // BY ::= By TABLENAME_TWO HAVING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BY",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // GROUP ::= Group BY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GROUP",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // ON ::= On TABLENAME Igual TABLENAME JOINS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ON",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // UNION ::= TABLENAME ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UNION",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // UNION ::= TABLENAME Id ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UNION",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // JOINS ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // JOINS ::= ORDER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // JOINS ::= GROUP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // JOINS ::= Full Outer Join UNION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // JOINS ::= Right Outer Join UNION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // JOINS ::= Right Join UNION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // JOINS ::= Left Outer Join UNION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // JOINS ::= Left Join UNION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // JOINS ::= Outer Join UNION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // JOINS ::= Inner Join UNION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // GROUP ::= Group By TABLENAME_TWO ORDER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GROUP",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // SEL_REP ::= TABLENAME Id Coma SEL_REP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SEL_REP",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // SEL_REP ::= TABLENAME Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SEL_REP",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // SEL_REP ::= TABLENAME Coma SEL_REP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SEL_REP",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // SEL_REP ::= TABLENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SEL_REP",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // FROM ::= From TABLENAME Id Coma SEL_REP JOINS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FROM",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // FROM ::= From TABLENAME Coma SEL_REP JOINS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FROM",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // FROM ::= From TABLENAME JOINS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FROM",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // FROM ::= From TABLENAME Id JOINS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FROM",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // METHOD_NAME ::= Min Parentesis_a TABLENAME_TWO Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // METHOD_NAME ::= Max Parentesis_a TABLENAME_TWO Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // METHOD_NAME ::= Avg Parentesis_a TABLENAME_TWO Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // METHOD_NAME ::= Sum Parentesis_a TABLENAME_TWO Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // METHOD_NAME ::= Count Parentesis_a Int Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // METHOD_NAME ::= Count Parentesis_a Asterisco Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // REP ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REP",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // REP ::= Id REP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REP",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // AS_STATEMENT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AS_STATEMENT",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // AS_STATEMENT ::= As Corchete_a Id REP Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AS_STATEMENT",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // AS_STATEMENT ::= As Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AS_STATEMENT",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // BODY ::= METHOD_NAME AS_STATEMENT FROM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // BODY ::= METHOD_NAME AS_STATEMENT Coma BODY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // BODY ::= Id Punto Id AS_STATEMENT FROM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // BODY ::= Id AS_STATEMENT FROM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // BODY ::= Asterisco FROM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // BODY ::= Id Punto Id AS_STATEMENT Coma BODY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // BODY ::= Id AS_STATEMENT Coma BODY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // BODY ::= Asterisco Coma BODY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PERCENT ::= BODY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PERCENT",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PERCENT ::= Percent BODY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PERCENT",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EX_TYPE ::= PERCENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EX_TYPE",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EX_TYPE ::= Top Parentesis_a NUM_TYPE Parentesis_c PERCENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EX_TYPE",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SELECT_TYPE ::= EX_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECT_TYPE",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SELECT_TYPE ::= Distinct EX_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECT_TYPE",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SELECT_TYPE ::= All EX_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECT_TYPE",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SELECT ::= Select SELECT_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // VALUES ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // VALUES ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // VALUES ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // VALUES ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // VALUES ::= Float Coma VALUES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VALUES ::= Int Coma VALUES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VALUES ::= String Coma VALUES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VALUES ::= Id Coma VALUES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // INSERT_COLUMN_OP ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSERT_COLUMN_OP",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // INSERT_COLUMN_OP ::= Id Coma INSERT_COLUMN_OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSERT_COLUMN_OP",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // INSERT ::= Insert Into TABLENAME Parentesis_a INSERT_COLUMN_OP Parentesis_c Values Parentesis_a VALUES Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSERT",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DML ::= DELETE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DML ::= UPDATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DML ::= SELECT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DML ::= INSERT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // END ::= Begin INICIO End 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("END",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SAVEPOINT ::= Save TRANS_OP Arroba Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SAVEPOINT",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SAVEPOINT ::= Save TRANS_OP Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SAVEPOINT",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ROLLBACK ::= Rollback TRANS_OP TRANS_NAME_OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ROLLBACK",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TRANS_NAME_OP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRANS_NAME_OP",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TRANS_NAME_OP ::= Arroba Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRANS_NAME_OP",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TRANS_NAME_OP ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRANS_NAME_OP",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // COMMIT ::= Commit TRANS_OP TRANS_NAME_OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMMIT",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TRANS_OP ::= Transaction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRANS_OP",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TRANS_OP ::= Tran 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRANS_OP",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // BEGIN_TRANSACTION ::= Begin TRANS_OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BEGIN_TRANSACTION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TCL ::= END 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // TCL ::= SAVEPOINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // TCL ::= ROLLBACK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // TCL ::= COMMIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TCL ::= BEGIN_TRANSACTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // COLUMN_INDEX ::= Index Id Nonclustered 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLUMN_INDEX",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // COLUMN_INDEX ::= Index Of 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLUMN_INDEX",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // T_INDEX_OP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T_INDEX_OP",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // T_INDEX_OP ::= On TABLENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T_INDEX_OP",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // T_INDEX ::= Parentesis_a OPS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T_INDEX",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // T_INDEX ::= Nonclustered Parentesis_a OPS Parentesis_c T_INDEX_OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T_INDEX",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // T_INDEX_INIT ::= Index Id T_INDEX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T_INDEX_INIT",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP_FK ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_FK",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP_FK ::= Id Coma OP_FK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_FK",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // A_ADD_FK_CONST ::= Parentesis_a OP_FK Parentesis_c References TABLENAME Parentesis_a OP_FK Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_ADD_FK_CONST",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPS ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPS",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPS ::= Id Desc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPS",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPS ::= Id Asc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPS",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPS ::= Id Coma OPS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPS",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPS ::= Id Desc Coma OPS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPS",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPS ::= Id Asc Coma OPS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPS",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // A_ADD_OP_CONST ::= Nonclustered Parentesis_a OPS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_ADD_OP_CONST",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TABLE_CONSTRAINT_OPS ::= Foreign Key A_ADD_FK_CONST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLE_CONSTRAINT_OPS",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TABLE_CONSTRAINT_OPS ::= Unique A_ADD_OP_CONST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLE_CONSTRAINT_OPS",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TABLE_CONSTRAINT_OPS ::= Primary Key A_ADD_OP_CONST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLE_CONSTRAINT_OPS",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TABLE_CONSTRAINT ::= TABLE_CONSTRAINT_OPS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLE_CONSTRAINT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TABLE_CONSTRAINT ::= Constraint Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLE_CONSTRAINT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // A_PARAM_ADD ::= COLUMN_INDEX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_PARAM_ADD",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // A_PARAM_ADD ::= T_INDEX_INIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_PARAM_ADD",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // A_PARAM_ADD ::= TABLE_CONSTRAINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_PARAM_ADD",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // A_PARAM_ADD ::= Id TABLENAME_TWO A_COLUMN_OPS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_PARAM_ADD",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // A_PARAM_INDEX_OP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_PARAM_INDEX_OP",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // A_PARAM_INDEX_OP ::= Nonclustered 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_PARAM_INDEX_OP",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // A_PARAM_INDEX ::= TABLENAME_TWO Rebuild A_PARAM_INDEX_OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_PARAM_INDEX",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BOOL_OP ::= Not Null 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_OP",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BOOL_OP ::= Null 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_OP",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // A_COLUMN_OPS ::= Collate Id BOOL_OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_COLUMN_OPS",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // A_COLUMN_OPS ::= Collate Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_COLUMN_OPS",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // A_PARAM_COLUMN ::= TABLENAME_TWO A_COLUMN_OPS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_PARAM_COLUMN",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // RESERVED ::= BIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESERVED",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // RESERVED ::= VARCHAR Parentesis_a Int Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESERVED",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RESERVED ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESERVED",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // RESERVED ::= INT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESERVED",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // COL_INDEX ::= Alter Column Id RESERVED BOOL_OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COL_INDEX",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // COL_INDEX ::= Alter Column Id RESERVED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COL_INDEX",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // COL_INDEX ::= Alter Column Add A_PARAM_ADD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COL_INDEX",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // COL_INDEX ::= Alter Column Alter Index A_PARAM_INDEX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COL_INDEX",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // COL_INDEX ::= Alter Column A_PARAM_COLUMN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COL_INDEX",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ALTER ::= Alter Database Id A_COLUMN_OPS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ALTER ::= Alter View SELECT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ALTER ::= Alter Table TABLENAME COL_INDEX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TABLENAME_TWO ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME_TWO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TABLENAME_TWO ::= Id Punto Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME_TWO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TABLENAME_TWO ::= Id Coma TABLENAME_TWO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME_TWO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TABLENAME_TWO ::= Id Punto Id Coma TABLENAME_TWO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME_TWO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TABLE_NAMES ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLE_NAMES",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TABLE_NAMES ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLE_NAMES",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TABLE_NAMES ::= Coma Id TABLE_NAMES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLE_NAMES",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INDEX_SIN_ON ::= TABLENAME Coma INDEX_SIN_ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INDEX_SIN_ON",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INDEX_SIN_ON ::= TABLENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INDEX_SIN_ON",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INDEX_ON ::= On TABLENAME Coma INDEX_ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INDEX_ON",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INDEX_ON ::= On TABLENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INDEX_ON",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // I_STATEMENT ::= INDEX_SIN_ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("I_STATEMENT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // I_STATEMENT ::= INDEX_ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("I_STATEMENT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IF ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IF ::= If Exists 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DROP ::= Drop View IF TABLENAME_TWO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DROP",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DROP ::= Drop Index IF I_STATEMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DROP",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DROP ::= Drop User Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DROP",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DROP ::= Drop Database Id TABLE_NAMES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DROP",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DROP ::= Drop Table TABLENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DROP",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TABLENAME ::= Id Punto Id Punto Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TABLENAME ::= Id Punto Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TABLENAME ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TRUNCATE ::= Truncate Table TABLENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRUNCATE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DDL ::= TRUNCATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DDL ::= ALTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DDL ::= CREATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DDL ::= DROP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= TSQL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= TCL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DDL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= DML 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= SENTENCIA Go 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIA Punto_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

