
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Oct 31 12:46:14 CST 2019
//----------------------------------------------------

package lexCode;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Oct 31 12:46:14 CST 2019
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\257\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\016\005\000\002" +
    "\021\003\000\002\021\005\000\002\021\007\000\002\015" +
    "\005\000\002\015\006\000\002\015\005\000\002\015\006" +
    "\000\002\015\006\000\002\036\004\000\002\036\002\000" +
    "\002\035\003\000\002\035\003\000\002\032\004\000\002" +
    "\032\006\000\002\033\003\000\002\033\005\000\002\022" +
    "\005\000\002\022\003\000\002\022\002\000\002\037\007" +
    "\000\002\037\005\000\002\037\005\000\002\037\003\000" +
    "\002\020\006\000\002\020\005\000\002\020\006\000\002" +
    "\057\005\000\002\057\007\000\002\057\006\000\002\057" +
    "\006\000\002\057\007\000\002\061\003\000\002\061\003" +
    "\000\002\061\006\000\002\061\003\000\002\060\004\000" +
    "\002\042\004\000\002\042\005\000\002\043\003\000\002" +
    "\043\004\000\002\040\005\000\002\044\003\000\002\044" +
    "\002\000\002\041\005\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\045\004\000\002\045\003\000" +
    "\002\046\005\000\002\046\004\000\002\046\005\000\002" +
    "\050\006\000\002\051\006\000\002\051\006\000\002\051" +
    "\005\000\002\051\004\000\002\051\004\000\002\051\003" +
    "\000\002\047\012\000\002\052\005\000\002\052\003\000" +
    "\002\053\005\000\002\054\007\000\002\054\005\000\002" +
    "\055\004\000\002\055\002\000\002\056\004\000\002\056" +
    "\005\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\062\004\000" +
    "\002\067\003\000\002\067\003\000\002\063\005\000\002" +
    "\070\003\000\002\070\004\000\002\070\002\000\002\064" +
    "\005\000\002\065\005\000\002\065\006\000\002\066\005" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\013\014\000\002\071\005\000\002" +
    "\071\003\000\002\072\005\000\002\072\005\000\002\072" +
    "\005\000\002\072\005\000\002\072\003\000\002\072\003" +
    "\000\002\072\003\000\002\072\003\000\002\010\004\000" +
    "\002\073\004\000\002\073\004\000\002\073\003\000\002" +
    "\074\007\000\002\074\003\000\002\075\004\000\002\075" +
    "\003\000\002\076\005\000\002\076\006\000\002\076\010" +
    "\000\002\076\004\000\002\076\005\000\002\076\007\000" +
    "\002\076\006\000\002\076\005\000\002\077\004\000\002" +
    "\077\007\000\002\077\002\000\002\101\004\000\002\101" +
    "\003\000\002\100\006\000\002\100\006\000\002\100\006" +
    "\000\002\100\006\000\002\100\006\000\002\100\006\000" +
    "\002\103\006\000\002\103\005\000\002\103\002\000\002" +
    "\107\005\000\002\107\002\000\002\105\005\000\002\105" +
    "\005\000\002\105\005\000\002\105\006\000\002\105\005" +
    "\000\002\105\006\000\002\105\006\000\002\105\003\000" +
    "\002\106\005\000\002\106\004\000\002\104\007\000\002" +
    "\107\004\000\002\120\005\000\002\111\005\000\002\112" +
    "\005\000\002\121\003\000\002\121\003\000\002\121\003" +
    "\000\002\121\003\000\002\121\003\000\002\116\003\000" +
    "\002\116\003\000\002\113\006\000\002\113\006\000\002" +
    "\113\003\000\002\115\003\000\002\115\002\000\002\114" +
    "\006\000\002\114\002\000\002\117\003\000\002\117\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0157\000\024\004\005\024\026\034\015\061\010\063" +
    "\033\064\004\065\016\071\036\074\024\001\002\000\006" +
    "\066\077\067\076\001\002\000\004\031\u0154\001\002\000" +
    "\006\005\uff9f\022\uff9f\001\002\000\006\005\ufffd\022\ufffd" +
    "\001\002\000\030\004\005\024\026\034\015\061\010\063" +
    "\033\064\004\065\016\066\077\067\076\071\036\074\024" +
    "\001\002\000\006\005\ufff7\022\ufff7\001\002\000\006\005" +
    "\ufffe\022\ufffe\001\002\000\006\005\u014f\022\u0150\001\002" +
    "\000\006\005\uffac\022\uffac\001\002\000\010\025\363\027" +
    "\364\031\362\001\002\000\006\066\077\067\076\001\002" +
    "\000\006\005\ufffb\022\ufffb\001\002\000\006\005\uffad\022" +
    "\uffad\001\002\000\006\005\uffae\022\uffae\001\002\000\006" +
    "\005\uffaf\022\uffaf\001\002\000\006\005\ufff9\022\ufff9\001" +
    "\002\000\030\006\152\075\164\076\153\077\162\101\166" +
    "\102\150\105\154\106\157\107\165\110\155\111\160\001" +
    "\002\000\006\005\uffa0\022\uffa0\001\002\000\014\025\106" +
    "\026\110\027\107\030\111\031\105\001\002\000\006\005" +
    "\ufff8\022\ufff8\001\002\000\006\005\ufffc\022\ufffc\001\002" +
    "\000\006\005\ufffa\022\ufffa\001\002\000\006\005\uffb0\022" +
    "\uffb0\001\002\000\006\066\077\067\076\001\002\000\006" +
    "\005\uff9e\022\uff9e\001\002\000\006\005\uff9d\022\uff9d\001" +
    "\002\000\004\072\041\001\002\000\004\002\040\001\002" +
    "\000\004\002\001\001\002\000\004\006\042\001\002\000" +
    "\040\005\ufff5\006\ufff5\013\072\021\ufff5\022\ufff5\032\ufff5" +
    "\034\ufff5\041\ufff5\114\ufff5\115\ufff5\116\ufff5\117\ufff5\120" +
    "\ufff5\121\ufff5\122\ufff5\001\002\000\004\041\044\001\002" +
    "\000\004\006\045\001\002\000\006\021\070\042\uff9a\001" +
    "\002\000\004\042\047\001\002\000\004\073\050\001\002" +
    "\000\004\041\051\001\002\000\012\006\053\007\056\010" +
    "\055\012\054\001\002\000\004\042\067\001\002\000\006" +
    "\021\065\042\uff95\001\002\000\006\021\063\042\uff94\001" +
    "\002\000\006\021\061\042\uff92\001\002\000\006\021\057" +
    "\042\uff93\001\002\000\012\006\053\007\056\010\055\012" +
    "\054\001\002\000\004\042\uff97\001\002\000\012\006\053" +
    "\007\056\010\055\012\054\001\002\000\004\042\uff96\001" +
    "\002\000\012\006\053\007\056\010\055\012\054\001\002" +
    "\000\004\042\uff98\001\002\000\012\006\053\007\056\010" +
    "\055\012\054\001\002\000\004\042\uff99\001\002\000\006" +
    "\005\uff9c\022\uff9c\001\002\000\004\006\045\001\002\000" +
    "\004\042\uff9b\001\002\000\004\006\073\001\002\000\040" +
    "\005\ufff4\006\ufff4\013\074\021\ufff4\022\ufff4\032\ufff4\034" +
    "\ufff4\041\ufff4\114\ufff4\115\ufff4\116\ufff4\117\ufff4\120\ufff4" +
    "\121\ufff4\122\ufff4\001\002\000\004\006\075\001\002\000" +
    "\036\005\ufff3\006\ufff3\021\ufff3\022\ufff3\032\ufff3\034\ufff3" +
    "\041\ufff3\114\ufff3\115\ufff3\116\ufff3\117\ufff3\120\ufff3\121" +
    "\ufff3\122\ufff3\001\002\000\012\005\uffa9\006\uffa9\022\uffa9" +
    "\070\uffa9\001\002\000\012\005\uffaa\006\uffaa\022\uffaa\070" +
    "\uffaa\001\002\000\012\005\uffa5\006\102\022\uffa5\070\103" +
    "\001\002\000\006\005\uffa8\022\uffa8\001\002\000\006\005" +
    "\uffa7\022\uffa7\001\002\000\004\006\104\001\002\000\006" +
    "\005\uffa6\022\uffa6\001\002\000\004\006\042\001\002\000" +
    "\004\006\141\001\002\000\006\006\uffec\014\114\001\002" +
    "\000\010\006\uffec\014\114\032\uffec\001\002\000\004\006" +
    "\112\001\002\000\006\005\ufff0\022\ufff0\001\002\000\006" +
    "\006\042\032\120\001\002\000\004\015\115\001\002\000" +
    "\006\006\uffed\032\uffed\001\002\000\010\005\uffe7\021\126" +
    "\022\uffe7\001\002\000\006\005\uffef\022\uffef\001\002\000" +
    "\004\006\042\001\002\000\006\005\uffeb\022\uffeb\001\002" +
    "\000\006\005\uffea\022\uffea\001\002\000\010\005\uffe9\021" +
    "\124\022\uffe9\001\002\000\004\032\120\001\002\000\006" +
    "\005\uffe8\022\uffe8\001\002\000\004\006\042\001\002\000" +
    "\006\005\uffe6\022\uffe6\001\002\000\004\006\131\001\002" +
    "\000\026\005\uffdf\013\134\021\133\022\uffdf\036\uffdf\037" +
    "\uffdf\042\uffdf\044\uffdf\045\uffdf\124\uffdf\001\002\000\006" +
    "\005\uffee\022\uffee\001\002\000\004\006\131\001\002\000" +
    "\004\006\135\001\002\000\024\005\uffe0\021\136\022\uffe0" +
    "\036\uffe0\037\uffe0\042\uffe0\044\uffe0\045\uffe0\124\uffe0\001" +
    "\002\000\004\006\131\001\002\000\022\005\uffe2\022\uffe2" +
    "\036\uffe2\037\uffe2\042\uffe2\044\uffe2\045\uffe2\124\uffe2\001" +
    "\002\000\022\005\uffe1\022\uffe1\036\uffe1\037\uffe1\042\uffe1" +
    "\044\uffe1\045\uffe1\124\uffe1\001\002\000\012\005\uffe3\006" +
    "\142\021\143\022\uffe3\001\002\000\006\005\uffe4\022\uffe4" +
    "\001\002\000\004\006\145\001\002\000\006\005\ufff1\022" +
    "\ufff1\001\002\000\012\005\uffe3\006\142\021\143\022\uffe3" +
    "\001\002\000\006\005\uffe5\022\uffe5\001\002\000\006\005" +
    "\ufff2\022\ufff2\001\002\000\024\006\152\075\164\076\153" +
    "\077\162\105\154\106\157\107\165\110\155\111\160\001" +
    "\002\000\006\005\uff8c\022\uff8c\001\002\000\016\005\uff7f" +
    "\013\345\021\uff7f\022\uff7f\100\170\112\uff7f\001\002\000" +
    "\020\006\152\077\162\105\154\106\157\107\165\110\155" +
    "\111\160\001\002\000\004\041\337\001\002\000\004\041" +
    "\334\001\002\000\006\005\uff8a\022\uff8a\001\002\000\004" +
    "\041\331\001\002\000\004\041\326\001\002\000\006\005" +
    "\uff91\022\uff91\001\002\000\012\005\uff74\021\323\022\uff74" +
    "\112\174\001\002\000\006\005\uff8e\022\uff8e\001\002\000" +
    "\004\041\317\001\002\000\004\041\314\001\002\000\024" +
    "\006\152\075\164\076\153\077\162\105\154\106\157\107" +
    "\165\110\155\111\160\001\002\000\014\005\uff7f\021\uff7f" +
    "\022\uff7f\100\170\112\uff7f\001\002\000\006\006\304\103" +
    "\305\001\002\000\012\005\uff74\021\172\022\uff74\112\174" +
    "\001\002\000\020\006\152\077\162\105\154\106\157\107" +
    "\165\110\155\111\160\001\002\000\006\005\uff82\022\uff82" +
    "\001\002\000\004\006\042\001\002\000\024\005\uff72\006" +
    "\177\022\uff72\114\205\115\204\116\201\117\202\120\206" +
    "\122\203\001\002\000\006\005\uff75\022\uff75\001\002\000" +
    "\022\005\uff72\022\uff72\114\205\115\204\116\201\117\202" +
    "\120\206\122\203\001\002\000\006\005\uff6a\022\uff6a\001" +
    "\002\000\006\113\275\115\276\001\002\000\006\113\270" +
    "\115\271\001\002\000\004\123\230\001\002\000\004\113" +
    "\225\001\002\000\004\113\223\001\002\000\004\115\207" +
    "\001\002\000\004\113\210\001\002\000\004\006\042\001" +
    "\002\000\006\006\213\032\215\001\002\000\006\005\uff6b" +
    "\022\uff6b\001\002\000\004\032\215\001\002\000\006\005" +
    "\uff68\022\uff68\001\002\000\004\006\042\001\002\000\004" +
    "\121\217\001\002\000\004\006\042\001\002\000\022\005" +
    "\uff72\022\uff72\114\205\115\204\116\201\117\202\120\206" +
    "\122\203\001\002\000\006\005\uff67\022\uff67\001\002\000" +
    "\006\005\uff69\022\uff69\001\002\000\004\006\042\001\002" +
    "\000\006\005\uff71\022\uff71\001\002\000\004\006\042\001" +
    "\002\000\006\005\uff70\022\uff70\001\002\000\006\005\uff66" +
    "\022\uff66\001\002\000\004\006\131\001\002\000\010\005" +
    "\uff73\022\uff73\124\233\001\002\000\006\005\uff65\022\uff65" +
    "\001\002\000\014\105\154\106\157\107\165\110\155\111" +
    "\160\001\002\000\014\121\243\125\240\126\236\127\241" +
    "\130\242\001\002\000\006\005\uff64\022\uff64\001\002\000" +
    "\006\007\uff61\010\uff61\001\002\000\006\007\246\010\245" +
    "\001\002\000\006\007\uff62\010\uff62\001\002\000\006\007" +
    "\uff5f\010\uff5f\001\002\000\006\007\uff5e\010\uff5e\001\002" +
    "\000\006\007\uff60\010\uff60\001\002\000\014\005\uff55\022" +
    "\uff55\131\250\132\253\133\252\001\002\000\016\005\uff5c" +
    "\022\uff5c\042\uff5c\131\uff5c\132\uff5c\133\uff5c\001\002\000" +
    "\016\005\uff5d\022\uff5d\042\uff5d\131\uff5d\132\uff5d\133\uff5d" +
    "\001\002\000\006\005\uff59\022\uff59\001\002\000\016\052" +
    "\254\105\uff57\106\uff57\107\uff57\110\uff57\111\uff57\001\002" +
    "\000\006\005\uff63\022\uff63\001\002\000\004\123\260\001" +
    "\002\000\016\052\254\105\uff57\106\uff57\107\uff57\110\uff57" +
    "\111\uff57\001\002\000\014\105\uff58\106\uff58\107\uff58\110" +
    "\uff58\111\uff58\001\002\000\014\105\154\106\157\107\165" +
    "\110\155\111\160\001\002\000\014\121\243\125\240\126" +
    "\236\127\241\130\242\001\002\000\006\005\uff5a\022\uff5a" +
    "\001\002\000\004\006\131\001\002\000\006\044\262\045" +
    "\263\001\002\000\006\005\uff54\022\uff54\001\002\000\006" +
    "\005\uff53\022\uff53\001\002\000\006\005\uff56\022\uff56\001" +
    "\002\000\014\105\154\106\157\107\165\110\155\111\160" +
    "\001\002\000\014\121\243\125\240\126\236\127\241\130" +
    "\242\001\002\000\006\005\uff5b\022\uff5b\001\002\000\004" +
    "\006\042\001\002\000\004\113\272\001\002\000\004\006" +
    "\042\001\002\000\006\005\uff6c\022\uff6c\001\002\000\006" +
    "\005\uff6d\022\uff6d\001\002\000\004\006\042\001\002\000" +
    "\004\113\277\001\002\000\004\006\042\001\002\000\006" +
    "\005\uff6e\022\uff6e\001\002\000\006\005\uff6f\022\uff6f\001" +
    "\002\000\006\005\uff76\022\uff76\001\002\000\006\005\uff83" +
    "\022\uff83\001\002\000\012\005\uff81\021\uff81\022\uff81\112" +
    "\uff81\001\002\000\004\006\306\001\002\000\004\006\307" +
    "\001\002\000\006\006\307\104\uff7d\001\002\000\004\104" +
    "\311\001\002\000\012\005\uff80\021\uff80\022\uff80\112\uff80" +
    "\001\002\000\004\104\uff7e\001\002\000\006\005\uff90\022" +
    "\uff90\001\002\000\004\006\131\001\002\000\004\042\316" +
    "\001\002\000\026\005\uff78\021\uff78\022\uff78\100\uff78\112" +
    "\uff78\121\uff78\125\uff78\126\uff78\127\uff78\130\uff78\001\002" +
    "\000\006\007\246\010\245\001\002\000\004\042\321\001" +
    "\002\000\022\006\152\076\153\077\162\105\154\106\157" +
    "\107\165\110\155\111\160\001\002\000\006\005\uff8d\022" +
    "\uff8d\001\002\000\020\006\152\077\162\105\154\106\157" +
    "\107\165\110\155\111\160\001\002\000\006\005\uff86\022" +
    "\uff86\001\002\000\006\005\uff89\022\uff89\001\002\000\004" +
    "\006\131\001\002\000\004\042\330\001\002\000\026\005" +
    "\uff7a\021\uff7a\022\uff7a\100\uff7a\112\uff7a\121\uff7a\125\uff7a" +
    "\126\uff7a\127\uff7a\130\uff7a\001\002\000\004\006\131\001" +
    "\002\000\004\042\333\001\002\000\026\005\uff79\021\uff79" +
    "\022\uff79\100\uff79\112\uff79\121\uff79\125\uff79\126\uff79\127" +
    "\uff79\130\uff79\001\002\000\004\006\131\001\002\000\004" +
    "\042\336\001\002\000\026\005\uff77\021\uff77\022\uff77\100" +
    "\uff77\112\uff77\121\uff77\125\uff77\126\uff77\127\uff77\130\uff77" +
    "\001\002\000\006\007\341\077\340\001\002\000\004\042" +
    "\343\001\002\000\004\042\342\001\002\000\026\005\uff7b" +
    "\021\uff7b\022\uff7b\100\uff7b\112\uff7b\121\uff7b\125\uff7b\126" +
    "\uff7b\127\uff7b\130\uff7b\001\002\000\026\005\uff7c\021\uff7c" +
    "\022\uff7c\100\uff7c\112\uff7c\121\uff7c\125\uff7c\126\uff7c\127" +
    "\uff7c\130\uff7c\001\002\000\006\005\uff8b\022\uff8b\001\002" +
    "\000\004\006\352\001\002\000\012\005\uff74\021\347\022" +
    "\uff74\112\174\001\002\000\020\006\152\077\162\105\154" +
    "\106\157\107\165\110\155\111\160\001\002\000\006\005" +
    "\uff85\022\uff85\001\002\000\006\005\uff88\022\uff88\001\002" +
    "\000\014\005\uff7f\021\uff7f\022\uff7f\100\170\112\uff7f\001" +
    "\002\000\012\005\uff74\021\354\022\uff74\112\174\001\002" +
    "\000\020\006\152\077\162\105\154\106\157\107\165\110" +
    "\155\111\160\001\002\000\006\005\uff84\022\uff84\001\002" +
    "\000\006\005\uff87\022\uff87\001\002\000\006\005\uff8f\022" +
    "\uff8f\001\002\000\012\005\uffa5\006\102\022\uffa5\070\103" +
    "\001\002\000\006\005\uffa4\022\uffa4\001\002\000\004\006" +
    "\042\001\002\000\004\006\366\001\002\000\004\074\024" +
    "\001\002\000\006\005\uffdd\022\uffdd\001\002\000\004\036" +
    "\370\001\002\000\006\005\uffdc\022\uffdc\001\002\000\004" +
    "\006\371\001\002\000\012\005\uffd1\022\uffd1\051\374\052" +
    "\372\001\002\000\004\051\375\001\002\000\006\005\uffd0" +
    "\022\uffd0\001\002\000\006\005\uffcf\022\uffcf\001\002\000" +
    "\006\005\uffce\022\uffce\001\002\000\004\034\u0100\001\002" +
    "\000\006\005\uffde\022\uffde\001\002\000\004\035\u0101\001" +
    "\002\000\010\006\u0103\016\u0104\034\u0105\001\002\000\006" +
    "\005\uffdb\022\uffdb\001\002\000\020\013\134\021\133\036" +
    "\uffdf\054\u014a\055\u0147\056\u0146\057\u0148\001\002\000\016" +
    "\006\u010f\017\u0116\026\u0110\040\u0117\046\u0118\053\u0113\001" +
    "\002\000\004\026\u0108\001\002\000\004\036\370\001\002" +
    "\000\006\005\uffd2\022\uffd2\001\002\000\004\006\131\001" +
    "\002\000\006\005\uffda\022\uffda\001\002\000\004\037\u010b" +
    "\001\002\000\010\005\uffcb\022\uffcb\043\u010d\001\002\000" +
    "\006\005\uffcd\022\uffcd\001\002\000\006\005\uffcc\022\uffcc" +
    "\001\002\000\006\005\uffc8\022\uffc8\001\002\000\004\006" +
    "\131\001\002\000\006\006\u0138\033\u0137\001\002\000\006" +
    "\005\uffd9\022\uffd9\001\002\000\006\005\uffc7\022\uffc7\001" +
    "\002\000\004\043\u0128\001\002\000\006\005\uffc5\022\uffc5" +
    "\001\002\000\006\005\uffc9\022\uffc9\001\002\000\004\047" +
    "\u0127\001\002\000\004\006\u0126\001\002\000\004\047\u0119" +
    "\001\002\000\004\041\u011a\001\002\000\004\006\u011c\001" +
    "\002\000\006\005\uffc2\022\uffc2\001\002\000\006\021\u0124" +
    "\042\uffb8\001\002\000\004\042\u011e\001\002\000\004\050" +
    "\u011f\001\002\000\004\006\042\001\002\000\004\041\u0121" +
    "\001\002\000\004\006\u011c\001\002\000\004\042\u0123\001" +
    "\002\000\006\005\uffba\022\uffba\001\002\000\004\006\u011c" +
    "\001\002\000\004\042\uffb9\001\002\000\006\005\uffc6\022" +
    "\uffc6\001\002\000\004\043\u0128\001\002\000\004\041\u012a" +
    "\001\002\000\006\005\uffc4\022\uffc4\001\002\000\004\006" +
    "\u012b\001\002\000\012\021\u012f\042\uffbb\044\u012e\045\u0130" +
    "\001\002\000\004\042\u012d\001\002\000\006\005\uffc1\022" +
    "\uffc1\001\002\000\006\021\u0134\042\uffbd\001\002\000\004" +
    "\006\u012b\001\002\000\006\021\u0131\042\uffbc\001\002\000" +
    "\004\006\u012b\001\002\000\004\042\uffbf\001\002\000\004" +
    "\042\uffbe\001\002\000\004\006\u012b\001\002\000\004\042" +
    "\uffc0\001\002\000\006\005\uffc3\022\uffc3\001\002\000\006" +
    "\005\uffb2\022\uffb2\001\002\000\006\041\u0139\043\u013b\001" +
    "\002\000\004\006\u012b\001\002\000\006\005\uffb7\022\uffb7" +
    "\001\002\000\010\005\uffb1\022\uffb1\041\u013c\001\002\000" +
    "\004\006\u012b\001\002\000\004\042\u013e\001\002\000\010" +
    "\005\uffb3\022\uffb3\032\u013f\001\002\000\004\006\042\001" +
    "\002\000\006\005\uffb6\022\uffb6\001\002\000\006\005\uffb4" +
    "\022\uffb4\001\002\000\004\042\u0143\001\002\000\006\005" +
    "\uffb5\022\uffb5\001\002\000\004\036\370\001\002\000\006" +
    "\005\uffca\022\uffca\001\002\000\012\005\uffd3\022\uffd3\051" +
    "\uffd3\052\uffd3\001\002\000\012\005\uffd5\022\uffd5\051\uffd5" +
    "\052\uffd5\001\002\000\004\041\u014c\001\002\000\012\005" +
    "\uffd8\022\uffd8\051\374\052\372\001\002\000\012\005\uffd6" +
    "\022\uffd6\051\uffd6\052\uffd6\001\002\000\006\005\uffd7\022" +
    "\uffd7\001\002\000\004\007\u014d\001\002\000\004\042\u014e" +
    "\001\002\000\012\005\uffd4\022\uffd4\051\uffd4\052\uffd4\001" +
    "\002\000\006\002\uffff\062\uffff\001\002\000\006\002\000" +
    "\062\000\001\002\000\006\005\uffab\022\uffab\001\002\000" +
    "\004\062\u0153\001\002\000\006\005\uffa1\022\uffa1\001\002" +
    "\000\004\006\042\001\002\000\006\005\ufff6\022\ufff6\001" +
    "\002\000\006\006\u0157\070\u0158\001\002\000\006\005\uffa3" +
    "\022\uffa3\001\002\000\004\006\u0159\001\002\000\006\005" +
    "\uffa2\022\uffa2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0157\000\050\002\036\003\012\004\011\005\006\006" +
    "\027\007\016\010\005\011\034\013\024\014\033\015\030" +
    "\016\010\017\022\020\026\062\031\063\021\064\020\065" +
    "\017\066\013\001\001\000\004\067\u0155\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\002" +
    "\u0151\003\012\004\011\005\006\006\027\007\016\010\005" +
    "\011\034\013\024\014\033\015\030\016\010\017\022\020" +
    "\026\062\031\063\021\064\020\065\017\066\013\067\u0150" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\067\357" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\073\160" +
    "\074\162\075\150\076\155\100\166\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\067\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\071\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\072\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\072\057\001\001\000\002" +
    "\001\001\000\004\072\061\001\001\000\002\001\001\000" +
    "\004\072\063\001\001\000\002\001\001\000\004\072\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\071" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\070\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\146\001\001\000\002\001\001\000\004" +
    "\036\127\001\001\000\004\036\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\021\115\032\120\033\121" +
    "\035\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\124\001\001\000\002\001\001\000\006\021\115" +
    "\033\126\001\001\000\002\001\001\000\004\037\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\074\356\075\150\076\155\100" +
    "\166\001\001\000\002\001\001\000\004\077\345\001\001" +
    "\000\006\076\343\100\166\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\103\323\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\074\312\075\150\076\155\100\166\001\001\000\004\077" +
    "\170\001\001\000\002\001\001\000\004\103\172\001\001" +
    "\000\006\076\302\100\166\001\001\000\002\001\001\000" +
    "\004\021\174\001\001\000\006\105\175\107\177\001\001" +
    "\000\002\001\001\000\006\105\301\107\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\120\226\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\210\106\211" +
    "\001\001\000\004\104\213\001\001\000\002\001\001\000" +
    "\004\104\221\001\001\000\002\001\001\000\004\021\215" +
    "\001\001\000\002\001\001\000\004\021\217\001\001\000" +
    "\006\105\220\107\177\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\210\106\223\001\001\000\002\001" +
    "\001\000\006\021\210\106\225\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\230\001\001\000\004\111" +
    "\231\001\001\000\002\001\001\000\004\100\233\001\001" +
    "\000\006\112\234\121\236\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\116\243\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\113\250\114\246\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\115\264\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\115\254\001\001" +
    "\000\002\001\001\000\004\100\255\001\001\000\006\112" +
    "\256\121\236\001\001\000\002\001\001\000\004\037\260" +
    "\001\001\000\004\117\263\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\100\265\001\001" +
    "\000\006\112\266\121\236\001\001\000\002\001\001\000" +
    "\006\021\210\106\273\001\001\000\002\001\001\000\006" +
    "\021\210\106\272\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\210\106\300\001\001\000\002\001\001" +
    "\000\006\021\210\106\277\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\101\307\001\001\000" +
    "\004\101\311\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\314\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\116\317" +
    "\001\001\000\002\001\001\000\010\075\321\076\155\100" +
    "\166\001\001\000\002\001\001\000\006\076\324\100\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\326\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\331\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\334\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\103\347\001\001\000\006\076\350\100" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\077\352\001\001\000\004\103\354\001\001\000\006\076" +
    "\355\100\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\070\360\001\001\000\002\001" +
    "\001\000\004\021\375\001\001\000\002\001\001\000\004" +
    "\010\364\001\001\000\002\001\001\000\004\042\366\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\372" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\057\376\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\037\u0105\060\u0101\001" +
    "\001\000\002\001\001\000\004\061\u0148\001\001\000\014" +
    "\041\u0110\045\u0114\046\u0113\053\u010d\056\u0111\001\001\000" +
    "\002\001\001\000\004\042\u0106\001\001\000\002\001\001" +
    "\000\006\037\u0109\040\u0108\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\u010b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\u0143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\u0135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\u011a\001\001\000\004\052\u011c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\u011f\001\001\000\002\001\001\000" +
    "\004\052\u0121\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\u0124\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\u0128\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\u012b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\u0132\001\001\000\002\001\001\000\004\051\u0131\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\u0134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\u0139\001\001\000\004\051\u0141\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\u013c\001" +
    "\001\000\002\001\001\000\004\055\u013f\001\001\000\004" +
    "\021\u0140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\u0144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\u014a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\u0154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getSymbol(){
    return this.s;
    }    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // ORDER_TYPE ::= Desc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ORDER_TYPE",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // ORDER_TYPE ::= Asc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ORDER_TYPE",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // ORDER ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ORDER",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // ORDER ::= Order By TABLENAME_TWO ORDER_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ORDER",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // NOT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOT",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // NOT ::= Not 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOT",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // REP_STATEMENT ::= ORDER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REP_STATEMENT",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // REP_STATEMENT ::= Or NOT METHOD_NAME EXPR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REP_STATEMENT",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // REP_STATEMENT ::= And NOT METHOD_NAME EXPR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REP_STATEMENT",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // NUM_TYPE ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUM_TYPE",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // NUM_TYPE ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUM_TYPE",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // CONDITION ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDITION",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // CONDITION ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDITION",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // CONDITION ::= Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDITION",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // CONDITION ::= MenorQue 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDITION",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // CONDITION ::= MayorQue 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDITION",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // EXPR ::= CONDITION NUM_TYPE REP_STATEMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // HAVING ::= Having METHOD_NAME EXPR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("HAVING",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // BY ::= By TABLENAME_TWO HAVING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BY",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // GROUP ::= Group BY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GROUP",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ON ::= On TABLENAME Igual TABLENAME JOINS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ON",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // UNION ::= TABLENAME ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UNION",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // UNION ::= TABLENAME Id ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UNION",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // JOINS ::= GROUP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // JOINS ::= Full Outer Join UNION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // JOINS ::= Right Outer Join UNION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // JOINS ::= Right Join UNION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // JOINS ::= Left Outer Join UNION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // JOINS ::= Left Join UNION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // JOINS ::= Outer Join UNION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // JOINS ::= Inner Join UNION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // GROUP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GROUP",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // GROUP ::= Group By TABLENAME_TWO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GROUP",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // FROM ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FROM",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // FROM ::= From TABLENAME JOINS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FROM",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // FROM ::= From TABLENAME Id JOINS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FROM",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // METHOD_NAME ::= Min Parentesis_a TABLENAME_TWO Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // METHOD_NAME ::= Max Parentesis_a TABLENAME_TWO Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // METHOD_NAME ::= Avg Parentesis_a TABLENAME_TWO Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // METHOD_NAME ::= Sum Parentesis_a TABLENAME_TWO Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // METHOD_NAME ::= Count Parentesis_a Int Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // METHOD_NAME ::= Count Parentesis_a Asterisco Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // REP ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REP",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // REP ::= Id REP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REP",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // AS_STATEMENT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AS_STATEMENT",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // AS_STATEMENT ::= As Corchete_a Id REP Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AS_STATEMENT",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // AS_STATEMENT ::= As Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AS_STATEMENT",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // BODY ::= METHOD_NAME AS_STATEMENT FROM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // BODY ::= METHOD_NAME AS_STATEMENT Coma BODY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // BODY ::= Id Punto Id AS_STATEMENT FROM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // BODY ::= Id AS_STATEMENT FROM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // BODY ::= Asterisco FROM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // BODY ::= Id Punto Id AS_STATEMENT Coma BODY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // BODY ::= Id AS_STATEMENT Coma BODY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // BODY ::= Asterisco Coma BODY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PERCENT ::= BODY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PERCENT",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PERCENT ::= Percent BODY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PERCENT",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EX_TYPE ::= PERCENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EX_TYPE",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EX_TYPE ::= Top Parentesis_a NUM_TYPE Parentesis_c PERCENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EX_TYPE",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SELECT_TYPE ::= EX_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECT_TYPE",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SELECT_TYPE ::= Distinct EX_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECT_TYPE",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SELECT_TYPE ::= All EX_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECT_TYPE",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SELECT ::= Select SELECT_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // VALUES ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // VALUES ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // VALUES ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // VALUES ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // VALUES ::= Float Coma VALUES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VALUES ::= Int Coma VALUES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VALUES ::= String Coma VALUES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VALUES ::= Id Coma VALUES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // INSERT_COLUMN_OP ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSERT_COLUMN_OP",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // INSERT_COLUMN_OP ::= Id Coma INSERT_COLUMN_OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSERT_COLUMN_OP",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // INSERT ::= Insert Into TABLENAME Parentesis_a INSERT_COLUMN_OP Parentesis_c Values Parentesis_a VALUES Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSERT",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DML ::= DELETE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DML ::= UPDATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DML ::= SELECT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DML ::= INSERT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // END ::= Begin INICIO End 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("END",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SAVEPOINT ::= Save TRANS_OP Arroba Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SAVEPOINT",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SAVEPOINT ::= Save TRANS_OP Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SAVEPOINT",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ROLLBACK ::= Rollback TRANS_OP TRANS_NAME_OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ROLLBACK",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TRANS_NAME_OP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRANS_NAME_OP",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TRANS_NAME_OP ::= Arroba Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRANS_NAME_OP",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TRANS_NAME_OP ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRANS_NAME_OP",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // COMMIT ::= Commit TRANS_OP TRANS_NAME_OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMMIT",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TRANS_OP ::= Transaction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRANS_OP",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TRANS_OP ::= Tran 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRANS_OP",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // BEGIN_TRANSACTION ::= Begin TRANS_OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BEGIN_TRANSACTION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TCL ::= END 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // TCL ::= SAVEPOINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // TCL ::= ROLLBACK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // TCL ::= COMMIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TCL ::= BEGIN_TRANSACTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // COLUMN_INDEX ::= Index Id Nonclustered 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLUMN_INDEX",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // COLUMN_INDEX ::= Index Of 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLUMN_INDEX",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // T_INDEX_OP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T_INDEX_OP",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // T_INDEX_OP ::= On TABLENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T_INDEX_OP",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // T_INDEX ::= Parentesis_a OPS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T_INDEX",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // T_INDEX ::= Nonclustered Parentesis_a OPS Parentesis_c T_INDEX_OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T_INDEX",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // T_INDEX_INIT ::= Index Id T_INDEX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T_INDEX_INIT",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP_FK ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_FK",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP_FK ::= Id Coma OP_FK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_FK",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // A_ADD_FK_CONST ::= Parentesis_a OP_FK Parentesis_c References TABLENAME Parentesis_a OP_FK Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_ADD_FK_CONST",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPS ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPS",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPS ::= Id Desc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPS",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPS ::= Id Asc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPS",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPS ::= Id Coma OPS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPS",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPS ::= Id Desc Coma OPS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPS",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPS ::= Id Asc Coma OPS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPS",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // A_ADD_OP_CONST ::= Nonclustered Parentesis_a OPS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_ADD_OP_CONST",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TABLE_CONSTRAINT_OPS ::= Foreign Key A_ADD_FK_CONST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLE_CONSTRAINT_OPS",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TABLE_CONSTRAINT_OPS ::= Unique A_ADD_OP_CONST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLE_CONSTRAINT_OPS",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TABLE_CONSTRAINT_OPS ::= Primary Key A_ADD_OP_CONST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLE_CONSTRAINT_OPS",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TABLE_CONSTRAINT ::= TABLE_CONSTRAINT_OPS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLE_CONSTRAINT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TABLE_CONSTRAINT ::= Constraint Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLE_CONSTRAINT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // A_PARAM_ADD ::= COLUMN_INDEX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_PARAM_ADD",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // A_PARAM_ADD ::= T_INDEX_INIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_PARAM_ADD",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // A_PARAM_ADD ::= TABLE_CONSTRAINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_PARAM_ADD",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // A_PARAM_ADD ::= Id TABLENAME_TWO A_COLUMN_OPS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_PARAM_ADD",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // A_PARAM_INDEX_OP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_PARAM_INDEX_OP",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // A_PARAM_INDEX_OP ::= Nonclustered 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_PARAM_INDEX_OP",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // A_PARAM_INDEX ::= TABLENAME_TWO Rebuild A_PARAM_INDEX_OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_PARAM_INDEX",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BOOL_OP ::= Not Null 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_OP",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BOOL_OP ::= Null 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_OP",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // A_COLUMN_OPS ::= Collate Id BOOL_OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_COLUMN_OPS",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // A_COLUMN_OPS ::= Collate Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_COLUMN_OPS",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // A_PARAM_COLUMN ::= TABLENAME_TWO A_COLUMN_OPS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_PARAM_COLUMN",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // RESERVED ::= BIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESERVED",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // RESERVED ::= VARCHAR Parentesis_a Int Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESERVED",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RESERVED ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESERVED",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // RESERVED ::= INT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESERVED",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // COL_INDEX ::= Alter Column Id RESERVED BOOL_OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COL_INDEX",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // COL_INDEX ::= Alter Column Id RESERVED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COL_INDEX",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // COL_INDEX ::= Alter Column Add A_PARAM_ADD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COL_INDEX",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // COL_INDEX ::= Alter Column Alter Index A_PARAM_INDEX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COL_INDEX",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // COL_INDEX ::= Alter Column A_PARAM_COLUMN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COL_INDEX",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ALTER ::= Alter Database Id A_COLUMN_OPS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ALTER ::= Alter View SELECT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ALTER ::= Alter Table TABLENAME COL_INDEX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TABLENAME_TWO ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME_TWO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TABLENAME_TWO ::= Id Punto Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME_TWO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TABLENAME_TWO ::= Id Coma TABLENAME_TWO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME_TWO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TABLENAME_TWO ::= Id Punto Id Coma TABLENAME_TWO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME_TWO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TABLE_NAMES ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLE_NAMES",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TABLE_NAMES ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLE_NAMES",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TABLE_NAMES ::= Coma Id TABLE_NAMES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLE_NAMES",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INDEX_SIN_ON ::= TABLENAME Coma INDEX_SIN_ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INDEX_SIN_ON",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INDEX_SIN_ON ::= TABLENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INDEX_SIN_ON",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INDEX_ON ::= On TABLENAME Coma INDEX_ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INDEX_ON",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INDEX_ON ::= On TABLENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INDEX_ON",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // I_STATEMENT ::= INDEX_SIN_ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("I_STATEMENT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // I_STATEMENT ::= INDEX_ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("I_STATEMENT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IF ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IF ::= If Exists 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DROP ::= Drop View IF TABLENAME_TWO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DROP",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DROP ::= Drop Index IF I_STATEMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DROP",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DROP ::= Drop User Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DROP",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DROP ::= Drop Database Id TABLE_NAMES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DROP",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DROP ::= Drop Table TABLENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DROP",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TABLENAME ::= Id Punto Id Punto Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TABLENAME ::= Id Punto Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TABLENAME ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TRUNCATE ::= Truncate Table TABLENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRUNCATE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DDL ::= TRUNCATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DDL ::= ALTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DDL ::= CREATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DDL ::= DROP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= TSQL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= TCL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DDL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= DML 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= SENTENCIA Go 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIA Punto_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

