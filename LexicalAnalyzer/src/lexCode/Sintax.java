
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Oct 31 18:49:55 CST 2019
//----------------------------------------------------

package lexCode;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Oct 31 18:49:55 CST 2019
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\355\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\017\005\000\002" +
    "\146\007\000\002\147\005\000\002\147\002\000\002\150" +
    "\004\000\002\150\002\000\002\151\003\000\002\151\002" +
    "\000\002\152\014\000\002\152\016\000\002\145\006\000" +
    "\002\145\006\000\002\016\005\000\002\021\003\000\002" +
    "\021\005\000\002\021\007\000\002\015\005\000\002\015" +
    "\006\000\002\015\005\000\002\015\006\000\002\015\006" +
    "\000\002\036\004\000\002\036\002\000\002\035\003\000" +
    "\002\035\003\000\002\032\004\000\002\032\006\000\002" +
    "\033\003\000\002\033\005\000\002\022\005\000\002\022" +
    "\003\000\002\022\002\000\002\037\007\000\002\037\005" +
    "\000\002\037\005\000\002\037\003\000\002\020\006\000" +
    "\002\020\005\000\002\020\006\000\002\057\005\000\002" +
    "\057\007\000\002\057\006\000\002\057\006\000\002\057" +
    "\007\000\002\061\003\000\002\061\003\000\002\061\006" +
    "\000\002\061\003\000\002\060\004\000\002\042\004\000" +
    "\002\042\005\000\002\043\003\000\002\043\004\000\002" +
    "\040\005\000\002\044\003\000\002\044\002\000\002\041" +
    "\005\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\045\004\000\002\045\003\000\002\046\005\000" +
    "\002\046\004\000\002\046\005\000\002\050\006\000\002" +
    "\051\006\000\002\051\006\000\002\051\005\000\002\051" +
    "\004\000\002\051\004\000\002\051\003\000\002\047\012" +
    "\000\002\052\005\000\002\052\003\000\002\053\005\000" +
    "\002\054\007\000\002\054\005\000\002\055\004\000\002" +
    "\055\002\000\002\056\004\000\002\056\005\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\062\004\000\002\067\003\000" +
    "\002\067\003\000\002\063\005\000\002\070\003\000\002" +
    "\070\004\000\002\070\002\000\002\064\005\000\002\065" +
    "\005\000\002\065\006\000\002\066\005\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\013\014\000\002\071\005\000\002\071\003\000\002" +
    "\072\005\000\002\072\005\000\002\072\005\000\002\072" +
    "\005\000\002\072\003\000\002\072\003\000\002\072\003" +
    "\000\002\072\003\000\002\010\004\000\002\073\004\000" +
    "\002\073\004\000\002\073\003\000\002\074\007\000\002" +
    "\074\003\000\002\075\004\000\002\075\003\000\002\076" +
    "\005\000\002\076\006\000\002\076\010\000\002\076\004" +
    "\000\002\076\005\000\002\076\007\000\002\076\006\000" +
    "\002\076\005\000\002\077\004\000\002\077\007\000\002" +
    "\077\002\000\002\101\004\000\002\101\003\000\002\100" +
    "\006\000\002\100\006\000\002\100\006\000\002\100\006" +
    "\000\002\100\006\000\002\100\006\000\002\103\006\000" +
    "\002\103\005\000\002\103\007\000\002\103\010\000\002" +
    "\132\003\000\002\132\005\000\002\132\004\000\002\132" +
    "\006\000\002\107\006\000\002\105\005\000\002\105\005" +
    "\000\002\105\005\000\002\105\006\000\002\105\005\000" +
    "\002\105\006\000\002\105\006\000\002\105\003\000\002" +
    "\105\003\000\002\105\002\000\002\106\005\000\002\106" +
    "\004\000\002\104\007\000\002\107\004\000\002\120\005" +
    "\000\002\111\005\000\002\112\005\000\002\121\003\000" +
    "\002\121\003\000\002\121\003\000\002\121\003\000\002" +
    "\121\003\000\002\116\003\000\002\116\003\000\002\113" +
    "\006\000\002\113\006\000\002\113\003\000\002\115\003" +
    "\000\002\115\002\000\002\114\006\000\002\117\003\000" +
    "\002\117\003\000\002\117\002\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\122\005\000\002\122" +
    "\005\000\002\122\005\000\002\122\005\000\002\125\006" +
    "\000\002\126\006\000\002\126\010\000\002\126\002\000" +
    "\002\127\003\000\002\127\003\000\002\127\002\000\002" +
    "\131\003\000\002\131\003\000\002\131\006\000\002\131" +
    "\003\000\002\130\003\000\002\123\010\000\002\123\010" +
    "\000\002\133\005\000\002\133\002\000\002\137\005\000" +
    "\002\137\007\000\002\135\010\000\002\135\007\000\002" +
    "\136\003\000\002\136\003\000\002\136\003\000\002\136" +
    "\003\000\002\136\004\000\002\124\007\000\002\140\004" +
    "\000\002\140\003\000\002\140\002\000\002\141\006\000" +
    "\002\142\005\000\002\142\004\000\002\142\002\000\002" +
    "\144\004\000\002\144\002\000\002\143\005\000\002\143" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01d9\000\030\004\006\024\032\034\017\057\011\061" +
    "\037\062\005\063\021\067\043\072\031\132\042\143\026" +
    "\001\002\000\006\005\uff40\022\uff40\001\002\000\006\064" +
    "\234\065\235\001\002\000\004\031\u01d6\001\002\000\006" +
    "\005\uff93\022\uff93\001\002\000\006\005\ufffd\022\ufffd\001" +
    "\002\000\034\004\006\024\032\034\017\057\011\061\037" +
    "\062\005\063\021\064\234\065\235\067\043\072\031\132" +
    "\042\143\026\001\002\000\006\005\ufff7\022\ufff7\001\002" +
    "\000\006\005\ufffe\022\ufffe\001\002\000\006\005\u01d1\022" +
    "\u01d2\001\002\000\006\005\uffa0\022\uffa0\001\002\000\006" +
    "\005\uff3e\022\uff3e\001\002\000\016\025\u016e\027\u0170\031" +
    "\u016b\133\u016f\134\u016d\140\u016c\001\002\000\006\005\uff3f" +
    "\022\uff3f\001\002\000\006\064\234\065\235\001\002\000" +
    "\006\005\ufffb\022\ufffb\001\002\000\006\005\uffa1\022\uffa1" +
    "\001\002\000\006\005\uffa2\022\uffa2\001\002\000\006\005" +
    "\uffa3\022\uffa3\001\002\000\004\006\u0155\001\002\000\006" +
    "\005\ufff9\022\ufff9\001\002\000\006\005\uff94\022\uff94\001" +
    "\002\000\030\006\301\073\313\074\302\075\312\077\315" +
    "\100\277\103\303\104\306\105\314\106\305\107\307\001" +
    "\002\000\014\025\244\026\245\027\246\030\247\031\243" +
    "\001\002\000\006\005\ufff8\022\ufff8\001\002\000\006\005" +
    "\ufffc\022\ufffc\001\002\000\006\005\ufffa\022\ufffa\001\002" +
    "\000\006\005\uffa4\022\uffa4\001\002\000\006\064\234\065" +
    "\235\001\002\000\006\005\uff91\022\uff91\001\002\000\006" +
    "\005\uff92\022\uff92\001\002\000\012\025\105\133\106\134" +
    "\104\140\103\001\002\000\004\070\046\001\002\000\004" +
    "\002\045\001\002\000\004\002\001\001\002\000\004\006" +
    "\050\001\002\000\004\041\055\001\002\000\052\005\uffe9" +
    "\006\uffe9\013\051\021\uffe9\022\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\041\uffe9\066\uffe9\076\uffe9\112\uffe9\113\uffe9\114\uffe9" +
    "\115\uffe9\116\uffe9\117\uffe9\120\uffe9\131\uffe9\146\uffe9\001" +
    "\002\000\004\006\052\001\002\000\052\005\uffe8\006\uffe8" +
    "\013\053\021\uffe8\022\uffe8\032\uffe8\033\uffe8\034\uffe8\041" +
    "\uffe8\066\uffe8\076\uffe8\112\uffe8\113\uffe8\114\uffe8\115\uffe8" +
    "\116\uffe8\117\uffe8\120\uffe8\131\uffe8\146\uffe8\001\002\000" +
    "\004\006\054\001\002\000\050\005\uffe7\006\uffe7\021\uffe7" +
    "\022\uffe7\032\uffe7\033\uffe7\034\uffe7\041\uffe7\066\uffe7\076" +
    "\uffe7\112\uffe7\113\uffe7\114\uffe7\115\uffe7\116\uffe7\117\uffe7" +
    "\120\uffe7\131\uffe7\146\uffe7\001\002\000\004\006\056\001" +
    "\002\000\006\021\101\042\uff8e\001\002\000\004\042\060" +
    "\001\002\000\004\071\061\001\002\000\004\041\062\001" +
    "\002\000\012\006\064\007\067\010\066\012\065\001\002" +
    "\000\004\042\100\001\002\000\006\021\076\042\uff89\001" +
    "\002\000\006\021\074\042\uff88\001\002\000\006\021\072" +
    "\042\uff86\001\002\000\006\021\070\042\uff87\001\002\000" +
    "\012\006\064\007\067\010\066\012\065\001\002\000\004" +
    "\042\uff8b\001\002\000\012\006\064\007\067\010\066\012" +
    "\065\001\002\000\004\042\uff8a\001\002\000\012\006\064" +
    "\007\067\010\066\012\065\001\002\000\004\042\uff8c\001" +
    "\002\000\012\006\064\007\067\010\066\012\065\001\002" +
    "\000\004\042\uff8d\001\002\000\006\005\uff90\022\uff90\001" +
    "\002\000\004\006\056\001\002\000\004\042\uff8f\001\002" +
    "\000\004\006\172\001\002\000\004\006\050\001\002\000" +
    "\004\132\134\001\002\000\004\006\050\001\002\000\006" +
    "\066\112\076\uff36\001\002\000\006\005\uff3d\022\uff3d\001" +
    "\002\000\004\076\131\001\002\000\004\006\113\001\002" +
    "\000\012\054\120\055\117\056\115\137\116\001\002\000" +
    "\012\021\uff33\076\uff33\135\126\136\125\001\002\000\042" +
    "\004\uff2f\021\uff2f\024\uff2f\034\uff2f\042\uff2f\057\uff2f\061" +
    "\uff2f\062\uff2f\063\uff2f\067\uff2f\072\uff2f\076\uff2f\132\uff2f" +
    "\135\uff2f\136\uff2f\143\uff2f\001\002\000\004\041\121\001" +
    "\002\000\042\004\uff31\021\uff31\024\uff31\034\uff31\042\uff31" +
    "\057\uff31\061\uff31\062\uff31\063\uff31\067\uff31\072\uff31\076" +
    "\uff31\132\uff31\135\uff31\136\uff31\143\uff31\001\002\000\042" +
    "\004\uff32\021\uff32\024\uff32\034\uff32\042\uff32\057\uff32\061" +
    "\uff32\062\uff32\063\uff32\067\uff32\072\uff32\076\uff32\132\uff32" +
    "\135\uff32\136\uff32\143\uff32\001\002\000\004\007\122\001" +
    "\002\000\004\042\123\001\002\000\042\004\uff30\021\uff30" +
    "\024\uff30\034\uff30\042\uff30\057\uff30\061\uff30\062\uff30\063" +
    "\uff30\067\uff30\072\uff30\076\uff30\132\uff30\135\uff30\136\uff30" +
    "\143\uff30\001\002\000\006\021\127\076\uff38\001\002\000" +
    "\006\021\uff34\076\uff34\001\002\000\006\021\uff35\076\uff35" +
    "\001\002\000\006\066\112\076\uff36\001\002\000\004\076" +
    "\uff37\001\002\000\030\004\006\024\032\034\017\057\011" +
    "\061\037\062\005\063\021\067\043\072\031\132\042\143" +
    "\026\001\002\000\006\005\uff39\022\uff39\001\002\000\006" +
    "\005\uff2e\022\uff2e\001\002\000\004\025\136\001\002\000" +
    "\006\005\ufff6\022\ufff6\001\002\000\004\006\137\001\002" +
    "\000\012\005\ufff3\022\ufff3\032\141\036\ufff3\001\002\000" +
    "\010\005\ufff1\022\ufff1\036\167\001\002\000\006\017\143" +
    "\041\uffef\001\002\000\004\041\144\001\002\000\004\041" +
    "\ufff0\001\002\000\004\152\146\001\002\000\010\005\ufff4" +
    "\022\ufff4\036\ufff4\001\002\000\004\117\147\001\002\000" +
    "\004\012\150\001\002\000\004\021\151\001\002\000\004" +
    "\154\152\001\002\000\004\117\153\001\002\000\004\012" +
    "\154\001\002\000\004\021\155\001\002\000\004\155\162" +
    "\001\002\000\004\042\157\001\002\000\012\005\uffee\021" +
    "\160\022\uffee\036\uffee\001\002\000\004\041\144\001\002" +
    "\000\010\005\uffed\022\uffed\036\uffed\001\002\000\004\117" +
    "\163\001\002\000\006\007\165\011\164\001\002\000\004" +
    "\042\uffeb\001\002\000\004\042\uffec\001\002\000\006\005" +
    "\ufff5\022\ufff5\001\002\000\004\006\170\001\002\000\006" +
    "\005\ufff2\022\ufff2\001\002\000\006\005\uff3c\022\uff3c\001" +
    "\002\000\040\005\uffd3\013\227\021\226\022\uffd3\033\uffd3" +
    "\036\uffd3\037\uffd3\041\uffd3\042\uffd3\044\uffd3\045\uffd3\122" +
    "\uffd3\131\uffd3\141\uffd3\146\uffd3\001\002\000\006\041\174" +
    "\141\uff2a\001\002\000\004\066\220\001\002\000\004\141" +
    "\176\001\002\000\004\141\200\001\002\000\006\005\uff2d" +
    "\022\uff2d\001\002\000\012\054\120\055\117\056\115\137" +
    "\116\001\002\000\032\004\006\024\032\034\017\057\011" +
    "\061\037\062\005\063\021\067\043\072\031\076\202\132" +
    "\042\143\026\001\002\000\030\004\006\024\032\034\017" +
    "\057\011\061\037\062\005\063\021\067\043\072\031\132" +
    "\042\143\026\001\002\000\004\142\204\001\002\000\014" +
    "\007\211\010\206\011\207\012\205\066\210\001\002\000" +
    "\006\005\uff22\022\uff22\001\002\000\006\005\uff24\022\uff24" +
    "\001\002\000\006\005\uff23\022\uff23\001\002\000\004\006" +
    "\213\001\002\000\006\005\uff25\022\uff25\001\002\000\006" +
    "\005\uff26\022\uff26\001\002\000\006\005\uff21\022\uff21\001" +
    "\002\000\004\142\215\001\002\000\014\007\211\010\206" +
    "\011\207\012\205\066\210\001\002\000\006\005\uff27\022" +
    "\uff27\001\002\000\004\042\225\001\002\000\004\006\221" +
    "\001\002\000\012\054\120\055\117\056\115\137\116\001" +
    "\002\000\006\021\223\042\uff29\001\002\000\004\066\220" +
    "\001\002\000\004\042\uff28\001\002\000\004\141\uff2b\001" +
    "\002\000\004\006\172\001\002\000\004\006\230\001\002" +
    "\000\036\005\uffd4\021\231\022\uffd4\033\uffd4\036\uffd4\037" +
    "\uffd4\041\uffd4\042\uffd4\044\uffd4\045\uffd4\122\uffd4\131\uffd4" +
    "\141\uffd4\146\uffd4\001\002\000\004\006\172\001\002\000" +
    "\034\005\uffd6\022\uffd6\033\uffd6\036\uffd6\037\uffd6\041\uffd6" +
    "\042\uffd6\044\uffd6\045\uffd6\122\uffd6\131\uffd6\141\uffd6\146" +
    "\uffd6\001\002\000\034\005\uffd5\022\uffd5\033\uffd5\036\uffd5" +
    "\037\uffd5\041\uffd5\042\uffd5\044\uffd5\045\uffd5\122\uffd5\131" +
    "\uffd5\141\uffd5\146\uffd5\001\002\000\012\005\uff9e\006\uff9e" +
    "\022\uff9e\066\uff9e\001\002\000\012\005\uff9d\006\uff9d\022" +
    "\uff9d\066\uff9d\001\002\000\012\005\uff99\006\240\022\uff99" +
    "\066\241\001\002\000\006\005\uff9c\022\uff9c\001\002\000" +
    "\006\005\uff9b\022\uff9b\001\002\000\004\006\242\001\002" +
    "\000\006\005\uff9a\022\uff9a\001\002\000\004\006\050\001" +
    "\002\000\004\006\270\001\002\000\010\006\uffe0\014\252" +
    "\032\uffe0\001\002\000\006\006\uffe0\014\252\001\002\000" +
    "\004\006\250\001\002\000\006\005\uffe4\022\uffe4\001\002" +
    "\000\004\006\172\001\002\000\004\015\253\001\002\000" +
    "\006\006\uffe1\032\uffe1\001\002\000\006\005\uffe2\022\uffe2" +
    "\001\002\000\006\006\050\032\260\001\002\000\010\005" +
    "\uffdb\021\266\022\uffdb\001\002\000\006\005\uffe3\022\uffe3" +
    "\001\002\000\004\006\050\001\002\000\006\005\uffdf\022" +
    "\uffdf\001\002\000\006\005\uffde\022\uffde\001\002\000\010" +
    "\005\uffdd\021\264\022\uffdd\001\002\000\004\032\260\001" +
    "\002\000\006\005\uffdc\022\uffdc\001\002\000\004\006\050" +
    "\001\002\000\006\005\uffda\022\uffda\001\002\000\012\005" +
    "\uffd7\006\271\021\272\022\uffd7\001\002\000\006\005\uffd8" +
    "\022\uffd8\001\002\000\004\006\274\001\002\000\006\005" +
    "\uffe5\022\uffe5\001\002\000\012\005\uffd7\006\271\021\272" +
    "\022\uffd7\001\002\000\006\005\uffd9\022\uffd9\001\002\000" +
    "\006\005\uffe6\022\uffe6\001\002\000\024\006\301\073\313" +
    "\074\302\075\312\103\303\104\306\105\314\106\305\107" +
    "\307\001\002\000\012\005\uff80\022\uff80\033\uff80\146\uff80" +
    "\001\002\000\012\013\u014a\021\uff73\076\317\110\uff73\001" +
    "\002\000\020\006\301\075\312\103\303\104\306\105\314" +
    "\106\305\107\307\001\002\000\004\041\u0144\001\002\000" +
    "\012\005\uff7e\022\uff7e\033\uff7e\146\uff7e\001\002\000\004" +
    "\041\u0141\001\002\000\004\041\u013e\001\002\000\004\041" +
    "\u013b\001\002\000\012\005\uff85\022\uff85\033\uff85\146\uff85" +
    "\001\002\000\012\005\uff82\022\uff82\033\uff82\146\uff82\001" +
    "\002\000\006\021\u0138\110\323\001\002\000\004\041\u0134" +
    "\001\002\000\004\041\u0131\001\002\000\024\006\301\073" +
    "\313\074\302\075\312\103\303\104\306\105\314\106\305" +
    "\107\307\001\002\000\010\021\uff73\076\317\110\uff73\001" +
    "\002\000\006\006\u0129\101\u012a\001\002\000\006\021\321" +
    "\110\323\001\002\000\020\006\301\075\312\103\303\104" +
    "\306\105\314\106\305\107\307\001\002\000\012\005\uff76" +
    "\022\uff76\033\uff76\146\uff76\001\002\000\004\006\050\001" +
    "\002\000\034\005\uff58\006\327\021\330\022\uff58\033\uff58" +
    "\112\336\113\335\114\332\115\334\116\337\120\333\131" +
    "\325\146\uff58\001\002\000\004\121\u0123\001\002\000\012" +
    "\005\uff69\022\uff69\033\uff69\146\uff69\001\002\000\032\005" +
    "\uff58\021\u0120\022\uff58\033\uff58\112\336\113\335\114\332" +
    "\115\334\116\337\120\333\131\325\146\uff58\001\002\000" +
    "\004\006\050\001\002\000\012\005\uff5a\022\uff5a\033\uff5a" +
    "\146\uff5a\001\002\000\006\111\u0112\113\u0113\001\002\000" +
    "\004\121\367\001\002\000\006\111\361\113\362\001\002" +
    "\000\004\111\357\001\002\000\004\111\355\001\002\000" +
    "\004\113\341\001\002\000\012\005\uff59\022\uff59\033\uff59" +
    "\146\uff59\001\002\000\004\111\342\001\002\000\004\006" +
    "\050\001\002\000\006\006\345\032\347\001\002\000\012" +
    "\005\uff5b\022\uff5b\033\uff5b\146\uff5b\001\002\000\004\032" +
    "\347\001\002\000\012\005\uff56\022\uff56\033\uff56\146\uff56" +
    "\001\002\000\004\006\050\001\002\000\004\117\351\001" +
    "\002\000\004\006\050\001\002\000\030\005\uff58\022\uff58" +
    "\033\uff58\112\336\113\335\114\332\115\334\116\337\120" +
    "\333\131\325\146\uff58\001\002\000\012\005\uff55\022\uff55" +
    "\033\uff55\146\uff55\001\002\000\012\005\uff57\022\uff57\033" +
    "\uff57\146\uff57\001\002\000\004\006\050\001\002\000\012" +
    "\005\uff61\022\uff61\033\uff61\146\uff61\001\002\000\004\006" +
    "\050\001\002\000\012\005\uff60\022\uff60\033\uff60\146\uff60" +
    "\001\002\000\004\006\050\001\002\000\004\111\363\001" +
    "\002\000\004\006\050\001\002\000\012\005\uff5c\022\uff5c" +
    "\033\uff5c\146\uff5c\001\002\000\012\005\uff5d\022\uff5d\033" +
    "\uff5d\146\uff5d\001\002\000\012\005\uff54\022\uff54\033\uff54" +
    "\146\uff54\001\002\000\004\006\172\001\002\000\006\122" +
    "\373\131\325\001\002\000\012\005\uff62\022\uff62\033\uff62" +
    "\146\uff62\001\002\000\012\005\uff53\022\uff53\033\uff53\146" +
    "\uff53\001\002\000\014\103\303\104\306\105\314\106\305" +
    "\107\307\001\002\000\014\117\u0102\123\u0100\124\376\125" +
    "\u0101\126\u0103\001\002\000\012\005\uff52\022\uff52\033\uff52" +
    "\146\uff52\001\002\000\006\007\uff4f\010\uff4f\001\002\000" +
    "\006\007\u0106\010\u0105\001\002\000\006\007\uff50\010\uff50" +
    "\001\002\000\006\007\uff4d\010\uff4d\001\002\000\006\007" +
    "\uff4e\010\uff4e\001\002\000\006\007\uff4c\010\uff4c\001\002" +
    "\000\010\127\u0108\130\u010a\131\325\001\002\000\012\042" +
    "\uff4a\127\uff4a\130\uff4a\131\uff4a\001\002\000\012\042\uff4b" +
    "\127\uff4b\130\uff4b\131\uff4b\001\002\000\012\005\uff47\022" +
    "\uff47\033\uff47\146\uff47\001\002\000\016\052\u010b\103\uff45" +
    "\104\uff45\105\uff45\106\uff45\107\uff45\001\002\000\012\005" +
    "\uff51\022\uff51\033\uff51\146\uff51\001\002\000\016\052\u010b" +
    "\103\uff45\104\uff45\105\uff45\106\uff45\107\uff45\001\002\000" +
    "\014\103\uff46\104\uff46\105\uff46\106\uff46\107\uff46\001\002" +
    "\000\014\103\303\104\306\105\314\106\305\107\307\001" +
    "\002\000\014\117\u0102\123\u0100\124\376\125\u0101\126\u0103" +
    "\001\002\000\012\005\uff48\022\uff48\033\uff48\146\uff48\001" +
    "\002\000\014\103\303\104\306\105\314\106\305\107\307" +
    "\001\002\000\014\117\u0102\123\u0100\124\376\125\u0101\126" +
    "\u0103\001\002\000\012\005\uff49\022\uff49\033\uff49\146\uff49" +
    "\001\002\000\004\006\050\001\002\000\004\111\u0114\001" +
    "\002\000\004\006\050\001\002\000\012\005\uff5e\022\uff5e" +
    "\033\uff5e\146\uff5e\001\002\000\012\005\uff5f\022\uff5f\033" +
    "\uff5f\146\uff5f\001\002\000\034\005\uff66\006\u011a\021\u011b" +
    "\022\uff66\033\uff66\112\uff66\113\uff66\114\uff66\115\uff66\116" +
    "\uff66\120\uff66\131\uff66\146\uff66\001\002\000\030\005\uff58" +
    "\022\uff58\033\uff58\112\336\113\335\114\332\115\334\116" +
    "\337\120\333\131\325\146\uff58\001\002\000\012\005\uff68" +
    "\022\uff68\033\uff68\146\uff68\001\002\000\032\005\uff64\021" +
    "\u011d\022\uff64\033\uff64\112\uff64\113\uff64\114\uff64\115\uff64" +
    "\116\uff64\120\uff64\131\uff64\146\uff64\001\002\000\004\006" +
    "\050\001\002\000\030\005\uff65\022\uff65\033\uff65\112\uff65" +
    "\113\uff65\114\uff65\115\uff65\116\uff65\120\uff65\131\uff65\146" +
    "\uff65\001\002\000\004\006\050\001\002\000\030\005\uff63" +
    "\022\uff63\033\uff63\112\uff63\113\uff63\114\uff63\115\uff63\116" +
    "\uff63\120\uff63\131\uff63\146\uff63\001\002\000\012\005\uff6a" +
    "\022\uff6a\033\uff6a\146\uff6a\001\002\000\004\006\050\001" +
    "\002\000\030\005\uff58\022\uff58\033\uff58\112\336\113\335" +
    "\114\332\115\334\116\337\120\333\131\325\146\uff58\001" +
    "\002\000\012\005\uff67\022\uff67\033\uff67\146\uff67\001\002" +
    "\000\004\006\172\001\002\000\016\005\uff41\022\uff41\033" +
    "\uff41\044\u0125\045\u0127\146\uff41\001\002\000\012\005\uff43" +
    "\022\uff43\033\uff43\146\uff43\001\002\000\012\005\uff44\022" +
    "\uff44\033\uff44\146\uff44\001\002\000\012\005\uff42\022\uff42" +
    "\033\uff42\146\uff42\001\002\000\012\005\uff77\022\uff77\033" +
    "\uff77\146\uff77\001\002\000\006\021\uff75\110\uff75\001\002" +
    "\000\004\006\u012b\001\002\000\004\006\u012c\001\002\000" +
    "\006\006\u012c\102\uff71\001\002\000\004\102\u012e\001\002" +
    "\000\006\021\uff74\110\uff74\001\002\000\004\102\uff72\001" +
    "\002\000\012\005\uff84\022\uff84\033\uff84\146\uff84\001\002" +
    "\000\004\006\172\001\002\000\004\042\u0133\001\002\000" +
    "\022\021\uff6c\076\uff6c\110\uff6c\117\uff6c\123\uff6c\124\uff6c" +
    "\125\uff6c\126\uff6c\001\002\000\006\007\u0106\010\u0105\001" +
    "\002\000\004\042\u0136\001\002\000\022\006\301\074\302" +
    "\075\312\103\303\104\306\105\314\106\305\107\307\001" +
    "\002\000\012\005\uff81\022\uff81\033\uff81\146\uff81\001\002" +
    "\000\020\006\301\075\312\103\303\104\306\105\314\106" +
    "\305\107\307\001\002\000\012\005\uff7a\022\uff7a\033\uff7a" +
    "\146\uff7a\001\002\000\012\005\uff7d\022\uff7d\033\uff7d\146" +
    "\uff7d\001\002\000\004\006\172\001\002\000\004\042\u013d" +
    "\001\002\000\022\021\uff6e\076\uff6e\110\uff6e\117\uff6e\123" +
    "\uff6e\124\uff6e\125\uff6e\126\uff6e\001\002\000\004\006\172" +
    "\001\002\000\004\042\u0140\001\002\000\022\021\uff6d\076" +
    "\uff6d\110\uff6d\117\uff6d\123\uff6d\124\uff6d\125\uff6d\126\uff6d" +
    "\001\002\000\004\006\172\001\002\000\004\042\u0143\001" +
    "\002\000\022\021\uff6b\076\uff6b\110\uff6b\117\uff6b\123\uff6b" +
    "\124\uff6b\125\uff6b\126\uff6b\001\002\000\006\007\u0146\075" +
    "\u0145\001\002\000\004\042\u0148\001\002\000\004\042\u0147" +
    "\001\002\000\022\021\uff6f\076\uff6f\110\uff6f\117\uff6f\123" +
    "\uff6f\124\uff6f\125\uff6f\126\uff6f\001\002\000\022\021\uff70" +
    "\076\uff70\110\uff70\117\uff70\123\uff70\124\uff70\125\uff70\126" +
    "\uff70\001\002\000\012\005\uff7f\022\uff7f\033\uff7f\146\uff7f" +
    "\001\002\000\004\006\u014f\001\002\000\006\021\u014c\110" +
    "\323\001\002\000\020\006\301\075\312\103\303\104\306" +
    "\105\314\106\305\107\307\001\002\000\012\005\uff79\022" +
    "\uff79\033\uff79\146\uff79\001\002\000\012\005\uff7c\022\uff7c" +
    "\033\uff7c\146\uff7c\001\002\000\010\021\uff73\076\317\110" +
    "\uff73\001\002\000\006\021\u0151\110\323\001\002\000\020" +
    "\006\301\075\312\103\303\104\306\105\314\106\305\107" +
    "\307\001\002\000\012\005\uff78\022\uff78\033\uff78\146\uff78" +
    "\001\002\000\012\005\uff7b\022\uff7b\033\uff7b\146\uff7b\001" +
    "\002\000\012\005\uff83\022\uff83\033\uff83\146\uff83\001\002" +
    "\000\004\144\u0156\001\002\000\010\006\u0157\145\u0159\146" +
    "\uff1d\001\002\000\004\146\uff1e\001\002\000\004\146\u015b" +
    "\001\002\000\004\006\u015a\001\002\000\004\146\uff1f\001" +
    "\002\000\004\072\031\001\002\000\006\005\uff20\022\uff20" +
    "\001\002\000\012\005\uff19\022\uff19\033\uff19\146\u015f\001" +
    "\002\000\010\005\uff17\022\uff17\033\u0163\001\002\000\006" +
    "\147\u0160\151\u0161\001\002\000\004\150\u0162\001\002\000" +
    "\010\005\uff1a\022\uff1a\033\uff1a\001\002\000\010\005\uff1b" +
    "\022\uff1b\033\uff1b\001\002\000\004\006\u0165\001\002\000" +
    "\006\005\uff1c\022\uff1c\001\002\000\010\005\uff15\021\u0167" +
    "\022\uff15\001\002\000\006\005\uff18\022\uff18\001\002\000" +
    "\004\006\u0165\001\002\000\006\005\uff16\022\uff16\001\002" +
    "\000\012\005\uff99\006\240\022\uff99\066\241\001\002\000" +
    "\006\005\uff98\022\uff98\001\002\000\004\006\050\001\002" +
    "\000\004\006\172\001\002\000\004\006\050\001\002\000" +
    "\004\006\u0173\001\002\000\004\006\050\001\002\000\004" +
    "\072\031\001\002\000\006\005\uffd1\022\uffd1\001\002\000" +
    "\006\005\uff3a\022\uff3a\001\002\000\004\036\u0175\001\002" +
    "\000\006\005\uffd0\022\uffd0\001\002\000\004\006\u0176\001" +
    "\002\000\012\005\uffc5\022\uffc5\051\u0179\052\u0177\001\002" +
    "\000\004\051\u017a\001\002\000\006\005\uffc4\022\uffc4\001" +
    "\002\000\006\005\uffc3\022\uffc3\001\002\000\006\005\uffc2" +
    "\022\uffc2\001\002\000\006\005\uff3b\022\uff3b\001\002\000" +
    "\006\041\174\141\uff2a\001\002\000\004\141\u017e\001\002" +
    "\000\004\141\200\001\002\000\006\005\uff2c\022\uff2c\001" +
    "\002\000\004\034\u0182\001\002\000\006\005\uffd2\022\uffd2" +
    "\001\002\000\004\035\u0183\001\002\000\010\006\u0185\016" +
    "\u0186\034\u0187\001\002\000\006\005\uffcf\022\uffcf\001\002" +
    "\000\020\013\227\021\226\036\uffd3\054\u01cc\055\u01c9\056" +
    "\u01c8\137\u01ca\001\002\000\016\006\u0191\017\u0198\026\u0192" +
    "\040\u019a\046\u0199\053\u0195\001\002\000\004\026\u018a\001" +
    "\002\000\004\036\u0175\001\002\000\006\005\uffc6\022\uffc6" +
    "\001\002\000\004\006\172\001\002\000\006\005\uffce\022" +
    "\uffce\001\002\000\004\037\u018d\001\002\000\010\005\uffbf" +
    "\022\uffbf\043\u018f\001\002\000\006\005\uffc1\022\uffc1\001" +
    "\002\000\006\005\uffc0\022\uffc0\001\002\000\006\005\uffbc" +
    "\022\uffbc\001\002\000\004\006\172\001\002\000\006\006" +
    "\u01ba\033\u01b9\001\002\000\006\005\uffcd\022\uffcd\001\002" +
    "\000\006\005\uffbb\022\uffbb\001\002\000\004\043\u01aa\001" +
    "\002\000\006\005\uffb9\022\uffb9\001\002\000\006\005\uffbd" +
    "\022\uffbd\001\002\000\004\047\u01a9\001\002\000\004\047" +
    "\u019c\001\002\000\004\006\u019b\001\002\000\006\005\uffba" +
    "\022\uffba\001\002\000\004\041\u019d\001\002\000\004\006" +
    "\u019f\001\002\000\006\005\uffb6\022\uffb6\001\002\000\006" +
    "\021\u01a7\042\uffac\001\002\000\004\042\u01a1\001\002\000" +
    "\004\050\u01a2\001\002\000\004\006\050\001\002\000\004" +
    "\041\u01a4\001\002\000\004\006\u019f\001\002\000\004\042" +
    "\u01a6\001\002\000\006\005\uffae\022\uffae\001\002\000\004" +
    "\006\u019f\001\002\000\004\042\uffad\001\002\000\004\043" +
    "\u01aa\001\002\000\004\041\u01ac\001\002\000\006\005\uffb8" +
    "\022\uffb8\001\002\000\004\006\u01ad\001\002\000\012\021" +
    "\u01b1\042\uffaf\044\u01b0\045\u01b2\001\002\000\004\042\u01af" +
    "\001\002\000\006\005\uffb5\022\uffb5\001\002\000\006\021" +
    "\u01b6\042\uffb1\001\002\000\004\006\u01ad\001\002\000\006" +
    "\021\u01b3\042\uffb0\001\002\000\004\006\u01ad\001\002\000" +
    "\004\042\uffb3\001\002\000\004\042\uffb2\001\002\000\004" +
    "\006\u01ad\001\002\000\004\042\uffb4\001\002\000\006\005" +
    "\uffb7\022\uffb7\001\002\000\006\005\uffa6\022\uffa6\001\002" +
    "\000\006\041\u01bb\043\u01bd\001\002\000\004\006\u01ad\001" +
    "\002\000\006\005\uffab\022\uffab\001\002\000\010\005\uffa5" +
    "\022\uffa5\041\u01be\001\002\000\004\006\u01ad\001\002\000" +
    "\004\042\u01c0\001\002\000\010\005\uffa7\022\uffa7\032\u01c1" +
    "\001\002\000\004\006\050\001\002\000\006\005\uffaa\022" +
    "\uffaa\001\002\000\006\005\uffa8\022\uffa8\001\002\000\004" +
    "\042\u01c5\001\002\000\006\005\uffa9\022\uffa9\001\002\000" +
    "\004\036\u0175\001\002\000\006\005\uffbe\022\uffbe\001\002" +
    "\000\012\005\uffc7\022\uffc7\051\uffc7\052\uffc7\001\002\000" +
    "\012\005\uffc9\022\uffc9\051\uffc9\052\uffc9\001\002\000\004" +
    "\041\u01ce\001\002\000\012\005\uffcc\022\uffcc\051\u0179\052" +
    "\u0177\001\002\000\012\005\uffca\022\uffca\051\uffca\052\uffca" +
    "\001\002\000\006\005\uffcb\022\uffcb\001\002\000\004\007" +
    "\u01cf\001\002\000\004\042\u01d0\001\002\000\012\005\uffc8" +
    "\022\uffc8\051\uffc8\052\uffc8\001\002\000\014\002\uffff\005" +
    "\uffff\022\uffff\060\uffff\142\uffff\001\002\000\014\002\000" +
    "\005\000\022\000\060\000\142\000\001\002\000\006\005" +
    "\uff9f\022\uff9f\001\002\000\004\060\u01d5\001\002\000\006" +
    "\005\uff95\022\uff95\001\002\000\004\006\050\001\002\000" +
    "\006\005\uffea\022\uffea\001\002\000\006\006\u01d9\066\u01da" +
    "\001\002\000\006\005\uff97\022\uff97\001\002\000\004\006" +
    "\u01db\001\002\000\006\005\uff96\022\uff96\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01d9\000\056\002\043\003\013\004\012\005\007\006" +
    "\033\007\021\010\006\011\037\013\027\014\040\015\034" +
    "\016\011\017\026\020\032\062\035\063\024\064\023\065" +
    "\022\066\014\122\003\123\017\124\015\001\001\000\002" +
    "\001\001\000\004\067\u01d7\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\002\u01d3\003\013" +
    "\004\012\005\007\006\033\007\021\010\006\011\037\013" +
    "\027\014\040\015\034\016\011\017\026\020\032\062\035" +
    "\063\024\064\023\065\022\066\014\067\u01d2\122\003\123" +
    "\017\124\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\067\u0168\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\073\307\074\310\075\277\076\303\100" +
    "\315\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\067" +
    "\235\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\071\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\072\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\072\070\001\001\000\002\001\001\000\004" +
    "\072\072\001\001\000\002\001\001\000\004\072\074\001" +
    "\001\000\002\001\001\000\004\072\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\071\101\001\001\000" +
    "\002\001\001\000\004\037\172\001\001\000\006\021\106" +
    "\125\170\001\001\000\004\146\134\001\001\000\006\021" +
    "\106\125\107\001\001\000\004\126\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\131" +
    "\113\001\001\000\004\127\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\126" +
    "\127\001\001\000\002\001\001\000\060\002\132\003\013" +
    "\004\012\005\007\006\033\007\021\010\006\011\037\013" +
    "\027\014\040\015\034\016\011\017\026\020\032\062\035" +
    "\063\024\064\023\065\022\066\014\122\003\123\017\124" +
    "\015\130\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\147\137\001\001\000\004\150\165\001\001\000\004" +
    "\151\141\001\001\000\004\152\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\145\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\152\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\133\174\001\001\000" +
    "\004\137\216\001\001\000\002\001\001\000\004\135\176" +
    "\001\001\000\002\001\001\000\004\131\200\001\001\000" +
    "\056\002\202\003\013\004\012\005\007\006\033\007\021" +
    "\010\006\011\037\013\027\014\040\015\034\016\011\017" +
    "\026\020\032\062\035\063\024\064\023\065\022\066\014" +
    "\122\003\123\017\124\015\001\001\000\056\002\213\003" +
    "\013\004\012\005\007\006\033\007\021\010\006\011\037" +
    "\013\027\014\040\015\034\016\011\017\026\020\032\062" +
    "\035\063\024\064\023\065\022\066\014\122\003\123\017" +
    "\124\015\001\001\000\002\001\001\000\004\136\211\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\136\215\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\131\221\001\001\000\002\001\001\000\004\137\223" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\232\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\231\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\070\236\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\275\001\001\000\002\001\001" +
    "\000\004\036\254\001\001\000\004\036\250\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\253\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\021\255\032\260\033\261\035\256\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\262\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\264\001\001\000\002\001\001\000\006\021\255\033" +
    "\266\001\001\000\002\001\001\000\004\022\272\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\274\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\074\u0153\075\277\076\303\100\315\001\001\000" +
    "\002\001\001\000\004\077\u014a\001\001\000\006\076\u0148" +
    "\100\315\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\103\u0138\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\074\u012f\075\277" +
    "\076\303\100\315\001\001\000\004\077\317\001\001\000" +
    "\002\001\001\000\004\103\321\001\001\000\006\076\u0127" +
    "\100\315\001\001\000\002\001\001\000\004\021\323\001" +
    "\001\000\010\105\325\107\330\114\337\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\105\u011e\107\330\114" +
    "\337\001\001\000\006\021\u0116\132\u0117\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\120\365\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\342\106\343\001\001\000\004\104\345\001\001\000\002" +
    "\001\001\000\004\104\353\001\001\000\002\001\001\000" +
    "\004\021\347\001\001\000\002\001\001\000\004\021\351" +
    "\001\001\000\010\105\352\107\330\114\337\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\342\106\355" +
    "\001\001\000\002\001\001\000\006\021\342\106\357\001" +
    "\001\000\002\001\001\000\006\021\342\106\364\001\001" +
    "\000\002\001\001\000\006\021\342\106\363\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\367\001\001\000\006\111\371\114\370\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\100\373\001\001" +
    "\000\006\112\374\121\376\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\116\u0103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\113\u0108\114\u0106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\115\u010e\001\001\000" +
    "\002\001\001\000\004\115\u010b\001\001\000\002\001\001" +
    "\000\004\100\u010c\001\001\000\006\112\u010d\121\376\001" +
    "\001\000\002\001\001\000\004\100\u010f\001\001\000\006" +
    "\112\u0110\121\376\001\001\000\002\001\001\000\006\021" +
    "\342\106\u0115\001\001\000\002\001\001\000\006\021\342" +
    "\106\u0114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\105\u0118\107\330\114\337\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\u0116\132" +
    "\u011b\001\001\000\002\001\001\000\006\021\u0116\132\u011d" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\u0116\132\u0120\001\001\000\010\105\u0121\107\330\114\337" +
    "\001\001\000\002\001\001\000\004\037\u0123\001\001\000" +
    "\004\117\u0125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\101\u012c\001\001\000\004\101\u012e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\u0131\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\116\u0134\001\001\000" +
    "\002\001\001\000\010\075\u0136\076\303\100\315\001\001" +
    "\000\002\001\001\000\006\076\u0139\100\315\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\u013b\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\u013e\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\u0141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\103\u014c\001\001\000\006\076\u014d\100\315\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\077\u014f\001" +
    "\001\000\004\103\u0151\001\001\000\006\076\u0152\100\315" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\140\u0157\001\001\000\002" +
    "\001\001\000\004\141\u015b\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\u015c\001\001\000\002\001\001" +
    "\000\004\142\u015d\001\001\000\004\144\u0163\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\143\u0165\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\143\u0167\001\001" +
    "\000\002\001\001\000\004\070\u0169\001\001\000\002\001" +
    "\001\000\004\021\u017f\001\001\000\004\037\u017b\001\001" +
    "\000\006\021\106\125\u017a\001\001\000\002\001\001\000" +
    "\006\021\106\125\u0171\001\001\000\004\010\u0170\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\u0173\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\u0177" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\133\u017c" +
    "\001\001\000\002\001\001\000\004\135\u017e\001\001\000" +
    "\002\001\001\000\004\057\u0180\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\037\u0187\060\u0183\001\001\000" +
    "\002\001\001\000\004\061\u01ca\001\001\000\014\041\u0192" +
    "\045\u0196\046\u0195\053\u018f\056\u0193\001\001\000\002\001" +
    "\001\000\004\042\u0188\001\001\000\002\001\001\000\006" +
    "\037\u018b\040\u018a\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\044\u018d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\u01c5\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\u01b7\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\u019d\001\001\000\004\052\u019f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\u01a2\001\001\000\002\001" +
    "\001\000\004\052\u01a4\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\052\u01a7\001\001\000\002\001\001\000" +
    "\004\050\u01aa\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\u01ad\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\u01b4" +
    "\001\001\000\002\001\001\000\004\051\u01b3\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\051\u01b6\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\054\u01bb\001\001\000\004\051\u01c3\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\u01be\001\001\000" +
    "\002\001\001\000\004\055\u01c1\001\001\000\004\021\u01c2" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\u01c6\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\u01cc\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\u01d6\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getSymbol(){
    return this.s;
    }    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // OF_ID ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OF_ID",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // OF_ID ::= Id Coma OF_ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OF_ID",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // OF_ID_INIT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OF_ID_INIT",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // OF_ID_INIT ::= Of OF_ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OF_ID_INIT",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // FOR_EXTENDED ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_EXTENDED",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // FOR_EXTENDED ::= For Update 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_EXTENDED",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // FOR_EXTENDED ::= For Read Only 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_EXTENDED",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // FOR_CURSOR ::= For SELECT FOR_EXTENDED OF_ID_INIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_CURSOR",95, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // OP_CURSOR ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_CURSOR",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // OP_CURSOR ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_CURSOR",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // OP_CURSOR ::= Scroll Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_CURSOR",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // CURSORS ::= Declare Id Cursor OP_CURSOR FOR_CURSOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CURSORS",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // OP_RETURN ::= Arroba Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RETURN",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // OP_RETURN ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RETURN",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // OP_RETURN ::= Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RETURN",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // OP_RETURN ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RETURN",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // OP_RETURN ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RETURN",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // FUNCTION_BODY ::= Returns PROC_TYPE INICIO Return OP_RETURN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCTION_BODY",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // FUNCTION_BODY ::= Returns PROC_TYPE As INICIO Return OP_RETURN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCTION_BODY",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // PROC_PARAMS_FUNCTION ::= Arroba Id PROC_TYPE Coma PROC_PARAMS_FUNCTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROC_PARAMS_FUNCTION",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // PROC_PARAMS_FUNCTION ::= Arroba Id PROC_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROC_PARAMS_FUNCTION",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // FUNCTION_OPTIONS ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCTION_OPTIONS",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // FUNCTION_OPTIONS ::= Parentesis_a PROC_PARAMS_FUNCTION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCTION_OPTIONS",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // FUNCTION ::= Alter Function TABLENAME_TWO FUNCTION_OPTIONS Returns FUNCTION_BODY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCTION",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // FUNCTION ::= Create Function TABLENAME_TWO FUNCTION_OPTIONS Returns FUNCTION_BODY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCTION",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // PROC_AS ::= INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROC_AS",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // PROC_TYPE ::= BIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROC_TYPE",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // PROC_TYPE ::= VARCHAR Parentesis_a Int Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROC_TYPE",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // PROC_TYPE ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROC_TYPE",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // PROC_TYPE ::= INT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROC_TYPE",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // OUT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // OUT ::= Output 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // OUT ::= Out 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // PROC_PARAMS ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROC_PARAMS",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // PROC_PARAMS ::= Arroba Id PROC_TYPE OUT Coma PROC_PARAMS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROC_PARAMS",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // PROC_PARAMS ::= Arroba Id PROC_TYPE OUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROC_PARAMS",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // PROC_OP ::= TABLENAME PROC_PARAMS As PROC_AS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROC_OP",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // PROCEDURE ::= Alter Proc PROC_OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROCEDURE",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // PROCEDURE ::= Alter Procedure PROC_OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROCEDURE",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // PROCEDURE ::= Create Procedure PROC_OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROCEDURE",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // PROCEDURE ::= Create Proc PROC_OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROCEDURE",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // TSQL ::= CURSORS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TSQL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // TSQL ::= FUNCTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TSQL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // TSQL ::= PROCEDURE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TSQL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // ORDER_TYPE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ORDER_TYPE",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // ORDER_TYPE ::= Desc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ORDER_TYPE",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // ORDER_TYPE ::= Asc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ORDER_TYPE",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // ORDER ::= Order By TABLENAME_TWO ORDER_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ORDER",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // NOT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOT",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // NOT ::= Not 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOT",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // REP_STATEMENT ::= ORDER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REP_STATEMENT",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // REP_STATEMENT ::= Or NOT METHOD_NAME EXPR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REP_STATEMENT",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // REP_STATEMENT ::= And NOT METHOD_NAME EXPR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REP_STATEMENT",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // NUM_TYPE ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUM_TYPE",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // NUM_TYPE ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUM_TYPE",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // CONDITION ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDITION",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // CONDITION ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDITION",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // CONDITION ::= Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDITION",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // CONDITION ::= MenorQue 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDITION",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // CONDITION ::= MayorQue 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDITION",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // EXPR ::= CONDITION NUM_TYPE REP_STATEMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // HAVING ::= Having METHOD_NAME EXPR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("HAVING",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // BY ::= By TABLENAME_TWO HAVING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BY",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // GROUP ::= Group BY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GROUP",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // ON ::= On TABLENAME Igual TABLENAME JOINS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ON",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // UNION ::= TABLENAME ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UNION",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // UNION ::= TABLENAME Id ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UNION",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // JOINS ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // JOINS ::= ORDER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // JOINS ::= GROUP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // JOINS ::= Full Outer Join UNION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // JOINS ::= Right Outer Join UNION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // JOINS ::= Right Join UNION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // JOINS ::= Left Outer Join UNION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // JOINS ::= Left Join UNION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // JOINS ::= Outer Join UNION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // JOINS ::= Inner Join UNION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // GROUP ::= Group By TABLENAME_TWO ORDER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GROUP",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // SEL_REP ::= TABLENAME Id Coma SEL_REP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SEL_REP",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // SEL_REP ::= TABLENAME Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SEL_REP",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // SEL_REP ::= TABLENAME Coma SEL_REP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SEL_REP",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // SEL_REP ::= TABLENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SEL_REP",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // FROM ::= From TABLENAME Id Coma SEL_REP JOINS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FROM",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // FROM ::= From TABLENAME Coma SEL_REP JOINS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FROM",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // FROM ::= From TABLENAME JOINS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FROM",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // FROM ::= From TABLENAME Id JOINS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FROM",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // METHOD_NAME ::= Min Parentesis_a TABLENAME_TWO Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // METHOD_NAME ::= Max Parentesis_a TABLENAME_TWO Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // METHOD_NAME ::= Avg Parentesis_a TABLENAME_TWO Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // METHOD_NAME ::= Sum Parentesis_a TABLENAME_TWO Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // METHOD_NAME ::= Count Parentesis_a Int Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // METHOD_NAME ::= Count Parentesis_a Asterisco Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // REP ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REP",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // REP ::= Id REP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REP",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // AS_STATEMENT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AS_STATEMENT",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // AS_STATEMENT ::= As Corchete_a Id REP Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AS_STATEMENT",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // AS_STATEMENT ::= As Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AS_STATEMENT",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // BODY ::= METHOD_NAME AS_STATEMENT FROM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // BODY ::= METHOD_NAME AS_STATEMENT Coma BODY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // BODY ::= Id Punto Id AS_STATEMENT FROM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // BODY ::= Id AS_STATEMENT FROM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // BODY ::= Asterisco FROM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // BODY ::= Id Punto Id AS_STATEMENT Coma BODY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // BODY ::= Id AS_STATEMENT Coma BODY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // BODY ::= Asterisco Coma BODY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // PERCENT ::= BODY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PERCENT",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // PERCENT ::= Percent BODY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PERCENT",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EX_TYPE ::= PERCENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EX_TYPE",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EX_TYPE ::= Top Parentesis_a NUM_TYPE Parentesis_c PERCENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EX_TYPE",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // SELECT_TYPE ::= EX_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECT_TYPE",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // SELECT_TYPE ::= Distinct EX_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECT_TYPE",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SELECT_TYPE ::= All EX_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECT_TYPE",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SELECT ::= Select SELECT_TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // VALUES ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // VALUES ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // VALUES ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // VALUES ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // VALUES ::= Float Coma VALUES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // VALUES ::= Int Coma VALUES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // VALUES ::= String Coma VALUES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // VALUES ::= Id Coma VALUES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // INSERT_COLUMN_OP ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSERT_COLUMN_OP",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // INSERT_COLUMN_OP ::= Id Coma INSERT_COLUMN_OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSERT_COLUMN_OP",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // INSERT ::= Insert Into TABLENAME Parentesis_a INSERT_COLUMN_OP Parentesis_c Values Parentesis_a VALUES Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSERT",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DML ::= DELETE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DML ::= UPDATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DML ::= SELECT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DML ::= INSERT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // END ::= Begin INICIO End 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("END",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SAVEPOINT ::= Save TRANS_OP Arroba Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SAVEPOINT",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SAVEPOINT ::= Save TRANS_OP Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SAVEPOINT",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ROLLBACK ::= Rollback TRANS_OP TRANS_NAME_OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ROLLBACK",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TRANS_NAME_OP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRANS_NAME_OP",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // TRANS_NAME_OP ::= Arroba Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRANS_NAME_OP",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TRANS_NAME_OP ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRANS_NAME_OP",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // COMMIT ::= Commit TRANS_OP TRANS_NAME_OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMMIT",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TRANS_OP ::= Transaction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRANS_OP",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TRANS_OP ::= Tran 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRANS_OP",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // BEGIN_TRANSACTION ::= Begin TRANS_OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BEGIN_TRANSACTION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TCL ::= END 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TCL ::= SAVEPOINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TCL ::= ROLLBACK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TCL ::= COMMIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TCL ::= BEGIN_TRANSACTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // COLUMN_INDEX ::= Index Id Nonclustered 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLUMN_INDEX",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // COLUMN_INDEX ::= Index Of 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLUMN_INDEX",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // T_INDEX_OP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T_INDEX_OP",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // T_INDEX_OP ::= On TABLENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T_INDEX_OP",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // T_INDEX ::= Parentesis_a OPS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T_INDEX",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // T_INDEX ::= Nonclustered Parentesis_a OPS Parentesis_c T_INDEX_OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T_INDEX",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // T_INDEX_INIT ::= Index Id T_INDEX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T_INDEX_INIT",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OP_FK ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_FK",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OP_FK ::= Id Coma OP_FK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_FK",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // A_ADD_FK_CONST ::= Parentesis_a OP_FK Parentesis_c References TABLENAME Parentesis_a OP_FK Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_ADD_FK_CONST",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPS ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPS",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPS ::= Id Desc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPS",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPS ::= Id Asc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPS",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPS ::= Id Coma OPS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPS",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPS ::= Id Desc Coma OPS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPS",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPS ::= Id Asc Coma OPS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPS",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // A_ADD_OP_CONST ::= Nonclustered Parentesis_a OPS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_ADD_OP_CONST",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TABLE_CONSTRAINT_OPS ::= Foreign Key A_ADD_FK_CONST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLE_CONSTRAINT_OPS",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TABLE_CONSTRAINT_OPS ::= Unique A_ADD_OP_CONST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLE_CONSTRAINT_OPS",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TABLE_CONSTRAINT_OPS ::= Primary Key A_ADD_OP_CONST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLE_CONSTRAINT_OPS",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TABLE_CONSTRAINT ::= TABLE_CONSTRAINT_OPS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLE_CONSTRAINT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TABLE_CONSTRAINT ::= Constraint Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLE_CONSTRAINT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // A_PARAM_ADD ::= COLUMN_INDEX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_PARAM_ADD",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // A_PARAM_ADD ::= T_INDEX_INIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_PARAM_ADD",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // A_PARAM_ADD ::= TABLE_CONSTRAINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_PARAM_ADD",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // A_PARAM_ADD ::= Id TABLENAME_TWO A_COLUMN_OPS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_PARAM_ADD",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // A_PARAM_INDEX_OP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_PARAM_INDEX_OP",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // A_PARAM_INDEX_OP ::= Nonclustered 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_PARAM_INDEX_OP",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // A_PARAM_INDEX ::= TABLENAME_TWO Rebuild A_PARAM_INDEX_OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_PARAM_INDEX",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BOOL_OP ::= Not Null 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_OP",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BOOL_OP ::= Null 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_OP",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // A_COLUMN_OPS ::= Collate Id BOOL_OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_COLUMN_OPS",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // A_COLUMN_OPS ::= Collate Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_COLUMN_OPS",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // A_PARAM_COLUMN ::= TABLENAME_TWO A_COLUMN_OPS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_PARAM_COLUMN",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // RESERVED ::= BIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESERVED",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // RESERVED ::= VARCHAR Parentesis_a Int Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESERVED",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // RESERVED ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESERVED",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // RESERVED ::= INT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESERVED",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // COL_INDEX ::= Alter Column Id RESERVED BOOL_OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COL_INDEX",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // COL_INDEX ::= Alter Column Id RESERVED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COL_INDEX",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // COL_INDEX ::= Alter Column Add A_PARAM_ADD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COL_INDEX",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // COL_INDEX ::= Alter Column Alter Index A_PARAM_INDEX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COL_INDEX",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COL_INDEX ::= Alter Column A_PARAM_COLUMN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COL_INDEX",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ALTER ::= Alter Database Id A_COLUMN_OPS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ALTER ::= Alter View SELECT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ALTER ::= Alter Table TABLENAME COL_INDEX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TABLENAME_TWO ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME_TWO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TABLENAME_TWO ::= Id Punto Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME_TWO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TABLENAME_TWO ::= Id Coma TABLENAME_TWO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME_TWO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TABLENAME_TWO ::= Id Punto Id Coma TABLENAME_TWO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME_TWO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TABLE_NAMES ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLE_NAMES",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TABLE_NAMES ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLE_NAMES",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TABLE_NAMES ::= Coma Id TABLE_NAMES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLE_NAMES",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INDEX_SIN_ON ::= TABLENAME Coma INDEX_SIN_ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INDEX_SIN_ON",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INDEX_SIN_ON ::= TABLENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INDEX_SIN_ON",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INDEX_ON ::= On TABLENAME Coma INDEX_ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INDEX_ON",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INDEX_ON ::= On TABLENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INDEX_ON",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // I_STATEMENT ::= INDEX_SIN_ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("I_STATEMENT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // I_STATEMENT ::= INDEX_ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("I_STATEMENT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IF ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IF ::= If Exists 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DROP ::= Drop View IF TABLENAME_TWO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DROP",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DROP ::= Drop Index IF I_STATEMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DROP",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DROP ::= Drop User Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DROP",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DROP ::= Drop Database Id TABLE_NAMES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DROP",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DROP ::= Drop Table TABLENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DROP",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TABLENAME ::= Id Punto Id Punto Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TABLENAME ::= Id Punto Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TABLENAME ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TRUNCATE ::= Truncate Table TABLENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRUNCATE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SIZE ::= Coma Size Igual Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIZE",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SIZE ::= Coma Size Igual Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIZE",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FILESPEC ::= Parentesis_a Names Igual String Coma File Igual String SIZE Parentesis_c Coma FILESPEC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FILESPEC",104, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FILESPEC ::= Parentesis_a Names Igual String Coma File Igual String SIZE Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FILESPEC",104, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PRIMARY ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRIMARY",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PRIMARY ::= Primary 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRIMARY",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // COLLATE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLLATE",102, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // COLLATE ::= Collate Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLLATE",102, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DATABASE_ON ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATABASE_ON",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DATABASE_ON ::= On PRIMARY FILESPEC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATABASE_ON",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // C_DATABASE ::= Create Database Id DATABASE_ON COLLATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C_DATABASE",100, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CREATE ::= Create Database C_DATABASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CREATE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DDL ::= TRUNCATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DDL ::= ALTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DDL ::= CREATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DDL ::= DROP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= TSQL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= TCL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DDL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= DML 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= SENTENCIA Go 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIA Punto_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

