/* The following code was generated by JFlex 1.7.0 */

package lexCode;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/Bryan/OneDrive - Universidad Rafael Landivar/Documentos/NetBeansProjects/Lex_Analyzer/LexicalAnalyzer/src/lexCode/Lexer.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\2\0\1\1\22\0\1\1\1\46\5\0\1\0"+
    "\1\47\1\50\1\51\1\0\1\44\1\0\1\43\14\0\1\45\1\57"+
    "\1\55\1\56\1\0\1\52\1\7\1\14\1\6\1\11\1\10\1\20"+
    "\1\30\1\31\1\16\1\42\1\26\1\23\1\24\1\5\1\12\1\13"+
    "\1\27\1\3\1\15\1\2\1\4\1\21\1\22\1\17\1\25\1\0"+
    "\1\53\1\0\1\54\3\0\1\37\5\0\1\41\1\0\1\32\2\0"+
    "\1\35\1\0\1\34\1\36\2\0\1\40\1\0\1\33\7\0\1\1"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff93\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\24\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\14\0\1\17\12\0\1\20\1\21\4\0\1\22\7\0"+
    "\1\23\15\0\1\24\1\0\1\25\1\26\3\0\1\27"+
    "\6\0\1\30\5\0\1\31\1\32\1\33\1\0\1\34"+
    "\12\0\1\35\1\36\1\37\3\0\1\40\4\0\1\41"+
    "\11\0\1\42\1\43\1\44\3\0\1\45\5\0\1\46"+
    "\1\47\10\0\1\50\1\0\1\51\11\0\1\52\4\0"+
    "\1\53\1\54\5\0\1\55\1\56\1\0\1\57\2\0"+
    "\1\60\2\0\1\61\2\0\1\62\4\0\1\63\3\0"+
    "\1\64\1\65\2\0\1\66\3\0\1\67\1\70\3\0"+
    "\1\71\1\72\2\0\1\73\4\0\1\74\2\0\1\75"+
    "\1\0\1\76\1\77\5\0\1\100\1\101\1\102\3\0"+
    "\1\103\2\0\1\104\3\0\1\105\2\0\1\106\1\107"+
    "\2\0\1\110\1\111\1\112\1\0\1\113\2\0\1\114"+
    "\1\115\5\0\1\116\3\0\1\117\1\0\1\120\2\0"+
    "\1\121\3\0\1\122";

  private static int [] zzUnpackAction() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0"+
    "\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420\0\u0420"+
    "\0\u0420\0\u0420\0\u0420\0\u0420\0\u0420\0\u0420\0\u0420\0\u0420"+
    "\0\u0420\0\u0450\0\u0480\0\u04b0\0\u04e0\0\u0510\0\u0540\0\u0570"+
    "\0\u05a0\0\u05d0\0\u0600\0\u0630\0\u0660\0\u0690\0\u06c0\0\u06f0"+
    "\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0870"+
    "\0\u08a0\0\u08d0\0\u0420\0\u0420\0\u0900\0\u0930\0\u0960\0\u0990"+
    "\0\u0420\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0"+
    "\0\u0420\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30"+
    "\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50\0\u0420\0\u0d80"+
    "\0\u0420\0\u0420\0\u0db0\0\u0de0\0\u0e10\0\u0420\0\u0e40\0\u0e70"+
    "\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30\0\u0420\0\u0f60\0\u0f90\0\u0fc0"+
    "\0\u0ff0\0\u1020\0\u0420\0\u0420\0\u0420\0\u1050\0\u0420\0\u1080"+
    "\0\u10b0\0\u10e0\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0\0\u1200"+
    "\0\u1230\0\u0420\0\u0420\0\u0420\0\u1260\0\u1290\0\u12c0\0\u12f0"+
    "\0\u1320\0\u1350\0\u1380\0\u13b0\0\u0420\0\u13e0\0\u1410\0\u1440"+
    "\0\u1470\0\u14a0\0\u14d0\0\u1500\0\u1530\0\u1560\0\u0420\0\u0420"+
    "\0\u0420\0\u1590\0\u15c0\0\u15f0\0\u1620\0\u1650\0\u1680\0\u16b0"+
    "\0\u16e0\0\u1710\0\u0420\0\u0420\0\u1740\0\u1770\0\u17a0\0\u17d0"+
    "\0\u1800\0\u1830\0\u1860\0\u1890\0\u0420\0\u18c0\0\u0420\0\u18f0"+
    "\0\u1920\0\u1950\0\u1980\0\u19b0\0\u19e0\0\u1a10\0\u1a40\0\u1a70"+
    "\0\u0420\0\u1aa0\0\u1ad0\0\u1b00\0\u1b30\0\u0420\0\u0420\0\u1b60"+
    "\0\u1b90\0\u1bc0\0\u1bf0\0\u1c20\0\u0420\0\u0420\0\u1c50\0\u0420"+
    "\0\u1c80\0\u1cb0\0\u0420\0\u1ce0\0\u1d10\0\u0420\0\u1d40\0\u1d70"+
    "\0\u0420\0\u1da0\0\u1dd0\0\u1e00\0\u1e30\0\u0420\0\u1e60\0\u1e90"+
    "\0\u1ec0\0\u0420\0\u0420\0\u1ef0\0\u1f20\0\u0420\0\u1f50\0\u1f80"+
    "\0\u1fb0\0\u0420\0\u0420\0\u1fe0\0\u2010\0\u2040\0\u0420\0\u0420"+
    "\0\u2070\0\u20a0\0\u0420\0\u20d0\0\u2100\0\u2130\0\u2160\0\u0420"+
    "\0\u2190\0\u21c0\0\u0420\0\u21f0\0\u0420\0\u0420\0\u2220\0\u2250"+
    "\0\u2280\0\u22b0\0\u22e0\0\u0420\0\u0420\0\u0420\0\u2310\0\u2340"+
    "\0\u2370\0\u0420\0\u23a0\0\u23d0\0\u0420\0\u2400\0\u2430\0\u2460"+
    "\0\u0420\0\u2490\0\u24c0\0\u0420\0\u0420\0\u24f0\0\u2520\0\u0420"+
    "\0\u0420\0\u0420\0\u2550\0\u0420\0\u2580\0\u25b0\0\u0420\0\u0420"+
    "\0\u25e0\0\u2610\0\u2640\0\u2670\0\u26a0\0\u0420\0\u26d0\0\u2700"+
    "\0\u2730\0\u0420\0\u2760\0\u0420\0\u2790\0\u27c0\0\u0420\0\u27f0"+
    "\0\u2820\0\u2850\0\u0420";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\0"+
    "\1\20\1\21\1\0\1\22\1\23\1\0\1\24\1\0"+
    "\1\25\11\0\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\0\1\2\61\0\1\44\3\0\1\45\2\0\1\46"+
    "\55\0\1\47\1\0\1\50\3\0\1\51\46\0\1\52"+
    "\7\0\1\53\46\0\1\54\5\0\1\55\57\0\1\56"+
    "\56\0\1\57\3\0\1\60\3\0\1\61\1\0\1\62"+
    "\41\0\1\63\11\0\1\64\43\0\1\65\3\0\1\66"+
    "\1\67\5\0\1\70\44\0\1\71\1\72\1\73\12\0"+
    "\1\74\42\0\1\75\4\0\1\76\57\0\1\77\5\0"+
    "\1\100\6\0\1\101\4\0\1\102\31\0\1\103\2\0"+
    "\1\104\1\105\22\0\1\106\31\0\1\107\3\0\1\110"+
    "\6\0\1\111\13\0\1\112\26\0\1\113\1\114\5\0"+
    "\1\115\10\0\1\116\11\0\1\117\31\0\1\120\6\0"+
    "\1\121\51\0\1\122\56\0\1\123\6\0\1\124\51\0"+
    "\1\125\52\0\1\126\6\0\1\127\57\0\1\130\202\0"+
    "\1\131\57\0\1\132\6\0\1\133\2\0\1\134\64\0"+
    "\1\135\56\0\1\136\60\0\1\137\66\0\1\140\64\0"+
    "\1\141\45\0\1\142\51\0\1\143\72\0\1\144\36\0"+
    "\1\145\2\0\1\146\56\0\1\147\1\150\15\0\1\151"+
    "\1\152\44\0\1\153\54\0\1\154\101\0\1\155\31\0"+
    "\1\156\66\0\1\157\64\0\1\160\53\0\1\161\47\0"+
    "\1\162\72\0\1\163\57\0\1\164\53\0\1\165\50\0"+
    "\1\166\73\0\1\167\44\0\1\170\104\0\1\171\31\0"+
    "\1\172\110\0\1\173\50\0\1\174\54\0\1\175\61\0"+
    "\1\176\74\0\1\177\21\0\1\200\2\0\1\201\3\0"+
    "\1\202\3\0\1\203\52\0\1\204\102\0\1\205\36\0"+
    "\1\206\70\0\1\207\37\0\1\210\66\0\1\211\103\0"+
    "\1\212\24\0\1\213\17\0\1\214\44\0\1\215\67\0"+
    "\1\216\56\0\1\217\45\0\1\220\77\0\1\221\44\0"+
    "\1\222\63\0\1\223\46\0\1\224\57\0\1\225\75\0"+
    "\1\226\40\0\1\227\76\0\1\230\65\0\1\231\55\0"+
    "\1\232\33\0\1\233\77\0\1\234\42\0\1\235\56\0"+
    "\1\236\67\0\1\237\46\0\1\240\16\0\1\241\60\0"+
    "\1\242\43\0\1\243\64\0\1\244\55\0\1\245\53\0"+
    "\1\246\56\0\1\247\53\0\1\250\65\0\1\251\57\0"+
    "\1\252\73\0\1\253\41\0\1\254\67\0\1\255\51\0"+
    "\1\256\57\0\1\257\101\0\1\260\37\0\1\261\55\0"+
    "\1\262\57\0\1\263\57\0\1\264\54\0\1\265\76\0"+
    "\1\266\56\0\1\267\44\0\1\270\56\0\1\271\107\0"+
    "\1\272\26\0\1\273\55\0\1\274\75\0\1\275\37\0"+
    "\1\276\61\0\1\277\60\0\1\300\60\0\1\301\66\0"+
    "\1\302\52\0\1\303\65\0\1\304\55\0\1\305\45\0"+
    "\1\306\61\0\1\307\76\0\1\310\36\0\1\311\57\0"+
    "\1\312\101\0\1\313\42\0\1\314\66\0\1\315\44\0"+
    "\1\316\56\0\1\317\71\0\1\320\61\0\1\321\44\0"+
    "\1\322\57\0\1\323\63\0\1\324\60\0\1\325\54\0"+
    "\1\326\65\0\1\327\52\0\1\330\105\0\1\331\26\0"+
    "\1\332\73\0\1\333\43\0\1\334\56\0\1\335\73\0"+
    "\1\336\43\0\1\337\110\0\1\340\55\0\1\341\36\0"+
    "\1\342\62\0\1\343\53\0\1\344\57\0\1\345\73\0"+
    "\1\346\43\0\1\347\60\0\1\350\53\0\1\351\56\0"+
    "\1\352\61\0\1\353\54\0\1\354\57\0\1\355\72\0"+
    "\1\356\51\0\1\357\55\0\1\360\55\0\1\361\61\0"+
    "\1\362\64\0\1\363\47\0\1\364\116\0\1\365\20\0"+
    "\1\366\73\0\1\367\71\0\1\370\36\0\1\371\65\0"+
    "\1\372\44\0\1\373\63\0\1\374\62\0\1\375\54\0"+
    "\1\376\66\0\1\377\51\0\1\u0100\60\0\1\u0101\64\0"+
    "\1\u0102\50\0\1\u0103\76\0\1\u0104\34\0\1\u0105\73\0"+
    "\1\u0106\61\0\1\u0107\44\0\1\u0108\55\0\1\u0109\64\0"+
    "\1\u010a\51\0\1\u010b\103\0\1\u010c\33\0\1\u010d\73\0"+
    "\1\u010e\51\0\1\u010f\51\0\1\u0110\62\0\1\u0111\70\0"+
    "\1\u0112\57\0\1\u0113\51\0\1\u0114\54\0\1\u0115\54\0"+
    "\1\u0116\63\0\1\u0117\63\0\1\u0118\50\0\1\u0119\56\0"+
    "\1\u011a\64\0\1\u011b\55\0\1\u011c\62\0\1\u011d\60\0"+
    "\1\u011e\57\0\1\u011f\60\0\1\u0120\50\0\1\u0121\64\0"+
    "\1\u0122\64\0\1\u0123\42\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10368];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\24\0\13\11\2\1\14\0\1\1\12\0"+
    "\2\11\4\0\1\11\7\0\1\11\15\0\1\11\1\0"+
    "\2\11\3\0\1\11\6\0\1\11\5\0\3\11\1\0"+
    "\1\11\12\0\3\11\3\0\1\1\4\0\1\11\11\0"+
    "\3\11\3\0\1\1\5\0\2\11\10\0\1\11\1\0"+
    "\1\11\11\0\1\11\4\0\2\11\5\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\2\0\1\11\4\0"+
    "\1\11\3\0\2\11\2\0\1\11\3\0\2\11\3\0"+
    "\2\11\2\0\1\11\4\0\1\11\2\0\1\11\1\0"+
    "\2\11\5\0\3\11\3\0\1\11\2\0\1\11\3\0"+
    "\1\11\2\0\2\11\2\0\3\11\1\0\1\11\2\0"+
    "\2\11\5\0\1\11\3\0\1\11\1\0\1\11\2\0"+
    "\1\11\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Symbol symbol(int type, Object value){
       return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 174) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /*Ignore*/
            } 
            // fall through
          case 83: break;
          case 2: 
            { return new Symbol(sym.Punto, yychar, yyline, yytext());
            } 
            // fall through
          case 84: break;
          case 3: 
            { return new Symbol(sym.Coma, yychar, yyline, yytext());
            } 
            // fall through
          case 85: break;
          case 4: 
            { return new Symbol(sym.Punto_Coma, yychar, yyline, yytext());
            } 
            // fall through
          case 86: break;
          case 5: 
            { return new Symbol(sym.Negar, yychar, yyline, yytext());
            } 
            // fall through
          case 87: break;
          case 6: 
            { return new Symbol(sym.Parentesis_a, yychar, yyline, yytext());
            } 
            // fall through
          case 88: break;
          case 7: 
            { return new Symbol(sym.Parentesis_c, yychar, yyline, yytext());
            } 
            // fall through
          case 89: break;
          case 8: 
            { return new Symbol(sym.Asterisco, yychar, yyline, yytext());
            } 
            // fall through
          case 90: break;
          case 9: 
            { return new Symbol(sym.Arroba, yychar, yyline, yytext());
            } 
            // fall through
          case 91: break;
          case 10: 
            { return new Symbol(sym.Corchete_a, yychar, yyline, yytext());
            } 
            // fall through
          case 92: break;
          case 11: 
            { return new Symbol(sym.Corchete_c, yychar, yyline, yytext());
            } 
            // fall through
          case 93: break;
          case 12: 
            { return new Symbol(sym.Igual, yychar, yyline, yytext());
            } 
            // fall through
          case 94: break;
          case 13: 
            { return new Symbol(sym.MayorQue, yychar, yyline, yytext());
            } 
            // fall through
          case 95: break;
          case 14: 
            { return new Symbol(sym.MenorQue, yychar, yyline, yytext());
            } 
            // fall through
          case 96: break;
          case 15: 
            { return new Symbol(sym.As, yychar, yyline, yytext());
            } 
            // fall through
          case 97: break;
          case 16: 
            { return new Symbol(sym.On, yychar, yyline, yytext());
            } 
            // fall through
          case 98: break;
          case 17: 
            { return new Symbol(sym.Of, yychar, yyline, yytext());
            } 
            // fall through
          case 99: break;
          case 18: 
            { return new Symbol(sym.By, yychar, yyline, yytext());
            } 
            // fall through
          case 100: break;
          case 19: 
            { return new Symbol(sym.If, yychar, yyline, yytext());
            } 
            // fall through
          case 101: break;
          case 20: 
            { return new Symbol(sym.Go, yychar, yyline, yytext());
            } 
            // fall through
          case 102: break;
          case 21: 
            { return new Symbol(sym.MayorIgual, yychar, yyline, yytext());
            } 
            // fall through
          case 103: break;
          case 22: 
            { return new Symbol(sym.MenorIgual, yychar, yyline, yytext());
            } 
            // fall through
          case 104: break;
          case 23: 
            { return new Symbol(sym.Top, yychar, yyline, yytext());
            } 
            // fall through
          case 105: break;
          case 24: 
            { return new Symbol(sym.Not, yychar, yyline, yytext());
            } 
            // fall through
          case 106: break;
          case 25: 
            { return new Symbol(sym.Add, yychar, yyline, yytext());
            } 
            // fall through
          case 107: break;
          case 26: 
            { return new Symbol(sym.Asc, yychar, yyline, yytext());
            } 
            // fall through
          case 108: break;
          case 27: 
            { return new Symbol(sym.Avg, yychar, yyline, yytext());
            } 
            // fall through
          case 109: break;
          case 28: 
            { return new Symbol(sym.End, yychar, yyline, yytext());
            } 
            // fall through
          case 110: break;
          case 29: 
            { return new Symbol(sym.BIT, yychar, yyline, yytext());
            } 
            // fall through
          case 111: break;
          case 30: 
            { return new Symbol(sym.Bit, yychar, yyline, yytext());
            } 
            // fall through
          case 112: break;
          case 31: 
            { return new Symbol(sym.Sum, yychar, yyline, yytext());
            } 
            // fall through
          case 113: break;
          case 32: 
            { return new Symbol(sym.INT, yychar, yyline, yytext());
            } 
            // fall through
          case 114: break;
          case 33: 
            { return new Symbol(sym.Int, yychar, yyline, yytext());
            } 
            // fall through
          case 115: break;
          case 34: 
            { return new Symbol(sym.Max, yychar, yyline, yytext());
            } 
            // fall through
          case 116: break;
          case 35: 
            { return new Symbol(sym.Min, yychar, yyline, yytext());
            } 
            // fall through
          case 117: break;
          case 36: 
            { return new Symbol(sym.Key, yychar, yyline, yytext());
            } 
            // fall through
          case 118: break;
          case 37: 
            { return new Symbol(sym.Transaction, yychar, yyline, yytext());
            } 
            // fall through
          case 119: break;
          case 38: 
            { return new Symbol(sym.User, yychar, yyline, yytext());
            } 
            // fall through
          case 120: break;
          case 39: 
            { return new Symbol(sym.Null, yychar, yyline, yytext());
            } 
            // fall through
          case 121: break;
          case 40: 
            { return new Symbol(sym.Drop, yychar, yyline, yytext());
            } 
            // fall through
          case 122: break;
          case 41: 
            { return new Symbol(sym.Desc, yychar, yyline, yytext());
            } 
            // fall through
          case 123: break;
          case 42: 
            { return new Symbol(sym.Into, yychar, yyline, yytext());
            } 
            // fall through
          case 124: break;
          case 43: 
            { return new Symbol(sym.From, yychar, yyline, yytext());
            } 
            // fall through
          case 125: break;
          case 44: 
            { return new Symbol(sym.Full, yychar, yyline, yytext());
            } 
            // fall through
          case 126: break;
          case 45: 
            { return new Symbol(sym.View, yychar, yyline, yytext());
            } 
            // fall through
          case 127: break;
          case 46: 
            { return new Symbol(sym.Left, yychar, yyline, yytext());
            } 
            // fall through
          case 128: break;
          case 47: 
            { return new Symbol(sym.Join, yychar, yyline, yytext());
            } 
            // fall through
          case 129: break;
          case 48: 
            { return new Symbol(sym.Table, yychar, yyline, yytext());
            } 
            // fall through
          case 130: break;
          case 49: 
            { return new Symbol(sym.Right, yychar, yyline, yytext());
            } 
            // fall through
          case 131: break;
          case 50: 
            { return new Symbol(sym.Count, yychar, yyline, yytext());
            } 
            // fall through
          case 132: break;
          case 51: 
            { return new Symbol(sym.Alter, yychar, yyline, yytext());
            } 
            // fall through
          case 133: break;
          case 52: 
            { return new Symbol(sym.Order, yychar, yyline, yytext());
            } 
            // fall through
          case 134: break;
          case 53: 
            { return new Symbol(sym.Outer, yychar, yyline, yytext());
            } 
            // fall through
          case 135: break;
          case 54: 
            { return new Symbol(sym.Begin, yychar, yyline, yytext());
            } 
            // fall through
          case 136: break;
          case 55: 
            { return new Symbol(sym.Inner, yychar, yyline, yytext());
            } 
            // fall through
          case 137: break;
          case 56: 
            { return new Symbol(sym.Index, yychar, yyline, yytext());
            } 
            // fall through
          case 138: break;
          case 57: 
            { return new Symbol(sym.FLOAT, yychar, yyline, yytext());
            } 
            // fall through
          case 139: break;
          case 58: 
            { return new Symbol(sym.Float, yychar, yyline, yytext());
            } 
            // fall through
          case 140: break;
          case 59: 
            { return new Symbol(sym.Group, yychar, yyline, yytext());
            } 
            // fall through
          case 141: break;
          case 60: 
            { return new Symbol(sym.Unique, yychar, yyline, yytext());
            } 
            // fall through
          case 142: break;
          case 61: 
            { return new Symbol(sym.Column, yychar, yyline, yytext());
            } 
            // fall through
          case 143: break;
          case 62: 
            { return new Symbol(sym.Commit, yychar, yyline, yytext());
            } 
            // fall through
          case 144: break;
          case 63: 
            { return new Symbol(sym.Exists, yychar, yyline, yytext());
            } 
            // fall through
          case 145: break;
          case 64: 
            { return new Symbol(sym.Select, yychar, yyline, yytext());
            } 
            // fall through
          case 146: break;
          case 65: 
            { return new Symbol(sym.String, yychar, yyline, yytext());
            } 
            // fall through
          case 147: break;
          case 66: 
            { return new Symbol(sym.Insert, yychar, yyline, yytext());
            } 
            // fall through
          case 148: break;
          case 67: 
            { return new Symbol(sym.Values, yychar, yyline, yytext());
            } 
            // fall through
          case 149: break;
          case 68: 
            { return new Symbol(sym.Rebuild, yychar, yyline, yytext());
            } 
            // fall through
          case 150: break;
          case 69: 
            { return new Symbol(sym.Collate, yychar, yyline, yytext());
            } 
            // fall through
          case 151: break;
          case 70: 
            { return new Symbol(sym.Primary, yychar, yyline, yytext());
            } 
            // fall through
          case 152: break;
          case 71: 
            { return new Symbol(sym.Percent, yychar, yyline, yytext());
            } 
            // fall through
          case 153: break;
          case 72: 
            { return new Symbol(sym.Foreign, yychar, yyline, yytext());
            } 
            // fall through
          case 154: break;
          case 73: 
            { return new Symbol(sym.VARCHAR, yychar, yyline, yytext());
            } 
            // fall through
          case 155: break;
          case 74: 
            { return new Symbol(sym.Truncate, yychar, yyline, yytext());
            } 
            // fall through
          case 156: break;
          case 75: 
            { return new Symbol(sym.Rollback, yychar, yyline, yytext());
            } 
            // fall through
          case 157: break;
          case 76: 
            { return new Symbol(sym.Database, yychar, yyline, yytext());
            } 
            // fall through
          case 158: break;
          case 77: 
            { return new Symbol(sym.Distinct, yychar, yyline, yytext());
            } 
            // fall through
          case 159: break;
          case 78: 
            { return new Symbol(sym.Save, yychar, yyline, yytext());
            } 
            // fall through
          case 160: break;
          case 79: 
            { return new Symbol(sym.Constraint, yychar, yyline, yytext());
            } 
            // fall through
          case 161: break;
          case 80: 
            { return new Symbol(sym.Tran, yychar, yyline, yytext());
            } 
            // fall through
          case 162: break;
          case 81: 
            { return new Symbol(sym.Nonclustered, yychar, yyline, yytext());
            } 
            // fall through
          case 163: break;
          case 82: 
            { return new Symbol(sym.Id, yychar, yyline, yytext());
            } 
            // fall through
          case 164: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
