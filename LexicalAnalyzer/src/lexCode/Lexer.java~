/* The following code was generated by JFlex 1.7.0 */

package lexCode;
import static lexCode.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/Bryan/Documents/NetBeansProjects/Lex_Analyzer/LexicalAnalyzer/src/lexCode/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\7\1\11\1\33\1\33\1\10\22\0\1\7\1\17\1\0"+
    "\1\32\1\0\1\16\1\21\1\34\1\26\1\27\1\14\1\12\1\7"+
    "\1\13\1\23\1\15\2\3\10\2\1\0\1\16\1\17\1\20\1\17"+
    "\1\0\1\16\1\37\1\52\1\47\1\40\1\41\1\50\1\56\1\51"+
    "\1\53\1\65\1\60\1\6\1\61\1\4\1\46\1\45\1\66\1\44"+
    "\1\54\1\43\1\5\1\63\1\62\1\42\1\55\1\57\1\24\1\0"+
    "\1\25\1\0\1\64\1\0\3\1\1\36\1\35\1\36\24\1\1\30"+
    "\1\22\1\31\7\0\1\33\u1fa2\0\1\33\1\33\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\3\2\1\5\5\6"+
    "\2\1\5\6\1\1\25\2\1\7\1\0\1\7\3\2"+
    "\1\10\10\2\3\0\1\11\1\12\2\0\4\2\1\10"+
    "\3\2\1\10\20\2\1\10\17\2\1\10\1\2\1\10"+
    "\2\2\1\10\26\2\1\10\1\2\1\10\21\2\1\10"+
    "\17\2\1\7\1\0\14\2\1\10\7\2\3\0\2\11"+
    "\2\0\1\13\1\2\1\10\7\2\1\10\7\2\1\10"+
    "\50\2\1\10\26\2\1\10\13\2\1\10\1\2\1\10"+
    "\11\2\1\10\12\2\1\10\4\2\1\10\7\2\1\4"+
    "\12\2\1\0\1\11\1\12\1\0\1\3\14\2\1\10"+
    "\3\2\1\0\11\2\1\10\3\2\1\10\3\2\1\10"+
    "\17\2\1\10\2\2\1\10\2\2\1\10\17\2\1\10"+
    "\42\2\2\10\22\2\1\0\1\2\1\10\46\2\1\10"+
    "\27\2\1\10\5\2\1\0\1\10\45\2\1\0\11\2"+
    "\1\10\1\2\1\10\11\2\1\10\4\2\1\10\6\2"+
    "\1\10\3\2\1\10\33\2\1\10\23\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[668];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\245\0\334\0\u0113\0\u014a"+
    "\0\u0181\0\u01b8\0\u01ef\0\67\0\u0226\0\u025d\0\u0294\0\u02cb"+
    "\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483"+
    "\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b"+
    "\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc\0\u07f3"+
    "\0\u082a\0\u0861\0\u0898\0\u08cf\0\u0906\0\67\0\u093d\0\u0974"+
    "\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c"+
    "\0\u0b63\0\u0b9a\0\u0302\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad"+
    "\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\156\0\u0df7\0\u0e2e"+
    "\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6"+
    "\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e"+
    "\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u1356"+
    "\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e"+
    "\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6"+
    "\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u1847\0\u187e"+
    "\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u1991\0\u19c8\0\u19ff\0\u1a36"+
    "\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\u1b80\0\u1bb7\0\u1bee"+
    "\0\u1c25\0\u1c5c\0\u1c93\0\u1cca\0\u1d01\0\u1d38\0\u1d6f\0\u1da6"+
    "\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e"+
    "\0\u1f95\0\u1fcc\0\u2003\0\u203a\0\u2071\0\u20a8\0\u20df\0\u2116"+
    "\0\u214d\0\u2184\0\u21bb\0\u21f2\0\u2229\0\u2260\0\u2297\0\u22ce"+
    "\0\u2305\0\u233c\0\u2373\0\u23aa\0\u23e1\0\u2418\0\u244f\0\u2486"+
    "\0\u24bd\0\u24f4\0\u252b\0\u2562\0\u2599\0\u25d0\0\u2607\0\u263e"+
    "\0\u2675\0\u26ac\0\u26e3\0\u271a\0\u2751\0\u2788\0\u27bf\0\u27f6"+
    "\0\u282d\0\u2864\0\u289b\0\u28d2\0\67\0\u2909\0\u2940\0\67"+
    "\0\u2977\0\u29ae\0\u29e5\0\u2a1c\0\u2a53\0\u1243\0\u2a8a\0\u2ac1"+
    "\0\u2af8\0\u2b2f\0\u2b66\0\u2b9d\0\u2bd4\0\u2c0b\0\u2c42\0\u2c79"+
    "\0\u2cb0\0\u2ce7\0\u2d1e\0\u2d55\0\u2d8c\0\u2dc3\0\u2dfa\0\u2e31"+
    "\0\u2e68\0\u2e9f\0\u2ed6\0\u2f0d\0\u2f44\0\u2f7b\0\u2fb2\0\u2fe9"+
    "\0\u3020\0\u3057\0\u308e\0\u30c5\0\u30fc\0\u3133\0\u316a\0\u31a1"+
    "\0\u31d8\0\u320f\0\u3246\0\u327d\0\u32b4\0\u32eb\0\u3322\0\u3359"+
    "\0\u3390\0\u33c7\0\u33fe\0\u3435\0\u346c\0\u34a3\0\u34da\0\u3511"+
    "\0\u3548\0\u357f\0\u35b6\0\u35ed\0\u3624\0\u365b\0\u3692\0\u36c9"+
    "\0\u3700\0\u3737\0\u376e\0\u37a5\0\u37dc\0\u3813\0\u384a\0\u3881"+
    "\0\u38b8\0\u38ef\0\u3926\0\u395d\0\u3994\0\u39cb\0\u3a02\0\u3a39"+
    "\0\u3a70\0\u3aa7\0\u3ade\0\u3b15\0\u3b4c\0\u2675\0\u3b83\0\u3bba"+
    "\0\u3bf1\0\u3c28\0\u3c5f\0\u3c96\0\u3ccd\0\u3d04\0\u3d3b\0\u3d72"+
    "\0\u3da9\0\u3de0\0\u3e17\0\u3e4e\0\u3e85\0\u3ebc\0\u3ef3\0\u3f2a"+
    "\0\u3f61\0\u3f98\0\u3fcf\0\u4006\0\u403d\0\u4074\0\u40ab\0\u40e2"+
    "\0\u4119\0\u4150\0\u4187\0\u41be\0\u41f5\0\u422c\0\u4263\0\u429a"+
    "\0\u42d1\0\u4308\0\u433f\0\u4376\0\u43ad\0\u43e4\0\u441b\0\u4452"+
    "\0\u4489\0\u44c0\0\u44f7\0\u452e\0\u4565\0\u459c\0\u45d3\0\u460a"+
    "\0\u4641\0\u4678\0\u46af\0\u46e6\0\u471d\0\u2864\0\u4754\0\u4754"+
    "\0\67\0\u478b\0\u47c2\0\u47f9\0\u4830\0\u4867\0\u489e\0\u48d5"+
    "\0\u490c\0\u4943\0\u497a\0\u49b1\0\u49e8\0\u4a1f\0\u4a56\0\u4a8d"+
    "\0\u4ac4\0\u4afb\0\u4b32\0\u4b69\0\u4ba0\0\u4bd7\0\u4c0e\0\u4c45"+
    "\0\u4c7c\0\u4cb3\0\u4cea\0\u4d21\0\u4d58\0\u4d8f\0\u4dc6\0\u4dfd"+
    "\0\u4e34\0\u4e6b\0\u4ea2\0\u4ed9\0\u4f10\0\u4f47\0\u4f7e\0\u4fb5"+
    "\0\u4fec\0\u5023\0\u505a\0\u5091\0\u50c8\0\u50ff\0\u5136\0\u516d"+
    "\0\u51a4\0\u51db\0\u5212\0\u5249\0\u5280\0\u52b7\0\u52ee\0\u5325"+
    "\0\u535c\0\u5393\0\u53ca\0\u5401\0\u5438\0\u546f\0\u54a6\0\u54dd"+
    "\0\u5514\0\u554b\0\u5582\0\u55b9\0\u55f0\0\u5627\0\u565e\0\u4308"+
    "\0\u5695\0\u56cc\0\u5703\0\u573a\0\u5771\0\u57a8\0\u57df\0\u5816"+
    "\0\u584d\0\u5884\0\u58bb\0\u58f2\0\u5929\0\u5960\0\u5997\0\u59ce"+
    "\0\u5a05\0\u5a3c\0\u5a73\0\u5aaa\0\u5ae1\0\u5b18\0\u5b4f\0\u5b86"+
    "\0\u5bbd\0\u5bf4\0\u5c2b\0\u5c62\0\u5c99\0\u5cd0\0\u5d07\0\u5d3e"+
    "\0\u5d75\0\u5dac\0\u5de3\0\u5e1a\0\u5e51\0\u233c\0\u5e88\0\u5ebf"+
    "\0\u5ef6\0\u5f2d\0\u5f64\0\u5f9b\0\u5fd2\0\u6009\0\u6040\0\u29ae"+
    "\0\u6077\0\u60ae\0\u60e5\0\u611c\0\u6153\0\u618a\0\u61c1\0\u61f8"+
    "\0\u622f\0\u6266\0\u629d\0\u62d4\0\u630b\0\u6342\0\u6379\0\u63b0"+
    "\0\u63e7\0\u641e\0\u6455\0\u648c\0\u64c3\0\u64fa\0\u6531\0\u6568"+
    "\0\u659f\0\u65d6\0\u660d\0\u6644\0\u667b\0\u66b2\0\u66e9\0\u6720"+
    "\0\u6757\0\u678e\0\u67c5\0\u3d04\0\u67fc\0\u6833\0\u686a\0\u68a1"+
    "\0\u68d8\0\u690f\0\u6946\0\u697d\0\u69b4\0\u69eb\0\u6a22\0\u6a59"+
    "\0\u6a90\0\u6ac7\0\u6afe\0\u6b35\0\u6b6c\0\u6ba3\0\u6bda\0\u6c11"+
    "\0\u6c48\0\u6c7f\0\u6cb6\0\u6ced\0\u6d24\0\u6d5b\0\u6d92\0\u6dc9"+
    "\0\u6e00\0\u6e37\0\u6e6e\0\u6ea5\0\u6edc\0\u6f13\0\u6f4a\0\u6f81"+
    "\0\u6fb8\0\u459c\0\u6fef\0\u7026\0\u705d\0\u7094\0\u70cb\0\u7102"+
    "\0\u29e5\0\u7139\0\u7170\0\u71a7\0\u71de\0\u7215\0\u724c\0\u7283"+
    "\0\u72ba\0\u72f1\0\u7328\0\u735f\0\u7396\0\u73cd\0\u7404\0\u743b"+
    "\0\u7472\0\u74a9\0\u74e0\0\u7517\0\u754e\0\u7585\0\u75bc\0\u75f3"+
    "\0\u762a\0\u7661\0\u7698\0\u76cf\0\u7706\0\u773d\0\u7774\0\u77ab"+
    "\0\u77e2\0\u7819\0\u7850\0\u7887\0\u78be\0\u78f5\0\u792c\0\u7963"+
    "\0\u799a\0\u79d1\0\u7a08\0\u7a3f\0\u7a76\0\u7aad\0\u7ae4\0\u7b1b"+
    "\0\u7b52\0\u7b89\0\u2788\0\u7bc0\0\u7bf7\0\u7c2e\0\u7c65\0\u7c9c"+
    "\0\u7cd3\0\u15b3\0\u7d0a\0\u7d41\0\u7850\0\u7d78\0\u7daf\0\u3f98"+
    "\0\u7de6\0\67\0\u7e1d\0\u7e54\0\u7e8b\0\u7ec2\0\u7ef9\0\u7f30"+
    "\0\u7f67\0\u7f9e\0\u7fd5\0\u800c\0\u8043\0\u807a\0\u80b1\0\u80e8"+
    "\0\u811f\0\u8156\0\u818d\0\u81c4\0\u81fb\0\u8232\0\u8269\0\u82a0"+
    "\0\u82d7\0\u830e\0\u8345\0\u837c\0\u83b3\0\u83ea\0\u8421\0\u8458"+
    "\0\u848f\0\u84c6\0\u84fd\0\u8534\0\u856b\0\u85a2\0\u85d9\0\u8610"+
    "\0\u8647\0\u867e\0\u86b5\0\u86ec\0\u8723\0\u875a\0\u8791\0\u87c8"+
    "\0\u87ff\0\u8836\0\u886d\0\u88a4\0\u7f67\0\u88db\0\u8912\0\u8949"+
    "\0\u8980\0\u89b7\0\u89ee\0\u8a25";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[668];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\3\11"+
    "\1\12\1\13\1\14\1\15\1\14\2\16\1\17\1\20"+
    "\1\21\1\22\1\14\1\23\1\14\1\24\1\14\1\25"+
    "\1\0\1\26\2\3\1\27\1\30\1\31\1\3\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\3\1\53\1\3\70\0\6\3\26\0\32\3\2\0"+
    "\2\4\17\0\1\54\11\0\1\55\1\56\1\0\1\56"+
    "\1\55\6\0\1\56\17\0\4\3\1\57\1\3\26\0"+
    "\2\3\1\60\1\3\1\61\4\3\1\62\1\63\17\3"+
    "\1\0\3\3\1\64\2\3\26\0\10\3\1\65\6\3"+
    "\1\66\12\3\1\0\6\3\26\0\2\3\1\67\1\3"+
    "\1\70\4\3\1\71\4\3\1\72\13\3\7\0\3\11"+
    "\100\0\1\73\45\0\2\74\17\0\1\73\57\0\1\75"+
    "\1\76\71\0\1\14\67\0\1\14\67\0\1\14\46\0"+
    "\2\77\110\0\1\14\54\0\1\100\13\0\1\14\70\0"+
    "\1\14\67\0\1\14\35\0\1\101\2\0\3\101\26\0"+
    "\32\101\1\0\3\3\1\102\1\103\1\104\26\0\3\3"+
    "\1\105\2\3\1\106\1\107\2\3\1\110\2\3\1\111"+
    "\1\3\1\112\6\3\1\113\3\3\1\0\4\3\1\114"+
    "\1\3\26\0\2\3\1\115\1\3\1\116\2\3\1\117"+
    "\1\3\1\120\3\3\1\121\1\122\13\3\1\0\3\3"+
    "\1\123\1\3\1\124\26\0\5\3\1\125\1\3\1\126"+
    "\7\3\1\127\12\3\1\0\6\3\26\0\2\3\1\130"+
    "\1\3\1\131\2\3\1\132\1\3\1\133\2\3\1\134"+
    "\1\3\1\135\1\136\12\3\1\0\4\3\1\137\1\3"+
    "\26\0\2\3\1\140\1\3\1\141\4\3\1\142\4\3"+
    "\1\143\13\3\1\0\4\3\1\144\1\145\26\0\2\3"+
    "\1\146\1\3\1\147\2\3\1\150\1\3\1\151\4\3"+
    "\1\152\13\3\1\0\3\3\1\153\1\154\1\3\26\0"+
    "\7\3\1\155\1\156\1\3\1\157\1\160\12\3\1\161"+
    "\3\3\1\0\4\3\1\162\1\163\26\0\2\3\1\164"+
    "\4\3\1\165\1\3\1\166\2\3\1\167\15\3\1\0"+
    "\4\3\1\170\1\171\26\0\2\3\1\172\1\3\1\173"+
    "\2\3\1\174\1\3\1\175\4\3\1\176\13\3\1\0"+
    "\6\3\26\0\2\3\1\177\6\3\1\200\20\3\1\0"+
    "\4\3\1\201\1\3\26\0\2\3\1\202\1\3\1\203"+
    "\2\3\1\204\1\3\1\205\4\3\1\206\1\3\1\106"+
    "\11\3\1\0\3\3\1\207\2\3\26\0\3\3\1\210"+
    "\7\3\1\106\3\3\1\211\4\3\1\212\5\3\1\0"+
    "\4\3\1\213\1\3\26\0\2\3\1\214\1\3\1\215"+
    "\1\3\1\216\1\3\1\217\1\220\1\221\1\3\1\222"+
    "\1\3\1\223\1\3\1\224\3\3\1\225\4\3\1\226"+
    "\1\0\6\3\26\0\4\3\1\227\25\3\1\0\5\3"+
    "\1\230\26\0\4\3\1\231\2\3\1\232\1\3\1\233"+
    "\20\3\1\0\6\3\26\0\11\3\1\234\20\3\1\0"+
    "\6\3\26\0\4\3\1\235\11\3\1\236\13\3\1\0"+
    "\6\3\26\0\2\3\1\237\1\3\1\240\4\3\1\241"+
    "\4\3\1\242\13\3\1\0\6\3\26\0\2\3\1\243"+
    "\4\3\1\244\1\3\1\245\2\3\1\246\1\3\1\247"+
    "\13\3\1\0\6\3\26\0\2\3\1\250\13\3\1\251"+
    "\13\3\1\0\6\3\26\0\11\3\1\252\20\3\2\0"+
    "\2\54\31\0\1\55\1\56\1\0\1\56\1\55\6\0"+
    "\1\56\20\0\2\253\6\0\2\254\54\0\5\3\1\255"+
    "\26\0\24\3\1\256\5\3\1\0\6\3\26\0\6\3"+
    "\1\257\15\3\1\260\5\3\1\0\6\3\26\0\5\3"+
    "\1\231\24\3\1\0\3\3\1\261\2\3\26\0\6\3"+
    "\1\106\3\3\1\262\17\3\1\0\6\3\26\0\14\3"+
    "\1\227\15\3\1\0\6\3\26\0\10\3\1\263\5\3"+
    "\1\264\4\3\1\265\6\3\1\0\6\3\26\0\3\3"+
    "\1\266\4\3\1\267\21\3\1\0\6\3\26\0\2\3"+
    "\1\270\1\3\1\271\11\3\1\272\13\3\1\0\3\3"+
    "\1\273\2\3\26\0\17\3\1\231\12\3\1\0\6\3"+
    "\26\0\2\3\1\274\10\3\1\231\12\3\1\275\3\3"+
    "\1\0\6\3\26\0\2\3\1\276\7\3\1\277\12\3"+
    "\1\267\4\3\1\0\3\3\1\300\2\3\26\0\23\3"+
    "\1\107\6\3\2\0\2\74\17\0\1\301\43\0\14\302"+
    "\1\303\52\302\10\76\1\304\1\305\55\76\2\0\2\77"+
    "\31\0\1\306\3\0\1\306\27\0\2\307\63\0\34\101"+
    "\1\310\32\101\1\0\6\3\26\0\3\3\1\106\14\3"+
    "\1\106\11\3\1\0\6\3\26\0\6\3\1\311\23\3"+
    "\1\0\5\3\1\312\26\0\6\3\1\267\23\3\1\0"+
    "\6\3\26\0\2\3\2\106\26\3\1\0\6\3\26\0"+
    "\4\3\1\106\25\3\1\0\6\3\26\0\6\3\1\313"+
    "\23\3\1\0\6\3\26\0\17\3\1\314\12\3\1\0"+
    "\6\3\26\0\12\3\1\106\4\3\1\315\12\3\1\0"+
    "\6\3\26\0\21\3\1\106\10\3\1\0\6\3\26\0"+
    "\24\3\1\316\5\3\1\0\6\3\26\0\6\3\1\317"+
    "\11\3\1\106\11\3\1\0\3\3\1\235\1\3\1\320"+
    "\26\0\2\3\1\321\7\3\1\322\1\323\3\3\1\324"+
    "\12\3\1\0\6\3\26\0\11\3\1\316\20\3\1\0"+
    "\4\3\1\325\1\3\26\0\24\3\1\326\5\3\1\0"+
    "\6\3\26\0\12\3\1\327\17\3\1\0\6\3\26\0"+
    "\2\3\1\330\14\3\1\331\12\3\1\0\6\3\26\0"+
    "\3\3\1\332\26\3\1\0\6\3\26\0\17\3\1\107"+
    "\12\3\1\0\6\3\26\0\4\3\1\333\1\3\1\334"+
    "\3\3\1\335\3\3\1\336\13\3\1\0\6\3\26\0"+
    "\7\3\1\337\22\3\1\0\6\3\26\0\12\3\1\340"+
    "\17\3\1\0\6\3\26\0\15\3\1\341\14\3\1\0"+
    "\6\3\26\0\5\3\1\342\16\3\1\343\5\3\1\0"+
    "\4\3\1\344\1\3\26\0\2\3\1\345\13\3\1\346"+
    "\1\3\1\347\11\3\1\0\6\3\26\0\10\3\1\106"+
    "\21\3\1\0\6\3\26\0\4\3\1\350\25\3\1\0"+
    "\6\3\26\0\24\3\1\351\5\3\1\0\6\3\26\0"+
    "\4\3\1\352\25\3\1\0\5\3\1\107\26\0\32\3"+
    "\1\0\6\3\26\0\16\3\1\353\13\3\1\0\5\3"+
    "\1\354\26\0\2\3\1\355\3\3\1\356\1\3\1\357"+
    "\1\3\1\360\1\361\3\3\1\362\6\3\1\363\3\3"+
    "\1\0\5\3\1\364\26\0\25\3\1\365\4\3\1\0"+
    "\6\3\26\0\21\3\1\366\10\3\1\0\6\3\26\0"+
    "\15\3\1\367\14\3\1\0\6\3\26\0\2\3\1\350"+
    "\27\3\1\0\6\3\26\0\3\3\1\106\3\3\1\370"+
    "\7\3\1\371\12\3\1\0\6\3\26\0\7\3\1\372"+
    "\22\3\1\0\6\3\26\0\4\3\1\373\4\3\1\374"+
    "\4\3\1\375\13\3\1\0\6\3\26\0\17\3\1\376"+
    "\12\3\1\0\6\3\26\0\26\3\1\377\3\3\1\0"+
    "\5\3\1\235\26\0\32\3\1\0\6\3\26\0\6\3"+
    "\1\u0100\23\3\1\0\6\3\26\0\3\3\1\267\26\3"+
    "\1\0\6\3\26\0\4\3\1\u0101\1\3\1\313\23\3"+
    "\1\0\6\3\26\0\6\3\1\u0102\23\3\1\0\6\3"+
    "\26\0\13\3\1\u0103\16\3\1\0\6\3\26\0\4\3"+
    "\1\u0104\25\3\1\0\6\3\26\0\7\3\1\u0105\22\3"+
    "\1\0\4\3\1\u0106\1\3\26\0\11\3\1\124\20\3"+
    "\1\0\6\3\26\0\6\3\1\u0107\10\3\1\u0108\12\3"+
    "\1\0\6\3\26\0\4\3\1\u0109\4\3\1\u010a\20\3"+
    "\1\0\3\3\1\u010b\1\u010c\1\u010d\26\0\2\3\1\u010e"+
    "\4\3\1\u010f\14\3\1\u0110\5\3\1\0\6\3\26\0"+
    "\2\3\1\u0111\1\3\1\u0112\25\3\1\0\3\3\1\u0113"+
    "\1\3\1\u0114\26\0\32\3\1\0\6\3\26\0\11\3"+
    "\1\u0115\20\3\1\0\5\3\1\124\26\0\32\3\1\0"+
    "\6\3\26\0\6\3\1\u0116\23\3\1\0\6\3\26\0"+
    "\4\3\1\u0117\4\3\1\u0118\20\3\1\0\4\3\1\u0119"+
    "\1\3\26\0\7\3\1\u011a\22\3\1\0\5\3\1\u011b"+
    "\26\0\7\3\1\u011c\22\3\1\0\6\3\26\0\26\3"+
    "\1\u011d\3\3\1\0\4\3\1\u011e\1\u011f\26\0\32\3"+
    "\1\0\5\3\1\u0120\26\0\32\3\1\0\6\3\26\0"+
    "\12\3\1\u0121\17\3\1\0\6\3\26\0\6\3\1\u0122"+
    "\12\3\1\252\10\3\1\0\6\3\26\0\4\3\1\u0123"+
    "\4\3\1\u0124\20\3\1\0\6\3\26\0\6\3\1\u0125"+
    "\23\3\1\0\6\3\26\0\6\3\1\u0126\23\3\1\0"+
    "\3\3\1\267\2\3\26\0\3\3\1\u0127\2\3\1\u0128"+
    "\1\3\1\u0129\1\3\1\u012a\3\3\1\u012b\1\u012c\12\3"+
    "\1\0\6\3\26\0\4\3\1\u012d\25\3\1\0\6\3"+
    "\26\0\11\3\1\u012e\20\3\1\0\6\3\26\0\24\3"+
    "\1\u012f\5\3\1\0\6\3\26\0\15\3\1\u0130\6\3"+
    "\1\106\5\3\1\0\6\3\26\0\26\3\1\107\3\3"+
    "\1\0\5\3\1\u0131\26\0\6\3\1\u0132\3\3\1\u0133"+
    "\4\3\1\u0134\4\3\1\u0135\5\3\1\0\6\3\26\0"+
    "\2\3\1\u0136\27\3\1\0\6\3\26\0\2\3\1\u0137"+
    "\27\3\1\0\6\3\26\0\24\3\1\107\5\3\1\0"+
    "\6\3\26\0\7\3\1\u0138\4\3\1\u0139\15\3\1\0"+
    "\4\3\1\u013a\1\3\26\0\32\3\1\0\6\3\26\0"+
    "\22\3\1\107\7\3\1\0\6\3\26\0\17\3\1\u013b"+
    "\12\3\1\0\6\3\26\0\2\3\1\u013c\27\3\1\0"+
    "\5\3\1\u013d\26\0\32\3\1\0\6\3\26\0\2\3"+
    "\1\u011e\27\3\1\0\6\3\26\0\11\3\1\u013e\20\3"+
    "\1\0\6\3\26\0\6\3\1\106\23\3\1\0\6\3"+
    "\26\0\2\3\1\u010c\6\3\1\u013f\20\3\1\0\6\3"+
    "\26\0\6\3\1\u0140\23\3\1\0\3\3\1\107\2\3"+
    "\26\0\32\3\1\0\6\3\26\0\20\3\1\106\11\3"+
    "\1\0\5\3\1\u0114\26\0\32\3\1\0\6\3\26\0"+
    "\5\3\1\106\1\u0116\23\3\1\0\6\3\26\0\7\3"+
    "\1\270\22\3\1\0\3\3\1\205\2\3\26\0\3\3"+
    "\1\u0141\26\3\1\0\3\3\1\u0142\2\3\26\0\32\3"+
    "\1\0\6\3\26\0\16\3\1\u0143\13\3\1\0\6\3"+
    "\26\0\16\3\1\u0144\13\3\1\0\6\3\26\0\7\3"+
    "\1\u0120\22\3\1\0\6\3\26\0\4\3\1\u0145\11\3"+
    "\1\137\13\3\1\0\6\3\26\0\6\3\1\u0146\23\3"+
    "\1\0\5\3\1\u0147\26\0\7\3\1\u0148\22\3\1\0"+
    "\6\3\26\0\4\3\1\u0149\25\3\1\0\6\3\26\0"+
    "\16\3\1\350\13\3\2\0\2\253\32\0\1\56\1\0"+
    "\1\56\7\0\1\56\20\0\2\253\64\0\5\3\1\u014a"+
    "\26\0\32\3\1\0\6\3\26\0\4\3\1\u014b\25\3"+
    "\1\0\4\3\1\u014c\1\3\26\0\16\3\1\u014d\13\3"+
    "\1\0\6\3\26\0\4\3\1\u014e\25\3\1\0\6\3"+
    "\26\0\4\3\1\106\5\3\1\u014f\17\3\1\0\6\3"+
    "\26\0\14\3\1\u0150\15\3\1\0\6\3\26\0\16\3"+
    "\1\152\13\3\1\0\6\3\26\0\11\3\1\350\17\3"+
    "\1\u0151\1\0\3\3\1\u0152\2\3\26\0\32\3\1\0"+
    "\6\3\26\0\2\3\1\u0144\27\3\1\0\6\3\26\0"+
    "\4\3\1\u011e\25\3\1\0\6\3\26\0\21\3\1\107"+
    "\10\3\1\0\6\3\26\0\7\3\1\106\22\3\1\0"+
    "\3\3\1\113\2\3\26\0\32\3\1\0\6\3\26\0"+
    "\21\3\1\u0153\10\3\1\0\6\3\26\0\3\3\1\u011d"+
    "\26\3\1\0\6\3\26\0\4\3\1\u0114\25\3\1\0"+
    "\6\3\26\0\3\3\1\106\26\3\1\0\6\3\26\0"+
    "\2\3\1\u0114\27\3\1\0\6\3\26\0\4\3\1\u0154"+
    "\25\3\2\0\2\54\63\0\14\302\1\u0155\66\302\1\u0155"+
    "\1\u0156\51\302\11\0\1\305\57\0\2\u0157\6\0\2\u0158"+
    "\55\0\2\307\23\0\1\u0159\40\0\6\3\26\0\14\3"+
    "\1\u015a\15\3\1\0\6\3\26\0\11\3\1\u015b\20\3"+
    "\1\0\6\3\26\0\16\3\1\u015c\13\3\1\0\6\3"+
    "\26\0\11\3\1\u015d\20\3\1\0\6\3\26\0\4\3"+
    "\1\u015e\25\3\1\0\6\3\26\0\2\3\1\u015f\1\3"+
    "\1\106\25\3\1\0\6\3\26\0\4\3\1\u0160\25\3"+
    "\1\0\5\3\1\u0161\26\0\32\3\1\0\5\3\1\u0162"+
    "\26\0\16\3\1\u0163\13\3\1\0\6\3\26\0\2\3"+
    "\1\u0164\1\3\1\u0165\25\3\1\0\6\3\26\0\12\3"+
    "\1\u0166\17\3\1\0\6\3\26\0\15\3\1\137\14\3"+
    "\1\0\6\3\26\0\2\3\1\252\27\3\1\0\6\3"+
    "\26\0\12\3\1\106\17\3\1\0\6\3\26\0\21\3"+
    "\1\u0167\10\3\1\0\6\3\26\0\6\3\1\u0168\3\3"+
    "\1\u0169\10\3\1\106\6\3\1\0\6\3\4\0\1\u016a"+
    "\21\0\32\3\1\0\6\3\26\0\12\3\1\u0142\17\3"+
    "\1\0\6\3\26\0\4\3\1\u016b\2\3\1\u016c\22\3"+
    "\1\0\6\3\26\0\4\3\1\u016d\25\3\1\0\6\3"+
    "\26\0\6\3\1\106\10\3\1\u016e\12\3\1\0\5\3"+
    "\1\u016f\26\0\32\3\1\0\6\3\26\0\2\3\1\u0170"+
    "\27\3\1\0\5\3\1\u0171\26\0\32\3\1\0\6\3"+
    "\26\0\6\3\1\u0172\23\3\1\0\6\3\26\0\10\3"+
    "\1\u0173\21\3\1\0\3\3\1\u015b\2\3\26\0\4\3"+
    "\1\106\25\3\1\0\3\3\1\u0174\2\3\26\0\16\3"+
    "\1\u0175\13\3\1\0\6\3\26\0\21\3\1\u0176\2\3"+
    "\1\106\5\3\1\0\6\3\26\0\27\3\1\u0177\2\3"+
    "\1\0\3\3\1\106\2\3\26\0\32\3\1\0\6\3"+
    "\26\0\4\3\1\u0178\25\3\1\0\6\3\26\0\31\3"+
    "\1\u0179\1\0\6\3\26\0\17\3\1\u017a\12\3\1\0"+
    "\6\3\26\0\2\3\1\u017b\27\3\1\0\5\3\1\106"+
    "\26\0\3\3\1\u017c\26\3\1\0\4\3\1\u017d\1\3"+
    "\26\0\32\3\1\0\5\3\1\u017e\26\0\32\3\1\0"+
    "\6\3\26\0\11\3\1\u017f\20\3\1\0\6\3\26\0"+
    "\4\3\1\u0180\25\3\1\0\6\3\26\0\6\3\1\u0181"+
    "\23\3\1\0\6\3\26\0\4\3\1\u0182\4\3\1\u0183"+
    "\20\3\1\0\5\3\1\u0184\26\0\32\3\1\0\6\3"+
    "\26\0\12\3\1\u0185\4\3\1\106\1\3\1\u0186\10\3"+
    "\1\0\6\3\26\0\14\3\1\231\15\3\1\0\5\3"+
    "\1\u0187\26\0\32\3\1\0\6\3\26\0\6\3\1\u0188"+
    "\23\3\1\0\6\3\26\0\12\3\1\277\17\3\1\0"+
    "\6\3\26\0\12\3\1\u0189\17\3\1\0\6\3\26\0"+
    "\10\3\1\u0162\1\3\1\u018a\4\3\1\u018b\12\3\1\0"+
    "\6\3\26\0\12\3\1\u018c\17\3\1\0\3\3\1\231"+
    "\2\3\26\0\11\3\1\u011e\12\3\1\u018d\1\3\1\u018e"+
    "\3\3\1\0\6\3\26\0\16\3\1\110\13\3\1\0"+
    "\6\3\26\0\11\3\1\231\20\3\1\0\6\3\26\0"+
    "\4\3\1\u011e\3\3\1\u0129\21\3\1\0\3\3\1\u018f"+
    "\2\3\26\0\32\3\1\0\6\3\26\0\4\3\1\u0190"+
    "\25\3\1\0\6\3\26\0\17\3\1\u0191\12\3\1\0"+
    "\6\3\26\0\7\3\1\u0192\22\3\1\0\6\3\26\0"+
    "\7\3\1\u0193\7\3\1\u0194\12\3\1\0\6\3\26\0"+
    "\17\3\1\u0195\12\3\1\0\6\3\26\0\2\3\1\u0196"+
    "\27\3\1\0\6\3\26\0\4\3\1\106\1\3\1\106"+
    "\3\3\1\u0197\17\3\1\0\6\3\26\0\2\3\1\u0160"+
    "\27\3\1\0\6\3\26\0\17\3\1\u014e\12\3\1\0"+
    "\3\3\1\u0198\2\3\26\0\6\3\1\u0199\10\3\1\u019a"+
    "\6\3\1\u019b\3\3\1\0\3\3\1\231\2\3\26\0"+
    "\32\3\1\0\4\3\1\u019c\1\u019d\26\0\32\3\1\0"+
    "\5\3\1\u019e\26\0\32\3\1\0\6\3\26\0\7\3"+
    "\1\u019f\22\3\1\0\6\3\26\0\10\3\1\u01a0\13\3"+
    "\1\u01a1\5\3\1\0\6\3\26\0\7\3\1\u01a2\22\3"+
    "\1\0\6\3\26\0\12\3\1\u01a3\17\3\1\0\6\3"+
    "\26\0\12\3\1\110\17\3\1\0\5\3\1\106\26\0"+
    "\32\3\1\0\6\3\26\0\2\3\1\231\27\3\1\0"+
    "\6\3\26\0\12\3\1\u0125\17\3\1\0\6\3\26\0"+
    "\4\3\1\u01a4\25\3\1\0\6\3\26\0\24\3\1\106"+
    "\5\3\1\0\3\3\1\276\2\3\26\0\32\3\1\0"+
    "\6\3\26\0\4\3\1\u01a5\1\3\1\u01a6\23\3\1\0"+
    "\5\3\1\u01a7\26\0\4\3\1\106\25\3\1\0\6\3"+
    "\26\0\17\3\1\231\12\3\1\0\6\3\26\0\16\3"+
    "\1\272\13\3\1\0\6\3\26\0\3\3\1\u01a8\26\3"+
    "\1\0\6\3\26\0\23\3\1\106\6\3\1\0\6\3"+
    "\26\0\23\3\1\u013f\6\3\1\0\6\3\26\0\25\3"+
    "\1\u01a9\4\3\1\0\6\3\26\0\2\3\1\u0120\27\3"+
    "\1\0\6\3\26\0\25\3\1\124\4\3\1\0\6\3"+
    "\26\0\14\3\1\106\15\3\1\0\6\3\26\0\27\3"+
    "\1\u01aa\2\3\1\0\6\3\26\0\4\3\1\u01ab\11\3"+
    "\1\u01ac\13\3\1\0\6\3\26\0\4\3\1\u01ad\4\3"+
    "\1\106\20\3\1\0\4\3\1\231\1\3\26\0\32\3"+
    "\1\0\5\3\1\u01ae\26\0\32\3\1\0\6\3\26\0"+
    "\6\3\1\u01af\23\3\1\0\6\3\26\0\4\3\1\u01b0"+
    "\25\3\1\0\3\3\1\u01b1\2\3\26\0\32\3\1\0"+
    "\5\3\1\u01b2\26\0\32\3\1\0\6\3\26\0\4\3"+
    "\1\u01b3\25\3\1\0\6\3\26\0\17\3\1\u01b4\12\3"+
    "\1\0\6\3\26\0\4\3\1\u01b5\25\3\1\0\4\3"+
    "\1\u01b6\1\3\26\0\32\3\1\0\4\3\1\u01b7\1\3"+
    "\26\0\6\3\1\313\2\3\1\u0119\20\3\1\0\6\3"+
    "\26\0\17\3\1\u01b8\12\3\1\0\6\3\26\0\2\3"+
    "\1\u01b9\27\3\1\0\6\3\26\0\6\3\1\u01ba\23\3"+
    "\1\0\6\3\26\0\12\3\1\107\17\3\1\0\6\3"+
    "\26\0\11\3\1\236\20\3\1\0\6\3\26\0\4\3"+
    "\1\u01bb\25\3\1\0\6\3\26\0\6\3\1\u01bc\23\3"+
    "\1\0\6\3\26\0\6\3\1\u01bd\23\3\1\0\5\3"+
    "\1\u01be\26\0\32\3\1\0\6\3\26\0\4\3\1\u01bf"+
    "\5\3\1\u01c0\4\3\1\u01c1\5\3\1\u01c2\4\3\1\0"+
    "\6\3\26\0\15\3\1\277\14\3\1\0\4\3\1\316"+
    "\1\3\26\0\32\3\1\0\6\3\26\0\11\3\1\106"+
    "\20\3\1\0\4\3\1\137\1\3\26\0\32\3\1\0"+
    "\4\3\1\u0160\1\3\26\0\32\3\1\0\6\3\26\0"+
    "\6\3\1\u01c3\23\3\1\0\6\3\26\0\6\3\1\u01c4"+
    "\23\3\1\0\3\3\1\u01c5\2\3\26\0\7\3\1\107"+
    "\22\3\1\0\6\3\26\0\14\3\1\u01c6\15\3\1\0"+
    "\4\3\1\u01c7\1\3\26\0\32\3\1\0\6\3\26\0"+
    "\12\3\1\63\5\3\1\u011d\11\3\1\0\6\3\26\0"+
    "\25\3\1\106\4\3\1\0\6\3\26\0\16\3\1\u01c8"+
    "\13\3\1\0\6\3\26\0\7\3\1\u0187\22\3\1\0"+
    "\6\3\26\0\7\3\1\277\22\3\1\0\6\3\26\0"+
    "\11\3\1\u01c9\20\3\1\0\6\3\26\0\17\3\1\106"+
    "\12\3\1\0\5\3\1\u01ca\26\0\32\3\1\0\6\3"+
    "\26\0\4\3\1\u01cb\25\3\1\0\4\3\1\107\1\3"+
    "\26\0\32\3\1\0\6\3\26\0\11\3\1\u01cc\20\3"+
    "\1\0\4\3\1\u01cd\1\3\26\0\32\3\1\0\3\3"+
    "\1\u0140\2\3\26\0\32\3\14\302\1\u0155\1\305\51\302"+
    "\2\0\2\u0157\64\0\6\3\26\0\11\3\1\u01ce\20\3"+
    "\1\0\6\3\26\0\12\3\1\u0109\17\3\1\0\6\3"+
    "\26\0\11\3\1\350\20\3\1\0\5\3\1\u01a0\26\0"+
    "\32\3\1\0\6\3\26\0\7\3\1\110\22\3\1\0"+
    "\6\3\26\0\15\3\1\u01cf\14\3\1\0\6\3\26\0"+
    "\6\3\1\107\23\3\1\0\5\3\1\u01d0\26\0\32\3"+
    "\1\0\6\3\26\0\2\3\1\u01d1\27\3\1\0\6\3"+
    "\26\0\24\3\1\277\5\3\1\0\4\3\1\u01d2\1\3"+
    "\26\0\32\3\1\0\6\3\26\0\7\3\1\u01d3\22\3"+
    "\1\0\6\3\26\0\7\3\1\u01d4\22\3\1\0\3\3"+
    "\1\u01d5\2\3\26\0\32\3\1\0\6\3\26\0\7\3"+
    "\1\u01d6\6\3\1\u01d7\13\3\1\0\6\3\26\0\11\3"+
    "\1\u01d8\20\3\41\0\1\u01d9\26\0\6\3\26\0\7\3"+
    "\1\u01c9\22\3\1\0\6\3\26\0\2\3\1\u01b5\27\3"+
    "\1\0\6\3\26\0\10\3\1\u01da\21\3\1\0\6\3"+
    "\26\0\6\3\1\u014e\23\3\1\0\6\3\26\0\26\3"+
    "\1\u0114\3\3\1\0\6\3\26\0\10\3\1\107\21\3"+
    "\1\0\6\3\26\0\4\3\1\u01db\25\3\1\0\6\3"+
    "\26\0\17\3\1\u01dc\12\3\1\0\6\3\26\0\11\3"+
    "\1\u01dd\20\3\1\0\6\3\26\0\17\3\1\u01de\12\3"+
    "\1\0\5\3\1\u011d\26\0\32\3\1\0\6\3\26\0"+
    "\21\3\1\267\10\3\1\0\6\3\26\0\12\3\1\u01df"+
    "\17\3\1\0\6\3\26\0\17\3\1\u01e0\2\3\1\u01e1"+
    "\7\3\1\0\4\3\1\277\1\3\26\0\32\3\1\0"+
    "\6\3\26\0\4\3\1\u01bf\25\3\1\0\6\3\26\0"+
    "\6\3\1\u01e2\23\3\1\0\6\3\26\0\6\3\1\u01e3"+
    "\23\3\1\0\6\3\26\0\7\3\1\350\22\3\1\0"+
    "\6\3\26\0\16\3\1\u01e4\13\3\1\0\3\3\1\u01e5"+
    "\2\3\26\0\32\3\1\0\6\3\26\0\7\3\1\u01e6"+
    "\22\3\1\0\6\3\26\0\7\3\1\u01e7\1\3\1\u01d1"+
    "\20\3\1\0\6\3\26\0\7\3\1\231\22\3\1\0"+
    "\6\3\26\0\23\3\1\107\6\3\1\0\6\3\26\0"+
    "\15\3\1\u01e8\14\3\1\0\6\3\26\0\11\3\1\u01e9"+
    "\20\3\1\0\4\3\1\u01ea\1\3\26\0\32\3\1\0"+
    "\6\3\26\0\16\3\1\327\13\3\1\0\6\3\26\0"+
    "\16\3\1\277\13\3\1\0\6\3\26\0\4\3\1\u010c"+
    "\25\3\1\0\6\3\26\0\16\3\1\u01eb\13\3\1\0"+
    "\6\3\26\0\4\3\1\u01ec\25\3\1\0\6\3\26\0"+
    "\4\3\1\u01ed\25\3\1\0\6\3\26\0\2\3\1\u01ee"+
    "\27\3\1\0\6\3\26\0\16\3\1\u01ef\13\3\1\0"+
    "\6\3\26\0\3\3\1\u01f0\1\3\1\u01f1\1\3\1\u01f2"+
    "\21\3\1\u01f3\1\0\6\3\26\0\6\3\1\u01f4\23\3"+
    "\1\0\6\3\26\0\4\3\1\u016e\25\3\1\0\5\3"+
    "\1\u01f5\26\0\32\3\1\0\6\3\26\0\4\3\1\u01f6"+
    "\25\3\1\0\6\3\26\0\11\3\1\u011e\20\3\1\0"+
    "\6\3\26\0\6\3\1\u01f7\23\3\1\0\5\3\1\u01f8"+
    "\26\0\32\3\1\0\6\3\26\0\2\3\1\u01f9\27\3"+
    "\1\0\6\3\26\0\4\3\1\u01fa\25\3\1\0\6\3"+
    "\26\0\2\3\1\u01fb\13\3\1\u01fc\13\3\1\0\6\3"+
    "\26\0\6\3\1\u01fd\23\3\1\0\6\3\26\0\4\3"+
    "\1\u0182\25\3\1\0\6\3\26\0\24\3\1\350\5\3"+
    "\1\0\6\3\26\0\2\3\1\u01fe\27\3\1\0\6\3"+
    "\26\0\4\3\1\u01ff\25\3\1\0\6\3\26\0\4\3"+
    "\1\u0200\25\3\1\0\6\3\26\0\16\3\1\231\13\3"+
    "\1\0\6\3\26\0\2\3\1\u0201\24\3\1\u01aa\2\3"+
    "\1\0\6\3\26\0\23\3\1\u0202\6\3\1\0\6\3"+
    "\26\0\6\3\1\u0203\23\3\1\0\6\3\26\0\16\3"+
    "\1\u0204\13\3\1\0\6\3\26\0\7\3\1\145\22\3"+
    "\1\0\6\3\26\0\13\3\1\u0205\16\3\1\0\5\3"+
    "\1\u0206\26\0\32\3\1\0\6\3\26\0\4\3\1\134"+
    "\25\3\1\0\5\3\1\u0207\26\0\32\3\1\0\6\3"+
    "\26\0\5\3\1\106\24\3\1\0\6\3\26\0\12\3"+
    "\1\u0208\17\3\1\0\6\3\26\0\7\3\1\u0209\11\3"+
    "\1\267\10\3\1\0\4\3\1\u020a\1\3\26\0\32\3"+
    "\1\0\6\3\26\0\16\3\1\u020b\13\3\1\0\3\3"+
    "\1\u020c\2\3\26\0\7\3\1\231\22\3\1\0\6\3"+
    "\26\0\6\3\1\u020d\23\3\1\0\6\3\26\0\2\3"+
    "\1\110\27\3\1\0\6\3\26\0\3\3\1\u020e\26\3"+
    "\1\0\6\3\26\0\6\3\1\u020f\23\3\1\0\6\3"+
    "\26\0\12\3\1\231\17\3\1\0\6\3\26\0\17\3"+
    "\1\267\12\3\1\0\6\3\26\0\7\3\1\u0210\22\3"+
    "\1\0\6\3\26\0\16\3\1\u0211\13\3\1\0\3\3"+
    "\1\u0212\2\3\26\0\32\3\1\0\6\3\26\0\16\3"+
    "\1\u0213\13\3\1\0\6\3\26\0\24\3\1\u0214\5\3"+
    "\1\0\6\3\26\0\3\3\1\u0152\26\3\1\0\6\3"+
    "\26\0\4\3\1\u0215\25\3\1\0\5\3\1\u0216\26\0"+
    "\32\3\1\0\6\3\26\0\7\3\1\u0217\22\3\1\0"+
    "\6\3\26\0\2\3\1\106\6\3\1\u020a\20\3\1\0"+
    "\6\3\26\0\6\3\1\u0109\23\3\1\0\6\3\26\0"+
    "\2\3\1\u0218\27\3\1\0\6\3\26\0\13\3\1\u0194"+
    "\16\3\1\0\6\3\26\0\4\3\1\u017c\25\3\1\0"+
    "\6\3\26\0\4\3\1\u0219\25\3\1\0\6\3\26\0"+
    "\4\3\1\u021a\25\3\1\0\6\3\26\0\13\3\1\106"+
    "\16\3\1\0\3\3\1\277\2\3\26\0\32\3\1\0"+
    "\4\3\1\u0106\1\3\26\0\32\3\1\0\6\3\26\0"+
    "\12\3\1\u0120\17\3\1\0\6\3\26\0\25\3\1\350"+
    "\4\3\1\0\6\3\26\0\2\3\1\270\27\3\1\0"+
    "\6\3\26\0\7\3\1\u021b\22\3\1\0\6\3\26\0"+
    "\2\3\1\124\27\3\1\0\6\3\26\0\7\3\1\107"+
    "\22\3\1\0\5\3\1\231\26\0\32\3\1\0\6\3"+
    "\26\0\7\3\1\u021c\22\3\1\0\6\3\26\0\16\3"+
    "\1\u021d\13\3\1\0\6\3\26\0\11\3\1\u0213\20\3"+
    "\1\0\6\3\26\0\16\3\1\u021e\13\3\1\0\3\3"+
    "\1\u01b5\2\3\26\0\32\3\1\0\3\3\1\u021f\2\3"+
    "\26\0\32\3\42\0\1\u0220\25\0\6\3\26\0\6\3"+
    "\1\u0221\23\3\1\0\6\3\26\0\17\3\1\u0222\12\3"+
    "\1\0\6\3\26\0\16\3\1\223\13\3\1\0\6\3"+
    "\26\0\7\3\1\u018d\22\3\1\0\5\3\1\u019d\26\0"+
    "\2\3\1\u0113\27\3\1\0\6\3\26\0\11\3\1\u0223"+
    "\20\3\1\0\6\3\26\0\6\3\1\u0224\23\3\1\0"+
    "\6\3\26\0\11\3\1\u0225\20\3\1\0\6\3\26\0"+
    "\16\3\1\214\13\3\1\0\6\3\26\0\4\3\1\61"+
    "\25\3\1\0\6\3\26\0\12\3\1\u01b2\17\3\1\0"+
    "\6\3\26\0\13\3\1\u0226\16\3\1\0\6\3\26\0"+
    "\4\3\1\u0227\25\3\1\0\6\3\26\0\16\3\1\u01b5"+
    "\13\3\1\0\6\3\26\0\2\3\1\u01cb\27\3\1\0"+
    "\4\3\1\u010c\1\3\26\0\32\3\1\0\6\3\26\0"+
    "\16\3\1\u0228\13\3\1\0\6\3\26\0\17\3\1\313"+
    "\12\3\1\0\6\3\26\0\7\3\1\214\22\3\1\0"+
    "\6\3\26\0\3\3\1\u0229\26\3\1\0\6\3\26\0"+
    "\7\3\1\235\22\3\1\0\5\3\1\u022a\26\0\32\3"+
    "\1\0\6\3\26\0\2\3\1\u022b\27\3\1\0\6\3"+
    "\26\0\24\3\1\u0114\5\3\1\0\6\3\26\0\11\3"+
    "\1\u022c\20\3\1\0\4\3\1\u022d\1\3\26\0\32\3"+
    "\1\0\6\3\26\0\2\3\1\u022e\27\3\1\0\3\3"+
    "\1\u022f\2\3\26\0\32\3\1\0\6\3\26\0\4\3"+
    "\1\u0230\25\3\1\0\6\3\26\0\11\3\1\113\20\3"+
    "\1\0\6\3\26\0\3\3\1\u0231\26\3\1\0\6\3"+
    "\26\0\12\3\1\u01da\17\3\1\0\6\3\26\0\16\3"+
    "\1\u0232\13\3\1\0\3\3\1\u0151\2\3\26\0\32\3"+
    "\1\0\6\3\26\0\7\3\1\u0233\22\3\1\0\6\3"+
    "\26\0\6\3\1\u0234\23\3\1\0\6\3\26\0\17\3"+
    "\1\u0137\12\3\1\0\6\3\26\0\17\3\1\u0235\12\3"+
    "\1\0\6\3\26\0\12\3\1\u0236\17\3\1\0\6\3"+
    "\26\0\10\3\1\u0237\21\3\1\0\6\3\26\0\4\3"+
    "\1\u0238\25\3\1\0\6\3\26\0\21\3\1\350\10\3"+
    "\1\0\6\3\26\0\2\3\1\u0239\27\3\1\0\6\3"+
    "\26\0\11\3\1\u01cb\20\3\1\0\6\3\26\0\4\3"+
    "\1\u023a\25\3\1\0\6\3\26\0\2\3\1\u023b\27\3"+
    "\1\0\6\3\26\0\17\3\1\u0131\6\3\1\277\3\3"+
    "\1\0\6\3\26\0\3\3\1\107\26\3\1\0\6\3"+
    "\26\0\2\3\1\u023c\27\3\1\0\6\3\26\0\17\3"+
    "\1\u023d\12\3\1\0\6\3\26\0\16\3\1\u023e\13\3"+
    "\1\0\6\3\26\0\16\3\1\u0109\13\3\1\0\6\3"+
    "\26\0\7\3\1\u011d\22\3\1\0\6\3\26\0\16\3"+
    "\1\u023f\13\3\1\0\6\3\26\0\11\3\1\u0240\20\3"+
    "\1\0\6\3\26\0\6\3\1\u0241\23\3\1\0\6\3"+
    "\26\0\17\3\1\u0242\12\3\1\0\6\3\26\0\2\3"+
    "\1\106\27\3\1\0\6\3\26\0\24\3\1\u0243\5\3"+
    "\1\0\6\3\26\0\16\3\1\u010c\13\3\1\0\6\3"+
    "\26\0\7\3\1\u0194\22\3\1\0\6\3\26\0\7\3"+
    "\1\u0244\22\3\1\0\6\3\26\0\26\3\1\267\3\3"+
    "\1\0\6\3\26\0\16\3\1\u0245\13\3\1\0\6\3"+
    "\26\0\2\3\1\325\1\3\1\276\25\3\1\0\6\3"+
    "\26\0\10\3\1\u023b\4\3\1\107\14\3\1\0\6\3"+
    "\26\0\15\3\1\u0246\14\3\1\0\3\3\1\u0131\2\3"+
    "\26\0\32\3\41\0\1\u0247\26\0\6\3\26\0\2\3"+
    "\1\u0248\27\3\1\0\3\3\1\u0249\2\3\26\0\32\3"+
    "\1\0\6\3\26\0\2\3\1\114\27\3\1\0\3\3"+
    "\1\u024a\2\3\26\0\32\3\1\0\6\3\26\0\16\3"+
    "\1\u024b\13\3\1\0\3\3\1\u024c\2\3\26\0\32\3"+
    "\1\0\6\3\26\0\3\3\1\u024d\26\3\1\0\4\3"+
    "\1\u01d1\1\3\26\0\32\3\1\0\6\3\26\0\4\3"+
    "\1\u024e\25\3\1\0\6\3\26\0\6\3\1\u024f\23\3"+
    "\1\0\6\3\26\0\25\3\1\u0250\4\3\1\0\6\3"+
    "\26\0\4\3\1\u01ee\25\3\1\0\6\3\26\0\10\3"+
    "\1\u014e\21\3\1\0\6\3\26\0\6\3\1\u0251\23\3"+
    "\1\0\6\3\26\0\7\3\1\u0252\22\3\1\0\6\3"+
    "\26\0\4\3\1\u0253\25\3\1\0\3\3\1\u0254\2\3"+
    "\26\0\32\3\1\0\6\3\26\0\2\3\1\u0255\27\3"+
    "\1\0\6\3\26\0\4\3\1\106\11\3\1\u015c\13\3"+
    "\1\0\6\3\26\0\10\3\1\u0256\21\3\1\0\6\3"+
    "\26\0\6\3\1\u0257\23\3\1\0\6\3\26\0\11\3"+
    "\1\u0216\20\3\1\0\6\3\26\0\5\3\1\u0258\24\3"+
    "\1\0\6\3\26\0\12\3\1\u023b\17\3\1\0\3\3"+
    "\1\u0259\2\3\26\0\32\3\1\0\6\3\26\0\6\3"+
    "\1\u0194\23\3\1\0\5\3\1\u025a\26\0\32\3\1\0"+
    "\6\3\26\0\16\3\1\u017b\13\3\1\0\6\3\26\0"+
    "\6\3\1\u025b\23\3\1\0\6\3\26\0\6\3\1\u025c"+
    "\23\3\1\0\3\3\1\u025d\2\3\26\0\32\3\1\0"+
    "\6\3\26\0\16\3\1\u025e\13\3\1\0\6\3\26\0"+
    "\6\3\1\u025f\23\3\1\0\6\3\26\0\27\3\1\u0260"+
    "\2\3\1\0\3\3\1\u011d\2\3\26\0\32\3\1\0"+
    "\6\3\26\0\22\3\1\u01b2\7\3\1\0\4\3\1\u0261"+
    "\1\3\26\0\32\3\47\0\1\u0262\20\0\6\3\26\0"+
    "\24\3\1\u0263\5\3\1\0\6\3\26\0\26\3\1\u019b"+
    "\3\3\1\0\6\3\26\0\4\3\1\u0264\25\3\1\0"+
    "\6\3\26\0\21\3\1\u0229\10\3\1\0\6\3\26\0"+
    "\12\3\1\260\17\3\1\0\6\3\26\0\12\3\1\u0265"+
    "\17\3\1\0\6\3\26\0\21\3\1\260\10\3\1\0"+
    "\6\3\26\0\2\3\1\u0266\27\3\1\0\6\3\26\0"+
    "\17\3\1\u0267\12\3\1\0\6\3\26\0\27\3\1\u0268"+
    "\2\3\1\0\6\3\26\0\4\3\1\276\25\3\1\0"+
    "\6\3\26\0\17\3\1\u0269\12\3\1\0\6\3\26\0"+
    "\16\3\1\u026a\13\3\1\0\6\3\26\0\11\3\1\u026b"+
    "\20\3\1\0\6\3\26\0\4\3\1\u026c\25\3\1\0"+
    "\6\3\26\0\6\3\1\u0269\23\3\1\0\6\3\26\0"+
    "\21\3\1\205\10\3\1\0\6\3\26\0\20\3\1\u026d"+
    "\11\3\1\0\6\3\26\0\20\3\1\u026e\11\3\1\0"+
    "\6\3\26\0\12\3\1\u026f\17\3\1\0\6\3\26\0"+
    "\16\3\1\u0270\13\3\1\0\6\3\26\0\6\3\1\u0252"+
    "\23\3\1\0\6\3\26\0\10\3\1\137\21\3\1\0"+
    "\6\3\26\0\27\3\1\u0271\2\3\1\0\6\3\26\0"+
    "\11\3\1\u0114\20\3\1\0\6\3\26\0\17\3\1\u0272"+
    "\12\3\1\0\6\3\26\0\4\3\1\231\25\3\1\0"+
    "\4\3\1\u01b6\1\3\26\0\3\3\1\u0109\2\3\1\u0273"+
    "\23\3\1\0\6\3\26\0\6\3\1\u0274\23\3\1\0"+
    "\3\3\1\u0275\2\3\26\0\32\3\1\0\3\3\1\274"+
    "\2\3\26\0\32\3\1\0\6\3\26\0\7\3\1\u0126"+
    "\22\3\1\0\6\3\26\0\12\3\1\u0265\14\3\1\u0276"+
    "\2\3\1\0\6\3\26\0\2\3\1\u0277\27\3\1\0"+
    "\6\3\26\0\17\3\1\u0278\3\3\1\u0279\6\3\1\0"+
    "\6\3\26\0\12\3\1\u014e\17\3\1\0\6\3\26\0"+
    "\14\3\1\u027a\7\3\1\u027b\5\3\1\0\6\3\26\0"+
    "\11\3\1\u027c\20\3\1\0\6\3\26\0\16\3\1\u027d"+
    "\13\3\1\0\6\3\26\0\2\3\1\325\27\3\1\0"+
    "\6\3\26\0\6\3\1\u021a\23\3\1\0\6\3\26\0"+
    "\16\3\1\u027e\13\3\1\0\4\3\1\u027f\1\3\26\0"+
    "\32\3\1\0\6\3\26\0\16\3\1\u0280\13\3\1\0"+
    "\6\3\26\0\4\3\1\u0281\25\3\1\0\6\3\26\0"+
    "\11\3\1\u0282\20\3\1\0\6\3\26\0\16\3\1\u0283"+
    "\13\3\1\0\4\3\1\u0284\1\3\26\0\32\3\1\0"+
    "\6\3\26\0\24\3\1\u0285\5\3\1\0\3\3\1\u0286"+
    "\2\3\26\0\32\3\1\0\6\3\26\0\3\3\1\u01a1"+
    "\26\3\1\0\6\3\26\0\24\3\1\u0287\5\3\1\0"+
    "\6\3\26\0\20\3\1\u0288\11\3\1\0\4\3\1\u011e"+
    "\1\3\26\0\32\3\1\0\3\3\1\u01a0\2\3\26\0"+
    "\32\3\1\0\6\3\26\0\7\3\1\u0137\22\3\1\0"+
    "\6\3\26\0\4\3\1\u0289\25\3\1\0\6\3\26\0"+
    "\17\3\1\u019b\12\3\1\0\6\3\26\0\16\3\1\u028a"+
    "\13\3\1\0\6\3\26\0\10\3\1\u028b\21\3\1\0"+
    "\6\3\26\0\17\3\1\u01e0\12\3\1\0\5\3\1\u028c"+
    "\26\0\32\3\1\0\6\3\26\0\14\3\1\u028d\15\3"+
    "\1\0\6\3\26\0\2\3\1\u028e\27\3\1\0\6\3"+
    "\26\0\7\3\1\u028f\22\3\1\0\6\3\26\0\7\3"+
    "\1\u0290\22\3\1\0\6\3\26\0\2\3\1\u0291\27\3"+
    "\1\0\6\3\26\0\16\3\1\u0292\13\3\1\0\6\3"+
    "\26\0\17\3\1\u0293\12\3\1\0\6\3\26\0\6\3"+
    "\1\u0294\23\3\1\0\6\3\26\0\4\3\1\u0295\25\3"+
    "\1\0\6\3\26\0\20\3\1\u0296\11\3\1\0\6\3"+
    "\26\0\3\3\1\u0297\2\3\1\u0274\23\3\1\0\6\3"+
    "\26\0\4\3\1\u0298\25\3\1\0\6\3\26\0\6\3"+
    "\1\u0299\23\3\1\0\6\3\26\0\2\3\1\u029a\27\3"+
    "\1\0\6\3\26\0\16\3\1\u029b\13\3\1\0\5\3"+
    "\1\u029c\26\0\32\3\1\0\6\3\26\0\17\3\1\u0295"+
    "\12\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[35420];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\11\1\1\11\40\1\1\0\1\11\14\1"+
    "\3\0\2\1\2\0\152\1\1\0\24\1\3\0\1\1"+
    "\1\11\2\0\1\11\214\1\1\0\2\1\1\0\1\11"+
    "\20\1\1\0\156\1\1\0\106\1\1\0\46\1\1\0"+
    "\32\1\1\11\72\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[668];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;
public String line;
public String column;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ERROR;
            } 
            // fall through
          case 12: break;
          case 2: 
            { lexeme=yytext(); return IDENTIFICADORES;
            } 
            // fall through
          case 13: break;
          case 3: 
            { lexeme=yytext(); return INT;
            } 
            // fall through
          case 14: break;
          case 4: 
            { lexeme=yytext(); return BIT;
            } 
            // fall through
          case 15: break;
          case 5: 
            { /*Ignore*/
            } 
            // fall through
          case 16: break;
          case 6: 
            { lexeme=yytext(); return OPERADORES;
            } 
            // fall through
          case 17: break;
          case 7: 
            { lexeme=yytext(); return FLOAT;
            } 
            // fall through
          case 18: break;
          case 8: 
            { lexeme=yytext(); return RESERVADAS;
            } 
            // fall through
          case 19: break;
          case 9: 
            { lexeme=yytext(); return COMMENT;
            } 
            // fall through
          case 20: break;
          case 10: 
            { lexeme=yytext(); return ERROR;
            } 
            // fall through
          case 21: break;
          case 11: 
            { lexeme=yytext(); return STRING;
            } 
            // fall through
          case 22: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
