/* The following code was generated by JFlex 1.7.0 */

package lexCode;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/Bryan/OneDrive - Universidad Rafael Landivar/Documentos/NetBeansProjects/Lex_Analyzer/LexicalAnalyzer/src/lexCode/Lexer.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\33\1\33\1\33\1\33\22\0\1\0\1\16\1\103"+
    "\1\32\1\0\1\12\1\17\1\34\1\25\1\26\1\10\1\7\1\22"+
    "\1\5\1\6\1\11\1\0\1\106\1\106\7\0\1\0\1\21\1\14"+
    "\1\13\1\15\1\0\1\31\1\44\1\45\1\51\1\53\1\1\1\55"+
    "\1\57\1\62\1\52\1\100\1\65\1\4\1\54\1\2\1\47\1\66"+
    "\1\72\1\56\1\46\1\50\1\3\1\61\1\67\1\64\1\60\1\63"+
    "\1\23\1\0\1\24\1\0\1\0\1\0\1\40\1\70\1\41\1\73"+
    "\1\35\1\104\1\76\1\102\1\42\2\0\1\105\1\107\1\74\1\43"+
    "\1\37\1\0\1\77\1\36\1\71\1\110\1\101\2\0\1\75\1\0"+
    "\1\27\1\20\1\30\7\0\1\33\u1fa2\0\1\33\1\33\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\5\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\2\1\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\31\1\1\27\25\0\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\7\0\1\42\1\43"+
    "\15\0\1\44\17\0\1\45\4\0\1\46\1\47\5\0"+
    "\1\50\14\0\1\51\1\52\3\0\1\53\37\0\1\54"+
    "\31\0\1\55\14\0\1\56\5\0\1\57\11\0\1\60"+
    "\26\0\1\61\1\62\1\0\1\63\5\0\1\64\3\0"+
    "\1\65\1\66\2\0\1\67\2\0\1\70\5\0\1\71"+
    "\4\0\1\72\6\0\1\73\4\0\1\74\23\0\1\75"+
    "\1\0\1\76\1\77\3\0\1\100\11\0\1\101\5\0"+
    "\1\102\33\0\1\103\17\0\1\104\6\0\1\105\15\0"+
    "\1\106\1\107\1\0\1\110\1\111\7\0\1\112\12\0"+
    "\1\113\10\0\1\114\2\0\1\115\6\0\1\116\7\0"+
    "\1\117\6\0\1\120\2\0\1\121\14\0\1\122\3\0"+
    "\1\123\1\124\3\0\1\125\4\0\1\126\1\0\1\127"+
    "\1\130\4\0\1\131\13\0\1\132\6\0\1\133\1\134"+
    "\2\0\1\135\2\0\1\136\4\0\1\137\21\0\1\140"+
    "\1\141\3\0\1\142\3\0\1\143\10\0\1\144\11\0"+
    "\1\145\1\146\10\0\1\147\13\0\1\150\10\0\1\151"+
    "\1\152\7\0\1\153\1\0\1\154\1\0\1\155\1\0"+
    "\1\156\1\0\1\157\1\160\1\161\1\162\6\0\1\163"+
    "\1\164\1\165\23\0\1\166\4\0\1\167\13\0\1\170"+
    "\3\0\1\171\7\0\1\172\1\0\1\173\1\174\1\175"+
    "\5\0\1\176\1\0\1\177\14\0\1\200\6\0\1\201"+
    "\3\0\1\202\1\203\3\0\1\204\1\205\12\0\1\206"+
    "\1\0\1\207\2\0\1\210\1\0\1\211\5\0\1\212"+
    "\2\0\1\213\4\0\1\214\1\0\1\215\1\216\1\217"+
    "\1\220\15\0\1\221\2\0\1\222\1\0\1\223\12\0"+
    "\1\224\5\0\1\225\1\0\1\226\2\0\1\227\2\0"+
    "\1\230\4\0\1\231\12\0\1\232\3\0\1\233\2\0"+
    "\1\234\1\0\1\235\2\0\1\236\1\237\1\0\1\240"+
    "\2\0\1\241\2\0\1\242\1\243\1\0\1\244\1\0"+
    "\1\245\5\0\1\246\1\247\6\0\1\250\1\251\1\252"+
    "\3\0\1\253\4\0\1\254\15\0\1\255\2\0\1\256"+
    "\1\0\1\257\2\0\1\260\10\0\1\261\4\0\1\262"+
    "\2\0\1\263\2\0\1\264\2\0\1\265\13\0\1\266"+
    "\3\0\1\267\7\0\1\270\1\271\13\0\1\272\11\0"+
    "\1\273\1\274\1\275\1\0\1\276\2\0\1\277\4\0"+
    "\1\300\1\0\1\301\17\0\1\302\1\303\14\0\1\304"+
    "\1\0\1\305\1\306\3\0\1\307\3\0\1\310\1\311"+
    "\1\312\4\0\1\313\1\0\1\314\2\0\1\315\10\0"+
    "\1\316\3\0\1\317\6\0\1\320\2\0\1\321\1\322"+
    "\1\323\25\0\1\324\10\0\1\325\6\0\1\326\1\327"+
    "\6\0\1\330\1\331\1\0\1\332\1\333\2\0\1\334"+
    "\1\335\3\0\1\336\1\337\1\340\1\341\7\0\1\342"+
    "\1\343\2\0\1\344\1\345\5\0\1\346\11\0\1\347"+
    "\1\350\2\0\1\351\1\352\1\353\1\0\1\354\1\355"+
    "\1\0\1\356\1\357\3\0\1\360\11\0\1\361\1\362"+
    "\1\0\1\363\1\364\2\0\1\365\3\0\1\366\5\0"+
    "\1\367\1\370\11\0\1\371\15\0\1\372\3\0\1\373"+
    "\11\0\1\374\3\0\1\375\3\0\1\376\3\0\1\377"+
    "\13\0\1\u0100\1\0\1\u0101\11\0\1\u0102\1\0\1\u0103"+
    "\1\u0104\6\0\1\u0105\1\u0106\1\0\1\u0107\1\0\1\u0108"+
    "\1\u0109\2\0\1\u010a\3\0\1\u010b\5\0\1\u010c\2\0"+
    "\1\u010d\3\0\1\u010e\1\u010f\3\0\1\u0110\4\0\1\u0111"+
    "\1\0\1\u0112\3\0\1\u0113\5\0\1\u0114\16\0\1\u0115"+
    "\1\u0116\10\0\1\u0117\5\0\1\u0118\1\0\1\u0119\3\0"+
    "\1\u011a\1\u011b\1\0\1\u011c\1\0\1\u011d\1\u011e\2\0"+
    "\1\u011f\1\0\1\u0120\1\u0121\1\u0122\1\0\1\u0123\1\0"+
    "\1\u0124\1\0\1\u0125\1\u0126\1\0\1\u0127\7\0\1\u0128"+
    "\1\u0129\1\0\1\u012a\1\u012b\1\0\1\u012c\4\0\1\u012d"+
    "\4\0\1\u012e\10\0\1\u012f\2\0\1\u0130\1\0\1\u0131"+
    "\3\0\1\u0132\6\0\1\u0133\7\0\1\u0134\1\u0135\2\0"+
    "\1\u0136\1\u0137\1\0\1\u0138\5\0\1\u0139\1\u013a\1\u013b"+
    "\2\0\1\u013c\10\0\1\u013d\1\u013e\3\0\1\u013f\5\0"+
    "\1\u0140\3\0\1\u0141\1\u0142\2\0\1\u0143\6\0\1\u0144"+
    "\4\0\1\u0145\1\u0146\3\0\1\u0147\2\0\1\u0148\1\0"+
    "\1\u0149\5\0\1\u014a\3\0\1\u014b\1\0\1\u014c\1\0"+
    "\1\u014d\7\0\1\u014e\1\0\1\u014f\10\0\1\u0150\1\0"+
    "\1\u0151\1\0\1\u0152\4\0\1\u0153\1\0\1\u0154\1\0"+
    "\1\u0155\1\u0156\2\0\1\u0157\1\u0158\1\0\1\u0159\3\0"+
    "\1\u015a\1\0\1\u015b\1\0\1\u015c\1\u015d\7\0\1\u015e"+
    "\6\0\1\u015f\1\0\1\u0160\1\u0161\1\0\1\u0162\1\0"+
    "\1\u0163\3\0\1\u0164\6\0\1\u0165\2\0\1\u0166\1\u0167"+
    "\3\0\1\u0168\2\0\1\u0169\4\0\1\u016a\1\u016b\2\0"+
    "\1\u016c\7\0\1\u016d\4\0\1\u016e\4\0\1\u016f\2\0"+
    "\1\u0170\1\0\1\u0171\1\0\1\u0172\3\0\1\u0173\1\u0174"+
    "\1\u0175\2\0\1\u0176\1\0\1\u0177\1\u0178\1\u0179\5\0"+
    "\1\u017a\1\u017b\1\0\1\u017c\1\u017d\1\u017e\6\0\1\u017f"+
    "\6\0\1\u0180\1\u0181\3\0\1\u0182\1\u0183\1\u0184\4\0"+
    "\1\u0185\1\u0186\1\0\1\u0187\1\0\1\u0188\2\0\1\u0189"+
    "\1\0\1\u018a\1\u018b\3\0\1\u018c\1\0\1\u018d\1\u018e"+
    "\1\0\1\u018f\1\u0190\10\0\1\u0191\1\u0192\1\u0193\1\u0194"+
    "\1\0\1\u0195\1\u0196\2\0\1\u0197\1\u0198\6\0\1\u0199"+
    "\1\u019a\3\0\1\u019b\1\0\1\u019c\1\u019d\1\u019e\1\0"+
    "\1\u019f\1\u01a0\1\0\1\u01a1\16\0\1\u01a2\4\0\1\u01a3"+
    "\2\0\1\u01a4\2\0\1\u01a5\1\0\1\u01a6\3\0\1\u01a7"+
    "\2\0\1\u01a8\1\u01a9\1\u01aa\1\u01ab\1\0\1\u01ac\1\0"+
    "\1\u01ad\2\0\1\u01ae\1\u01af\4\0\1\u01b0\3\0\1\u01b1"+
    "\1\0\1\u01b2\1\0\1\u01b3\5\0\1\u01b4\1\0\1\u01b5"+
    "\1\0\1\u01b6\1\0\1\u01b7\2\0\1\u01b8\2\0\1\u01b9"+
    "\1\u01ba\1\u01bb\1\0\1\u01bc\2\0\1\u01bd\1\u01be\1\0"+
    "\1\u01bf\3\0\1\u01c0\2\0\1\u01c1\1\u01c2\3\0\1\u01c3"+
    "\1\u01c4\2\0\1\u01c5\1\u01c6\1\u01c7\6\0\1\u01c8\1\0"+
    "\1\u01c9\1\0\1\u01ca\1\0\1\u01cb\1\u01cc\1\u01cd\2\0"+
    "\1\u01ce\1\u01cf\1\u01d0\2\0\1\u01d1\1\0\1\u01d2\2\0"+
    "\1\u01d3\1\u01d4\2\0\1\u01d5\1\u01d6\1\u01d7\1\u01d8\3\0"+
    "\1\u01d9\1\u01da\1\u01db\5\0\1\u01dc\1\u01dd\5\0\1\u01de"+
    "\6\0\1\u01df\1\0\1\u01e0\1\u01e1\5\0\1\u01e2\1\u01e3"+
    "\1\u01e4\1\u01e5\1\u01e6\1\u01e7\1\u01e8\1\u01e9\1\u01ea\2\0"+
    "\1\u01eb\10\0\1\u01ec\16\0\1\u01ed\6\0\1\u01ee\1\0"+
    "\1\u01ef\5\0\1\u01f0\4\0\1\u01f1";

  private static int [] zzUnpackAction() {
    int [] result = new int[2002];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\111\0\111"+
    "\0\111\0\111\0\111\0\111\0\u01b6\0\u01ff\0\u0248\0\u0291"+
    "\0\u02da\0\u0323\0\111\0\111\0\u036c\0\111\0\u03b5\0\111"+
    "\0\u03fe\0\111\0\111\0\u0447\0\111\0\u0490\0\u04d9\0\u0522"+
    "\0\u056b\0\u05b4\0\u05fd\0\u0646\0\u068f\0\u06d8\0\u0721\0\u076a"+
    "\0\u07b3\0\u07fc\0\u0845\0\u088e\0\u08d7\0\u0920\0\u0969\0\u09b2"+
    "\0\u09fb\0\u0a44\0\u0a8d\0\u0ad6\0\u0b1f\0\u0b68\0\111\0\u0bb1"+
    "\0\u0bfa\0\u0c43\0\u0c8c\0\u0cd5\0\u0d1e\0\u0d67\0\u0db0\0\u0df9"+
    "\0\u0e42\0\u0e8b\0\u0ed4\0\u0f1d\0\u0f66\0\u0faf\0\u0ff8\0\u1041"+
    "\0\u108a\0\u10d3\0\u111c\0\u1165\0\111\0\111\0\111\0\111"+
    "\0\111\0\111\0\111\0\111\0\111\0\111\0\u11ae\0\u11f7"+
    "\0\u1240\0\u1289\0\u12d2\0\u131b\0\u1364\0\u13ad\0\u13f6\0\u143f"+
    "\0\u1488\0\u14d1\0\u151a\0\u1563\0\u15ac\0\u15f5\0\u163e\0\u1687"+
    "\0\u16d0\0\u1719\0\u1762\0\u17ab\0\111\0\u17f4\0\u183d\0\u1886"+
    "\0\u18cf\0\u1918\0\u1961\0\u19aa\0\u19f3\0\u1a3c\0\u1a85\0\u1ace"+
    "\0\u1b17\0\u1b60\0\u1ba9\0\u1bf2\0\u1c3b\0\u1c84\0\u1ccd\0\u1d16"+
    "\0\u1d5f\0\u1da8\0\u1df1\0\u1e3a\0\u1e83\0\u1ecc\0\u1f15\0\u1f5e"+
    "\0\u1fa7\0\u1ff0\0\u2039\0\u2082\0\u20cb\0\u2114\0\u215d\0\u21a6"+
    "\0\u21ef\0\u2238\0\u2281\0\u22ca\0\u2313\0\u235c\0\u23a5\0\u23ee"+
    "\0\u2437\0\u2480\0\111\0\u24c9\0\u2512\0\u255b\0\u25a4\0\u25ed"+
    "\0\u2636\0\u267f\0\u26c8\0\u2711\0\u275a\0\u27a3\0\u27ec\0\u2835"+
    "\0\u287e\0\u28c7\0\u2910\0\u2959\0\u29a2\0\u29eb\0\u2a34\0\u2a7d"+
    "\0\u2ac6\0\u2b0f\0\u2b58\0\u2ba1\0\u2bea\0\u2c33\0\u2c7c\0\u2cc5"+
    "\0\u2d0e\0\u2d57\0\u2da0\0\u2de9\0\u2e32\0\u2e7b\0\u2ec4\0\u2f0d"+
    "\0\u2f56\0\u2f9f\0\u2fe8\0\u3031\0\u307a\0\u30c3\0\u310c\0\u3155"+
    "\0\u319e\0\u31e7\0\u3230\0\u3279\0\u32c2\0\u330b\0\u3354\0\u339d"+
    "\0\u33e6\0\u342f\0\u3478\0\u34c1\0\111\0\u350a\0\u3553\0\u359c"+
    "\0\u35e5\0\u362e\0\u3677\0\u36c0\0\u3709\0\u3752\0\u379b\0\u37e4"+
    "\0\u382d\0\111\0\u3876\0\u38bf\0\u3908\0\u3951\0\u399a\0\111"+
    "\0\u39e3\0\u3a2c\0\u3a75\0\u3abe\0\u3b07\0\u3b50\0\u3b99\0\u3be2"+
    "\0\u3c2b\0\u3c74\0\u3cbd\0\u3d06\0\u3d4f\0\u3d98\0\u3de1\0\u3e2a"+
    "\0\u3e73\0\u3ebc\0\u3f05\0\u3f4e\0\u3f97\0\u3fe0\0\u4029\0\u4072"+
    "\0\u40bb\0\u4104\0\u414d\0\u4196\0\u41df\0\u4228\0\u4271\0\u42ba"+
    "\0\111\0\111\0\u4303\0\u434c\0\u4395\0\u43de\0\u4427\0\u4470"+
    "\0\u44b9\0\111\0\u4502\0\u454b\0\u4594\0\111\0\111\0\u45dd"+
    "\0\u4626\0\111\0\u466f\0\u46b8\0\u4701\0\u474a\0\u4793\0\u47dc"+
    "\0\u4825\0\u486e\0\111\0\u48b7\0\u4900\0\u4949\0\u4992\0\111"+
    "\0\u49db\0\u4a24\0\u4a6d\0\u4ab6\0\u4aff\0\u4b48\0\u4b91\0\u4bda"+
    "\0\u4c23\0\u4c6c\0\u4cb5\0\111\0\u4cfe\0\u4d47\0\u4d90\0\u4dd9"+
    "\0\u4e22\0\u4e6b\0\u4eb4\0\u4efd\0\u4f46\0\u4f8f\0\u4fd8\0\u5021"+
    "\0\u506a\0\u50b3\0\u50fc\0\u5145\0\u518e\0\u51d7\0\u5220\0\u5269"+
    "\0\u52b2\0\u52fb\0\111\0\u5344\0\u538d\0\u53d6\0\u541f\0\u5468"+
    "\0\u54b1\0\u54fa\0\u5543\0\u558c\0\u55d5\0\u561e\0\u5667\0\u56b0"+
    "\0\111\0\u56f9\0\u5742\0\u578b\0\u57d4\0\u581d\0\111\0\u5866"+
    "\0\u58af\0\u58f8\0\u5941\0\u598a\0\u59d3\0\u5a1c\0\u5a65\0\u5aae"+
    "\0\u5af7\0\u5b40\0\u5b89\0\u5bd2\0\u5c1b\0\u5c64\0\u5cad\0\u5cf6"+
    "\0\u5d3f\0\u5d88\0\u5dd1\0\u5e1a\0\u5e63\0\u5eac\0\u5ef5\0\u5f3e"+
    "\0\u5f87\0\u5fd0\0\u6019\0\u6062\0\u60ab\0\u60f4\0\u613d\0\u6186"+
    "\0\u61cf\0\u6218\0\u6261\0\u62aa\0\u62f3\0\u633c\0\u6385\0\u63ce"+
    "\0\u6417\0\u6460\0\u64a9\0\u64f2\0\u653b\0\u6584\0\u65cd\0\u6616"+
    "\0\u665f\0\111\0\u66a8\0\u66f1\0\u673a\0\u6783\0\u67cc\0\u6815"+
    "\0\u685e\0\u68a7\0\u68f0\0\u6939\0\u6982\0\u69cb\0\u6a14\0\111"+
    "\0\111\0\u6a5d\0\u6aa6\0\u6aef\0\u6b38\0\u6b81\0\u6bca\0\u6c13"+
    "\0\u6c5c\0\u6ca5\0\u6cee\0\u6d37\0\u6d80\0\u6dc9\0\u6e12\0\u6e5b"+
    "\0\u6ea4\0\u6eed\0\u6f36\0\u6f7f\0\u6fc8\0\u7011\0\u705a\0\u70a3"+
    "\0\u70ec\0\u7135\0\u717e\0\u71c7\0\u7210\0\u7259\0\u72a2\0\u72eb"+
    "\0\u7334\0\u737d\0\111\0\u73c6\0\u740f\0\u7458\0\u74a1\0\u74ea"+
    "\0\u7533\0\u757c\0\u75c5\0\u760e\0\u7657\0\u76a0\0\u76e9\0\u7732"+
    "\0\u777b\0\111\0\u77c4\0\u780d\0\u7856\0\u789f\0\u78e8\0\u7931"+
    "\0\111\0\u797a\0\u79c3\0\111\0\u7a0c\0\u7a55\0\u7a9e\0\u7ae7"+
    "\0\u7b30\0\u7b79\0\u7bc2\0\u7c0b\0\u7c54\0\u7c9d\0\u7ce6\0\u7d2f"+
    "\0\111\0\u7d78\0\u7dc1\0\u7e0a\0\111\0\111\0\u7e53\0\u7e9c"+
    "\0\u7ee5\0\u7f2e\0\u7f77\0\u7fc0\0\u8009\0\u8052\0\111\0\u809b"+
    "\0\111\0\u80e4\0\u812d\0\u8176\0\u81bf\0\u8208\0\111\0\u8251"+
    "\0\u829a\0\u82e3\0\u832c\0\u8375\0\u83be\0\u8407\0\u8450\0\u8499"+
    "\0\u84e2\0\u852b\0\111\0\u8574\0\u85bd\0\u8606\0\u864f\0\u8698"+
    "\0\u86e1\0\111\0\111\0\u872a\0\u8773\0\111\0\u87bc\0\u8805"+
    "\0\111\0\u884e\0\u8897\0\u88e0\0\u8929\0\111\0\u8972\0\u89bb"+
    "\0\u8a04\0\u8a4d\0\u8a96\0\u8adf\0\u8b28\0\u8b71\0\u8bba\0\u8c03"+
    "\0\u8c4c\0\u8c95\0\u8cde\0\u8d27\0\u8d70\0\u8db9\0\u8e02\0\111"+
    "\0\111\0\u8e4b\0\u8e94\0\u8edd\0\111\0\u8f26\0\u8f6f\0\u8fb8"+
    "\0\111\0\u9001\0\u904a\0\u9093\0\u90dc\0\u9125\0\u916e\0\u91b7"+
    "\0\u9200\0\111\0\u9249\0\u9292\0\u92db\0\u9324\0\u936d\0\u93b6"+
    "\0\u93ff\0\u9448\0\u9491\0\u94da\0\111\0\u9523\0\u956c\0\u95b5"+
    "\0\u95fe\0\u9647\0\u9690\0\u96d9\0\u9722\0\111\0\u976b\0\u97b4"+
    "\0\u97fd\0\u9846\0\u988f\0\u98d8\0\u9921\0\u996a\0\u99b3\0\u99fc"+
    "\0\u9a45\0\111\0\u9a8e\0\u9ad7\0\u9b20\0\u9b69\0\u9bb2\0\u9bfb"+
    "\0\u9c44\0\u9c8d\0\u9cd6\0\u9d1f\0\u9d68\0\u9db1\0\u9dfa\0\u9e43"+
    "\0\u9e8c\0\u9ed5\0\u9f1e\0\u9f67\0\u9fb0\0\111\0\u9ff9\0\ua042"+
    "\0\ua08b\0\111\0\ua0d4\0\111\0\111\0\111\0\111\0\ua11d"+
    "\0\ua166\0\ua1af\0\ua1f8\0\ua241\0\ua28a\0\ua2d3\0\111\0\111"+
    "\0\ua31c\0\ua365\0\ua3ae\0\ua3f7\0\ua440\0\ua489\0\ua4d2\0\ua51b"+
    "\0\ua564\0\ua5ad\0\ua5f6\0\ua63f\0\ua688\0\ua6d1\0\ua71a\0\ua763"+
    "\0\ua7ac\0\ua7f5\0\ua83e\0\ua887\0\ua8d0\0\ua919\0\ua962\0\ua9ab"+
    "\0\111\0\ua9f4\0\uaa3d\0\uaa86\0\uaacf\0\uab18\0\uab61\0\uabaa"+
    "\0\uabf3\0\uac3c\0\uac85\0\uacce\0\111\0\uad17\0\uad60\0\uada9"+
    "\0\uadf2\0\uae3b\0\uae84\0\uaecd\0\uaf16\0\uaf5f\0\uafa8\0\uaff1"+
    "\0\111\0\ub03a\0\111\0\ub083\0\111\0\ub0cc\0\ub115\0\ub15e"+
    "\0\ub1a7\0\ub1f0\0\111\0\ub239\0\111\0\ub282\0\ub2cb\0\ub314"+
    "\0\ub35d\0\ub3a6\0\ub3ef\0\ub438\0\ub481\0\ub4ca\0\ub513\0\ub55c"+
    "\0\ub5a5\0\ub5ee\0\ub637\0\ub680\0\ub6c9\0\ub712\0\ub75b\0\ub7a4"+
    "\0\111\0\ub7ed\0\ub836\0\ub87f\0\ub8c8\0\111\0\ub911\0\ub95a"+
    "\0\ub9a3\0\111\0\ub9ec\0\uba35\0\uba7e\0\ubac7\0\ubb10\0\ubb59"+
    "\0\ubba2\0\ubbeb\0\ubc34\0\ubc7d\0\ubcc6\0\111\0\ubd0f\0\111"+
    "\0\ubd58\0\ubda1\0\111\0\ubdea\0\111\0\ube33\0\ube7c\0\ubec5"+
    "\0\ubf0e\0\ubf57\0\111\0\ubfa0\0\ubfe9\0\111\0\uc032\0\uc07b"+
    "\0\uc0c4\0\uc10d\0\111\0\uc156\0\111\0\uc19f\0\111\0\111"+
    "\0\uc1e8\0\uc231\0\uc27a\0\uc2c3\0\uc30c\0\uc355\0\uc39e\0\uc3e7"+
    "\0\uc430\0\uc479\0\uc4c2\0\uc50b\0\uc554\0\111\0\uc59d\0\uc5e6"+
    "\0\111\0\uc62f\0\111\0\uc678\0\uc6c1\0\uc70a\0\uc753\0\uc79c"+
    "\0\uc7e5\0\uc82e\0\uc877\0\uc8c0\0\uc909\0\uc952\0\uc99b\0\uc9e4"+
    "\0\uca2d\0\uca76\0\ucabf\0\111\0\ucb08\0\ucb51\0\ucb9a\0\ucbe3"+
    "\0\ucc2c\0\ucc75\0\uccbe\0\111\0\ucd07\0\ucd50\0\ucd99\0\ucde2"+
    "\0\111\0\uce2b\0\uce74\0\ucebd\0\ucf06\0\ucf4f\0\ucf98\0\ucfe1"+
    "\0\ud02a\0\ud073\0\ud0bc\0\111\0\ud105\0\ud14e\0\ud197\0\111"+
    "\0\ud1e0\0\ud229\0\111\0\ud272\0\111\0\ud2bb\0\ud304\0\111"+
    "\0\111\0\ud34d\0\111\0\ud396\0\ud3df\0\111\0\ud428\0\ud471"+
    "\0\111\0\ud4ba\0\ud503\0\111\0\ud54c\0\111\0\ud595\0\ud5de"+
    "\0\ud627\0\ud670\0\ud6b9\0\111\0\111\0\ud702\0\ud74b\0\ud794"+
    "\0\ud7dd\0\ud826\0\ud86f\0\111\0\111\0\111\0\ud8b8\0\ud901"+
    "\0\ud94a\0\111\0\ud993\0\ud9dc\0\uda25\0\uda6e\0\111\0\udab7"+
    "\0\udb00\0\udb49\0\udb92\0\udbdb\0\udc24\0\udc6d\0\udcb6\0\udcff"+
    "\0\udd48\0\udd91\0\uddda\0\ude23\0\111\0\ude6c\0\udeb5\0\udefe"+
    "\0\udf47\0\111\0\udf90\0\udfd9\0\111\0\ue022\0\ue06b\0\ue0b4"+
    "\0\ue0fd\0\ue146\0\ue18f\0\ue1d8\0\ue221\0\111\0\ue26a\0\ue2b3"+
    "\0\ue2fc\0\ue345\0\111\0\ue38e\0\ue3d7\0\111\0\ue420\0\ue469"+
    "\0\111\0\ue4b2\0\ue4fb\0\111\0\ue544\0\ue58d\0\ue5d6\0\ue61f"+
    "\0\ue668\0\ue6b1\0\ue6fa\0\ue743\0\ue78c\0\ue7d5\0\ue81e\0\ue867"+
    "\0\ue8b0\0\ue8f9\0\ue942\0\111\0\ue98b\0\ue9d4\0\uea1d\0\uea66"+
    "\0\ueaaf\0\ueaf8\0\ueb41\0\111\0\111\0\ueb8a\0\uebd3\0\uec1c"+
    "\0\uec65\0\uecae\0\uecf7\0\ued40\0\ued89\0\uedd2\0\uee1b\0\uee64"+
    "\0\111\0\ueead\0\ueef6\0\uef3f\0\uef88\0\uefd1\0\uf01a\0\uf063"+
    "\0\uf0ac\0\uf0f5\0\111\0\111\0\uf13e\0\uf187\0\111\0\uf1d0"+
    "\0\uf219\0\111\0\uf262\0\uf2ab\0\uf2f4\0\uf33d\0\111\0\uf386"+
    "\0\111\0\uf3cf\0\uf418\0\uf461\0\uf4aa\0\uf4f3\0\uf53c\0\uf585"+
    "\0\uf5ce\0\uf617\0\uf660\0\uf6a9\0\uf6f2\0\uf73b\0\uf784\0\uf7cd"+
    "\0\111\0\111\0\uf816\0\uf85f\0\uf8a8\0\uf8f1\0\uf93a\0\uf983"+
    "\0\uf9cc\0\ufa15\0\ufa5e\0\ufaa7\0\ufaf0\0\ufb39\0\111\0\ufb82"+
    "\0\111\0\111\0\ufbcb\0\ufc14\0\ufc5d\0\111\0\ufca6\0\ufcef"+
    "\0\ufd38\0\111\0\111\0\111\0\ufd81\0\ufdca\0\ufe13\0\ufe5c"+
    "\0\111\0\ufea5\0\ufeee\0\uff37\0\uff80\0\111\0\uffc9\1\22"+
    "\1\133\1\244\1\355\1\u0136\1\u017f\1\u01c8\0\111\1\u0211"+
    "\1\u025a\1\u02a3\0\111\1\u02ec\1\u0335\1\u037e\1\u03c7\1\u0410"+
    "\1\u0459\0\111\1\u04a2\1\u04eb\0\111\1\u0534\1\u057d\1\u05c6"+
    "\1\u060f\1\u0658\1\u06a1\1\u06ea\1\u0733\1\u077c\1\u07c5\1\u080e"+
    "\1\u0857\1\u08a0\1\u08e9\1\u0932\1\u097b\1\u09c4\1\u0a0d\1\u0a56"+
    "\1\u0a9f\1\u0ae8\1\u0b31\1\u0b7a\0\111\1\u0bc3\1\u0c0c\1\u0c55"+
    "\1\u0c9e\1\u0ce7\1\u0d30\1\u0d79\1\u0dc2\0\111\1\u0e0b\1\u0e54"+
    "\1\u0e9d\1\u0ee6\1\u0f2f\1\u0f78\0\111\0\111\1\u0fc1\1\u100a"+
    "\1\u1053\1\u109c\1\u10e5\1\u112e\0\111\1\u1177\1\u11c0\0\111"+
    "\0\111\1\u1209\1\u1252\0\111\0\111\1\u129b\1\u12e4\1\u132d"+
    "\1\u1376\0\111\0\111\0\111\1\u13bf\1\u1408\1\u1451\1\u149a"+
    "\1\u14e3\1\u152c\1\u1575\0\111\0\111\1\u15be\1\u1607\1\u1650"+
    "\0\111\1\u1699\1\u16e2\1\u172b\1\u1774\1\u17bd\0\111\1\u1806"+
    "\1\u184f\1\u1898\1\u18e1\1\u192a\1\u1973\1\u19bc\1\u1a05\1\u1a4e"+
    "\0\111\0\111\1\u1a97\1\u1ae0\0\111\0\111\0\111\1\u1b29"+
    "\0\111\0\111\1\u1b72\0\111\0\111\1\u1bbb\1\u1c04\1\u1c4d"+
    "\0\111\1\u1c96\1\u1cdf\1\u1d28\1\u1d71\1\u1dba\1\u1e03\1\u1e4c"+
    "\1\u1e95\1\u1ede\0\111\0\111\1\u1f27\0\111\0\111\1\u1f70"+
    "\1\u1fb9\0\111\1\u2002\1\u204b\1\u2094\1\u20dd\1\u2126\1\u216f"+
    "\1\u21b8\1\u2201\1\u224a\0\111\0\111\1\u2293\1\u22dc\1\u2325"+
    "\1\u236e\1\u23b7\1\u2400\1\u2449\1\u2492\1\u24db\0\111\1\u2524"+
    "\1\u256d\1\u25b6\1\u25ff\1\u2648\1\u2691\1\u26da\1\u2723\1\u276c"+
    "\1\u27b5\1\u27fe\1\u2847\1\u2890\0\111\1\u28d9\1\u2922\1\u296b"+
    "\0\111\1\u29b4\1\u29fd\1\u2a46\1\u2a8f\1\u2ad8\1\u2b21\1\u2b6a"+
    "\1\u2bb3\1\u2bfc\0\111\1\u2c45\1\u2c8e\1\u2cd7\0\111\1\u2d20"+
    "\1\u2d69\1\u2db2\0\111\1\u2dfb\1\u2e44\1\u2e8d\0\111\1\u2ed6"+
    "\1\u2f1f\1\u2f68\1\u2fb1\1\u2ffa\1\u3043\1\u308c\1\u30d5\1\u311e"+
    "\1\u3167\1\u31b0\0\111\1\u31f9\0\111\1\u3242\1\u328b\1\u32d4"+
    "\1\u331d\1\u3366\1\u33af\1\u33f8\1\u3441\1\u348a\0\111\1\u34d3"+
    "\0\111\0\111\1\u351c\1\u3565\1\u35ae\1\u35f7\1\u3640\1\u3689"+
    "\0\111\0\111\1\u36d2\0\111\1\u371b\0\111\0\111\1\u3764"+
    "\1\u37ad\0\111\1\u37f6\1\u383f\1\u3888\0\111\1\u38d1\1\u391a"+
    "\1\u3963\1\u39ac\1\u39f5\0\111\1\u3a3e\1\u3a87\1\u3ad0\1\u3b19"+
    "\1\u3b62\1\u3bab\0\111\0\111\1\u3bf4\1\u3c3d\1\u3c86\0\111"+
    "\1\u3ccf\1\u3d18\1\u3d61\1\u3daa\0\111\1\u3df3\0\111\1\u3e3c"+
    "\1\u3e85\1\u3ece\0\111\1\u3f17\1\u3f60\1\u3fa9\1\u3ff2\1\u403b"+
    "\0\111\1\u4084\1\u40cd\1\u4116\1\u415f\1\u41a8\1\u41f1\1\u423a"+
    "\1\u4283\1\u42cc\1\u4315\1\u435e\1\u43a7\1\u43f0\1\u4439\0\111"+
    "\0\111\1\u4482\1\u44cb\1\u4514\1\u455d\1\u45a6\1\u45ef\1\u4638"+
    "\1\u4681\0\111\1\u46ca\1\u4713\1\u475c\1\u47a5\1\u47ee\0\111"+
    "\1\u4837\0\111\1\u4880\1\u48c9\1\u4912\0\111\0\111\1\u495b"+
    "\0\111\1\u49a4\0\111\0\111\1\u49ed\1\u4a36\0\111\1\u4a7f"+
    "\0\111\0\111\0\111\1\u4ac8\0\111\1\u4b11\0\111\1\u4b5a"+
    "\0\111\0\111\1\u4ba3\0\111\1\u4bec\1\u4c35\1\u4c7e\1\u4cc7"+
    "\1\u4d10\1\u4d59\1\u4da2\0\111\0\111\1\u4deb\0\111\0\111"+
    "\1\u4e34\0\111\1\u4e7d\1\u4ec6\1\u4f0f\1\u4f58\0\111\1\u4fa1"+
    "\1\u4fea\1\u5033\1\u507c\0\111\1\u50c5\1\u510e\1\u5157\1\u51a0"+
    "\1\u51e9\1\u5232\1\u527b\1\u52c4\0\111\1\u530d\1\u5356\0\111"+
    "\1\u539f\0\111\1\u53e8\1\u5431\1\u547a\0\111\1\u54c3\1\u550c"+
    "\1\u5555\1\u559e\1\u55e7\1\u5630\0\111\1\u5679\1\u56c2\1\u570b"+
    "\1\u5754\1\u579d\1\u57e6\1\u582f\0\111\0\111\1\u5878\1\u58c1"+
    "\1\u590a\0\111\1\u5953\1\u599c\1\u59e5\1\u5a2e\1\u5a77\1\u5ac0"+
    "\1\u5b09\0\111\0\111\0\111\1\u5b52\1\u5b9b\0\111\1\u5be4"+
    "\1\u5c2d\1\u5c76\1\u5cbf\1\u5d08\1\u5d51\1\u5d9a\1\u5de3\0\111"+
    "\0\111\1\u5e2c\1\u5e75\1\u5ebe\0\111\1\u5f07\1\u5f50\1\u5f99"+
    "\1\u5fe2\1\u602b\0\111\1\u6074\1\u60bd\1\u6106\0\111\0\111"+
    "\1\u614f\1\u6198\0\111\1\u61e1\1\u622a\1\u6273\1\u62bc\1\u6305"+
    "\1\u634e\0\111\1\u6397\1\u63e0\1\u6429\1\u6472\0\111\0\111"+
    "\1\u64bb\1\u6504\1\u654d\0\111\1\u6596\1\u65df\0\111\1\u6628"+
    "\0\111\1\u6671\1\u66ba\1\u6703\1\u674c\1\u6795\0\111\1\u67de"+
    "\1\u6827\1\u6870\0\111\1\u68b9\0\111\1\u6902\0\111\1\u694b"+
    "\1\u6994\1\u69dd\1\u6a26\1\u6a6f\1\u6ab8\1\u6b01\0\111\1\u6b4a"+
    "\0\111\1\u6b93\1\u6bdc\1\u6c25\1\u6c6e\1\u6cb7\1\u6d00\1\u6d49"+
    "\1\u6d92\1\u6ddb\1\u6e24\0\111\1\u6e6d\0\111\1\u6eb6\1\u6eff"+
    "\1\u6f48\1\u6f91\0\111\1\u6fda\0\111\1\u7023\0\111\0\111"+
    "\1\u706c\1\u70b5\0\111\0\111\1\u70fe\0\111\1\u7147\1\u7190"+
    "\1\u71d9\0\111\1\u7222\0\111\1\u726b\0\111\0\111\1\u72b4"+
    "\1\u72fd\1\u7346\1\u738f\1\u73d8\1\u7421\1\u746a\0\111\1\u74b3"+
    "\1\u74fc\1\u7545\1\u758e\1\u75d7\1\u7620\0\111\1\u7669\0\111"+
    "\1\u76b2\1\u76fb\0\111\1\u7744\0\111\1\u778d\1\u77d6\1\u781f"+
    "\0\111\1\u7868\1\u78b1\1\u78fa\1\u7943\1\u798c\1\u79d5\0\111"+
    "\1\u7a1e\1\u7a67\0\111\0\111\1\u7ab0\1\u7af9\1\u7b42\0\111"+
    "\1\u7b8b\1\u7bd4\0\111\1\u7c1d\1\u7c66\1\u7caf\1\u7cf8\1\u7d41"+
    "\0\111\1\u7d8a\1\u7dd3\0\111\1\u7e1c\1\u7e65\1\u7eae\1\u7ef7"+
    "\1\u7f40\1\u7f89\1\u7fd2\0\111\1\u801b\1\u8064\1\u80ad\1\u80f6"+
    "\1\u813f\1\u8188\1\u81d1\1\u821a\1\u8263\0\111\1\u82ac\1\u82f5"+
    "\0\111\1\u833e\0\111\1\u8387\0\111\1\u83d0\1\u8419\1\u8462"+
    "\0\111\0\111\0\111\1\u84ab\1\u84f4\1\u853d\1\u8586\0\111"+
    "\0\111\0\111\1\u85cf\1\u8618\1\u8661\1\u86aa\1\u86f3\0\111"+
    "\0\111\1\u873c\0\111\0\111\0\111\1\u8785\1\u87ce\1\u8817"+
    "\1\u8860\1\u88a9\1\u88f2\0\111\1\u893b\1\u8984\1\u89cd\1\u8a16"+
    "\1\u8a5f\1\u8aa8\0\111\0\111\1\u8af1\1\u8b3a\1\u8b83\0\111"+
    "\0\111\0\111\1\u8bcc\1\u8c15\1\u8c5e\1\u8ca7\0\111\0\111"+
    "\1\u8cf0\0\111\1\u8d39\1\u8d82\1\u8dcb\1\u8e14\0\111\1\u8e5d"+
    "\0\111\0\111\1\u8ea6\1\u8eef\1\u8f38\0\111\1\u8f81\0\111"+
    "\0\111\1\u8fca\0\111\0\111\1\u9013\1\u905c\1\u90a5\1\u90ee"+
    "\1\u9137\1\u9180\1\u91c9\1\u9212\0\111\0\111\0\111\0\111"+
    "\1\u925b\0\111\0\111\1\u92a4\1\u92ed\0\111\0\111\1\u9336"+
    "\1\u937f\1\u93c8\1\u9411\1\u945a\1\u94a3\0\111\0\111\1\u94ec"+
    "\1\u9535\1\u957e\0\111\1\u95c7\1\u9610\0\111\0\111\1\u9659"+
    "\0\111\0\111\1\u96a2\0\111\1\u96eb\1\u9734\1\u977d\1\u97c6"+
    "\1\u980f\1\u9858\1\u98a1\1\u98ea\1\u9933\1\u997c\1\u99c5\1\u9a0e"+
    "\1\u9a57\1\u9aa0\0\111\1\u9ae9\1\u9b32\1\u9b7b\1\u9bc4\0\111"+
    "\1\u9c0d\1\u9c56\0\111\1\u9c9f\1\u9ce8\0\111\1\u9d31\0\111"+
    "\1\u9d7a\1\u9dc3\1\u9e0c\0\111\1\u9e55\1\u9e9e\1\u9ee7\0\111"+
    "\0\111\0\111\1\u9f30\0\111\1\u9f79\0\111\1\u9fc2\1\ua00b"+
    "\0\111\0\111\1\ua054\1\ua09d\1\ua0e6\1\ua12f\0\111\1\ua178"+
    "\1\ua1c1\1\ua20a\0\111\1\ua253\0\111\1\ua29c\0\111\1\ua2e5"+
    "\1\ua32e\1\ua377\1\ua3c0\1\ua409\0\111\1\ua452\1\ua49b\1\ua4e4"+
    "\0\111\1\ua52d\0\111\1\ua576\1\ua5bf\0\111\1\ua608\1\ua651"+
    "\0\111\0\111\0\111\1\ua69a\0\111\1\ua6e3\1\ua72c\0\111"+
    "\0\111\1\ua775\0\111\1\ua7be\1\ua807\1\ua850\0\111\1\ua899"+
    "\1\ua8e2\0\111\0\111\1\ua92b\1\ua974\1\ua9bd\0\111\0\111"+
    "\1\uaa06\1\uaa4f\0\111\0\111\0\111\1\uaa98\1\uaae1\1\uab2a"+
    "\1\uab73\1\uabbc\1\uac05\0\111\1\uac4e\0\111\1\uac97\0\111"+
    "\1\uace0\0\111\0\111\0\111\1\uad29\1\uad72\0\111\0\111"+
    "\0\111\1\uadbb\1\uae04\0\111\1\uae4d\0\111\1\uae96\1\uaedf"+
    "\0\111\0\111\1\uaf28\1\uaf71\0\111\0\111\0\111\0\111"+
    "\1\uafba\1\ub003\1\ub04c\0\111\0\111\0\111\1\ub095\1\ub0de"+
    "\1\ub127\1\ub170\1\ub1b9\0\111\0\111\1\ub202\1\ub24b\1\ub294"+
    "\1\ub2dd\1\ub326\0\111\1\ub36f\1\ub3b8\1\ub401\1\ub44a\1\ub493"+
    "\1\ub4dc\0\111\1\ub525\0\111\0\111\1\ub56e\1\ub5b7\1\ub600"+
    "\1\ub649\1\ub692\0\111\0\111\0\111\0\111\0\111\0\111"+
    "\0\111\0\111\0\111\1\ub6db\1\ub724\0\111\1\ub76d\1\ub7b6"+
    "\1\ub7ff\1\ub848\1\ub891\1\ub8da\1\ub923\1\ub96c\0\111\1\ub9b5"+
    "\1\ub9fe\1\uba47\1\uba90\1\ubad9\1\ubb22\1\ubb6b\1\ubbb4\1\ubbfd"+
    "\1\ubc46\1\ubc8f\1\ubcd8\1\ubd21\1\ubd6a\1\ubdb3\1\ubdfc\1\ube45"+
    "\1\ube8e\1\ubed7\1\ubf20\1\ubf69\0\111\1\ubfb2\0\111\1\ubffb"+
    "\1\uc044\1\uc08d\1\uc0d6\1\uc11f\0\111\1\uc168\1\uc1b1\1\uc1fa"+
    "\1\uc243\0\111";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[2002];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\0\1\35\1\36\4\2\1\37"+
    "\1\2\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\7\2\1\65"+
    "\1\66\1\2\1\67\5\2\113\0\1\70\1\0\1\71"+
    "\37\0\1\72\1\0\1\73\7\0\1\74\2\0\1\75"+
    "\2\0\1\76\5\0\1\77\17\0\1\100\1\0\1\101"+
    "\40\0\1\102\2\0\1\103\1\0\1\104\40\0\1\105"+
    "\1\106\43\0\1\107\17\0\1\110\23\0\1\111\42\0"+
    "\1\112\2\0\1\113\2\0\1\114\51\0\1\115\110\0"+
    "\1\116\110\0\1\117\110\0\1\120\114\0\1\121\111\0"+
    "\1\122\114\0\1\123\112\0\1\124\112\0\1\125\112\0"+
    "\1\126\114\0\1\127\145\0\1\130\1\131\16\0\1\132"+
    "\1\133\1\134\40\0\1\135\1\136\1\0\1\137\1\140"+
    "\1\0\1\141\1\0\1\142\1\143\1\144\1\0\1\145"+
    "\30\0\1\146\1\0\1\147\36\0\1\150\1\0\1\151"+
    "\2\0\1\152\2\0\1\153\3\0\1\154\1\0\1\155"+
    "\31\0\1\156\1\0\1\157\1\160\35\0\1\161\1\0"+
    "\1\162\2\0\1\163\1\164\1\165\1\166\1\0\1\167"+
    "\3\0\1\170\1\0\1\171\3\0\1\172\2\0\1\173"+
    "\1\174\20\0\1\175\1\176\1\177\40\0\1\200\3\0"+
    "\1\201\3\0\1\202\1\203\2\0\1\204\4\0\1\205"+
    "\23\0\1\206\42\0\1\207\1\0\1\210\1\211\2\0"+
    "\1\212\3\0\1\213\1\0\1\214\1\0\1\215\31\0"+
    "\1\216\1\217\36\0\1\220\1\221\2\0\1\222\6\0"+
    "\1\223\1\0\1\224\1\0\1\225\30\0\1\226\43\0"+
    "\1\227\1\0\1\230\2\0\1\231\1\232\1\233\1\0"+
    "\1\234\13\0\1\235\16\0\1\236\1\0\1\237\36\0"+
    "\1\240\1\0\1\241\1\242\1\0\1\243\2\0\1\244"+
    "\3\0\1\245\1\0\1\246\31\0\1\247\1\0\1\250"+
    "\40\0\1\251\2\0\1\252\2\0\1\253\37\0\1\254"+
    "\1\0\1\255\1\256\37\0\1\257\2\0\1\260\2\0"+
    "\1\261\3\0\1\262\26\0\1\263\4\0\1\264\1\0"+
    "\1\265\40\0\1\266\2\0\1\267\2\0\1\270\37\0"+
    "\1\271\2\0\1\272\42\0\1\273\6\0\1\274\33\0"+
    "\1\275\153\0\1\276\5\0\1\277\102\0\1\300\2\0"+
    "\1\301\110\0\1\302\115\0\1\303\35\0\1\304\50\0"+
    "\1\305\37\0\1\306\1\0\1\307\1\310\37\0\1\311"+
    "\2\0\1\312\2\0\1\313\3\0\1\314\76\0\1\315"+
    "\2\0\1\316\2\0\1\317\3\0\1\320\3\0\1\321"+
    "\70\0\1\322\115\0\1\323\101\0\1\324\123\0\1\325"+
    "\36\0\1\326\44\0\1\327\113\0\1\330\110\0\1\331"+
    "\115\0\1\332\33\0\1\333\110\0\1\334\46\0\1\335"+
    "\1\336\1\337\41\0\1\340\171\0\1\341\2\0\1\342"+
    "\25\0\1\343\47\0\1\344\104\0\1\345\3\0\1\346"+
    "\36\0\1\347\45\0\1\350\1\351\4\0\1\352\114\0"+
    "\1\353\74\0\1\354\44\0\1\355\47\0\1\356\1\357"+
    "\11\0\1\360\1\361\23\0\1\362\42\0\1\363\5\0"+
    "\1\364\111\0\1\365\12\0\1\366\24\0\1\367\41\0"+
    "\1\370\1\0\1\371\6\0\1\372\3\0\1\373\31\0"+
    "\1\374\43\0\1\375\1\0\1\376\5\0\1\377\76\0"+
    "\1\u0100\4\0\1\u0101\15\0\1\u0102\23\0\1\u0103\51\0"+
    "\1\u0104\10\0\1\u0105\62\0\1\u0106\106\0\1\u0107\144\0"+
    "\1\u0108\72\0\1\u0109\4\0\1\u010a\100\0\1\u010b\44\0"+
    "\1\u010c\43\0\1\u010d\1\0\1\u010e\104\0\1\u010f\43\0"+
    "\1\u0110\44\0\1\u0111\2\0\1\u0112\6\0\1\u0113\77\0"+
    "\1\u0114\111\0\1\u0115\104\0\1\u0116\6\0\1\u0117\1\u0118"+
    "\104\0\1\u0119\41\0\1\u011a\54\0\1\u011b\111\0\1\u011c"+
    "\110\0\1\u011d\101\0\1\u011e\4\0\1\u011f\1\0\1\u0120"+
    "\35\0\1\u0121\44\0\1\u0122\130\0\1\u0123\70\0\1\u0124"+
    "\106\0\1\u0125\1\u0126\42\0\1\u0127\45\0\1\u0128\41\0"+
    "\1\u0129\45\0\1\u012a\43\0\1\u012b\1\0\1\u012c\37\0"+
    "\1\u012d\1\0\1\u012e\1\0\1\u012f\1\u0130\2\0\1\u0131"+
    "\15\0\1\u0132\63\0\1\u0133\6\0\1\u0134\103\0\1\u0135"+
    "\150\0\1\u0136\62\0\1\u0137\103\0\1\u0138\100\0\1\u0139"+
    "\6\0\1\u013a\2\0\1\u013b\101\0\1\u013c\6\0\1\u013d"+
    "\3\0\1\u013e\102\0\1\u013f\6\0\1\u0140\71\0\1\u0141"+
    "\112\0\1\u0142\5\0\1\u0143\37\0\1\u0144\106\0\1\u0145"+
    "\42\0\1\u0146\143\0\1\u0147\15\0\1\u0148\110\0\1\u0149"+
    "\154\0\1\u014a\113\0\1\u014b\135\0\1\u014c\60\0\1\u014d"+
    "\1\u014e\114\0\1\u014f\106\0\1\u0150\36\0\1\u0151\110\0"+
    "\1\u0152\46\0\1\u0153\114\0\1\u0154\1\0\1\u0155\5\0"+
    "\1\u0156\71\0\1\u0157\44\0\1\u0158\175\0\1\u0159\76\0"+
    "\1\u015a\35\0\1\u015b\1\0\1\u015c\40\0\1\u015d\5\0"+
    "\1\u015e\5\0\1\u015f\116\0\1\u0160\23\0\1\u0161\42\0"+
    "\1\u0162\111\0\1\u0163\10\0\1\u0164\35\0\1\u0165\40\0"+
    "\1\u0166\2\0\1\u0167\150\0\1\u0168\5\0\1\u0169\41\0"+
    "\1\u016a\1\0\1\u016b\5\0\1\u016c\34\0\1\u016d\1\u016e"+
    "\1\u016f\37\0\1\u0170\7\0\1\u0171\1\0\1\u0172\33\0"+
    "\1\u0173\45\0\1\u0174\112\0\1\u0175\40\0\1\u0176\42\0"+
    "\1\u0177\46\0\1\u0178\43\0\1\u0179\1\u017a\1\u017b\1\u017c"+
    "\1\u017d\1\u017e\12\0\1\u017f\71\0\1\u0180\42\0\1\u0181"+
    "\110\0\1\u0182\163\0\1\u0183\36\0\1\u0184\143\0\1\u0185"+
    "\55\0\1\u0186\1\0\1\u0187\37\0\1\u0188\1\0\1\u0189"+
    "\1\0\1\u018a\1\u018b\3\0\1\u018c\1\u018d\7\0\1\u018e"+
    "\76\0\1\u018f\132\0\1\u0190\62\0\1\u0191\7\0\1\u0192"+
    "\101\0\1\u0193\42\0\1\u0194\50\0\1\u0195\100\0\1\u0196"+
    "\1\0\1\u0197\2\0\1\u0198\106\0\1\u0199\43\0\1\u019a"+
    "\156\0\1\u019b\3\0\1\u019c\1\0\1\u019d\36\0\1\u019e"+
    "\154\0\1\u019f\13\0\1\u01a0\1\0\1\u01a1\24\0\1\u01a2"+
    "\50\0\1\u01a3\37\0\1\u01a4\156\0\1\u01a5\42\0\1\u01a6"+
    "\1\0\1\u01a7\41\0\1\u01a8\111\0\1\u01a9\45\0\1\u01aa"+
    "\107\0\1\u01ab\52\0\1\u01ac\36\0\1\u01ad\51\0\1\u01ae"+
    "\33\0\1\u01af\45\0\1\u01b0\104\0\1\u01b1\51\0\1\u01b2"+
    "\37\0\1\u01b3\1\0\1\u01b4\1\0\1\u01b5\1\u01b6\3\0"+
    "\1\u01b7\1\0\1\u01b8\1\0\1\u01b9\4\0\1\u01ba\26\0"+
    "\1\u01bb\106\0\1\u01bc\47\0\1\u01bd\41\0\1\u01be\1\u01bf"+
    "\62\0\1\u01c0\100\0\1\u01c1\33\0\1\u01c2\45\0\1\u01c3"+
    "\107\0\1\u01c4\111\0\1\u01c5\104\0\1\u01c6\2\0\1\u01c7"+
    "\105\0\1\u01c8\50\0\1\u01c9\51\0\1\u01ca\33\0\1\u01cb"+
    "\170\0\1\u01cc\32\0\1\u01cd\1\u01ce\41\0\1\u01cf\44\0"+
    "\1\u01d0\112\0\1\u01d1\164\0\1\u01d2\34\0\1\u01d3\162\0"+
    "\1\u01d4\77\0\1\u01d5\107\0\1\u01d6\112\0\1\u01d7\1\0"+
    "\1\u01d8\2\0\1\u01d9\2\0\1\u01da\100\0\1\u01db\17\0"+
    "\1\u01dc\103\0\1\u01dd\30\0\1\u01de\45\0\1\u01df\2\0"+
    "\1\u01e0\110\0\1\u01e1\114\0\1\u01e2\34\0\1\u01e3\45\0"+
    "\1\u01e4\2\0\1\u01e5\107\0\1\u01e6\37\0\1\u01e7\50\0"+
    "\1\u01e8\127\0\1\u01e9\71\0\1\u01ea\135\0\1\u01eb\65\0"+
    "\1\u01ec\35\0\1\u01ed\171\0\1\u01ee\72\0\1\u01ef\50\0"+
    "\1\u01f0\162\0\1\u01f1\103\0\1\u01f2\40\0\1\u01f3\54\0"+
    "\1\u01f4\33\0\1\u01f5\155\0\1\u01f6\1\0\1\u01f7\104\0"+
    "\1\u01f8\114\0\1\u01f9\44\0\1\u01fa\105\0\1\u01fb\112\0"+
    "\1\u01fc\46\0\1\u01fd\37\0\1\u01fe\110\0\1\u01ff\47\0"+
    "\1\u0200\121\0\1\u0201\102\0\1\u0202\100\0\1\u0203\115\0"+
    "\1\u0204\40\0\1\u0205\156\0\1\u0206\22\0\1\u0207\17\0"+
    "\1\u0208\111\0\1\u0209\160\0\1\u020a\114\0\1\u020b\111\0"+
    "\1\u020c\33\0\1\u020d\152\0\1\u020e\45\0\1\u020f\166\0"+
    "\1\u0210\104\0\1\u0211\103\0\1\u0212\112\0\1\u0213\41\0"+
    "\1\u0214\166\0\1\u0215\101\0\1\u0216\41\0\1\u0217\166\0"+
    "\1\u0218\104\0\1\u0219\101\0\1\u021a\45\0\1\u021b\110\0"+
    "\1\u021c\161\0\1\u021d\37\0\1\u021e\147\0\1\u021f\144\0"+
    "\1\u0220\51\0\1\u0221\135\0\1\u0222\75\0\1\u0223\42\0"+
    "\1\u0224\153\0\1\u0225\113\0\1\u0226\43\0\1\u0227\107\0"+
    "\1\u0228\163\0\1\u0229\110\0\1\u022a\106\0\1\u022b\110\0"+
    "\1\u022c\37\0\1\u022d\153\0\1\u022e\122\0\1\u022f\112\0"+
    "\1\u0230\3\0\1\u0231\113\0\1\u0232\70\0\1\u0233\113\0"+
    "\1\u0234\123\0\1\u0235\110\0\1\u0236\110\0\1\u0237\27\0"+
    "\1\u0238\166\0\1\u0239\72\0\1\u023a\110\0\1\u023b\133\0"+
    "\1\u023c\67\0\1\u023d\43\0\1\u023e\165\0\1\u023f\100\0"+
    "\1\u0240\45\0\1\u0241\42\0\1\u0242\45\0\1\u0243\43\0"+
    "\1\u0244\1\u0245\104\0\1\u0246\47\0\1\u0247\153\0\1\u0248"+
    "\5\0\1\u0249\122\0\1\u024a\112\0\1\u024b\21\0\1\u024c"+
    "\110\0\1\u024d\157\0\1\u024e\5\0\1\u024f\105\0\1\u0250"+
    "\40\0\1\u0251\173\0\1\u0252\71\0\1\u0253\42\0\1\u0254"+
    "\161\0\1\u0255\37\0\1\u0256\113\0\1\u0257\154\0\1\u0258"+
    "\114\0\1\u0259\104\0\1\u025a\111\0\1\u025b\110\0\1\u025c"+
    "\101\0\1\u025d\47\0\1\u025e\44\0\1\u025f\2\0\1\u0260"+
    "\15\0\1\u0261\101\0\1\u0262\31\0\1\u0263\64\0\1\u0264"+
    "\23\0\1\u0265\110\0\1\u0266\112\0\1\u0267\153\0\1\u0268"+
    "\43\0\1\u0269\50\0\1\u026a\114\0\1\u026b\34\0\1\u026c"+
    "\53\0\1\u026d\104\0\1\u026e\124\0\1\u026f\76\0\1\u0270"+
    "\104\0\1\u0271\44\0\1\u0272\176\0\1\u0273\17\0\1\u0274"+
    "\153\0\1\u0275\45\0\1\u0276\1\u0277\110\0\1\u0278\47\0"+
    "\1\u0279\112\0\1\u027a\2\0\1\u027b\32\0\1\u027c\111\0"+
    "\1\u027d\110\0\1\u027e\107\0\1\u027f\155\0\1\u0280\7\0"+
    "\1\u0281\100\0\1\u0282\110\0\1\u0283\110\0\1\u0284\77\0"+
    "\1\u0285\57\0\1\u0286\105\0\1\u0287\46\0\1\u0288\1\u0289"+
    "\103\0\1\u028a\117\0\1\u028b\37\0\1\u028c\43\0\1\u028d"+
    "\1\0\1\u028e\2\0\1\u028f\5\0\1\u0290\31\0\1\u0291"+
    "\111\0\1\u0292\1\u0293\110\0\1\u0294\160\0\1\u0295\11\0"+
    "\1\u0296\100\0\1\u0297\76\0\1\u0298\112\0\1\u0299\46\0"+
    "\1\u029a\155\0\1\u029b\115\0\1\u029c\33\0\1\u029d\110\0"+
    "\1\u029e\112\0\1\u029f\106\0\1\u02a0\45\0\1\u02a1\45\0"+
    "\1\u02a2\154\0\1\u02a3\41\0\1\u02a4\50\0\1\u02a5\41\0"+
    "\1\u02a6\111\0\1\u02a7\162\0\1\u02a8\34\0\1\u02a9\107\0"+
    "\1\u02aa\156\0\1\u02ab\135\0\1\u02ac\74\0\1\u02ad\31\0"+
    "\1\u02ae\113\0\1\u02af\154\0\1\u02b0\1\u02b1\40\0\1\u02b2"+
    "\113\0\1\u02b3\45\0\1\u02b4\37\0\1\u02b5\42\0\1\u02b6"+
    "\45\0\1\u02b7\157\0\1\u02b8\126\0\1\u02b9\64\0\1\u02ba"+
    "\47\0\1\u02bb\42\0\1\u02bc\115\0\1\u02bd\104\0\1\u02be"+
    "\107\0\1\u02bf\123\0\1\u02c0\101\0\1\u02c1\1\u02c2\13\0"+
    "\1\u02c3\73\0\1\u02c4\126\0\1\u02c5\66\0\1\u02c6\126\0"+
    "\1\u02c7\73\0\1\u02c8\122\0\1\u02c9\101\0\1\u02ca\111\0"+
    "\1\u02cb\107\0\1\u02cc\43\0\1\u02cd\46\0\1\u02ce\41\0"+
    "\1\u02cf\156\0\1\u02d0\110\0\1\u02d1\43\0\1\u02d2\156\0"+
    "\1\u02d3\102\0\1\u02d4\112\0\1\u02d5\44\0\1\u02d6\107\0"+
    "\1\u02d7\46\0\1\u02d8\41\0\1\u02d9\2\0\1\u02da\43\0"+
    "\1\u02db\106\0\1\u02dc\43\0\1\u02dd\163\0\1\u02de\74\0"+
    "\1\u02df\51\0\1\u02e0\42\0\1\u02e1\50\0\1\u02e2\46\0"+
    "\1\u02e3\40\0\1\u02e4\44\0\1\u02e5\43\0\1\u02e6\110\0"+
    "\1\u02e7\43\0\1\u02e8\42\0\1\u02e9\110\0\1\u02ea\110\0"+
    "\1\u02eb\45\0\1\u02ec\45\0\1\u02ed\105\0\1\u02ee\166\0"+
    "\1\u02ef\5\0\1\u02f0\71\0\1\u02f1\112\0\1\u02f2\41\0"+
    "\1\u02f3\2\0\1\u02f4\152\0\1\u02f5\2\0\1\u02f6\5\0"+
    "\1\u02f7\113\0\1\u02f8\27\0\1\u02f9\154\0\1\u02fa\112\0"+
    "\1\u02fb\43\0\1\u02fc\111\0\1\u02fd\163\0\1\u02fe\35\0"+
    "\1\u02ff\156\0\1\u0300\1\u0301\5\0\1\u0302\117\0\1\u0303"+
    "\73\0\1\u0304\114\0\1\u0305\105\0\1\u0306\105\0\1\u0307"+
    "\41\0\1\u0308\110\0\1\u0309\1\u030a\41\0\1\u030b\1\u030c"+
    "\1\u030d\1\0\1\u030e\1\u030f\1\u0310\1\u0311\1\0\1\u0312"+
    "\3\0\1\u0313\4\0\1\u0314\3\0\1\u0315\22\0\1\u0316"+
    "\155\0\1\u0317\43\0\1\u0318\106\0\1\u0319\157\0\1\u031a"+
    "\121\0\1\u031b\72\0\1\u031c\3\0\1\u031d\110\0\1\u031e"+
    "\1\0\1\u031f\105\0\1\u0320\107\0\1\u0321\1\u0322\1\0"+
    "\1\u0323\3\0\1\u0324\10\0\1\u0325\73\0\1\u0326\41\0"+
    "\1\u0327\44\0\1\u0328\4\0\1\u0329\4\0\1\u032a\77\0"+
    "\1\u032b\125\0\1\u032c\76\0\1\u032d\117\0\1\u032e\76\0"+
    "\1\u032f\110\0\1\u0330\42\0\1\u0331\53\0\1\u0332\36\0"+
    "\1\u0333\106\0\1\u0334\147\0\1\u0335\50\0\1\u0336\175\0"+
    "\1\u0337\103\0\1\u0338\107\0\1\u0339\33\0\1\u033a\163\0"+
    "\1\u033b\76\0\1\u033c\132\0\1\u033d\72\0\1\u033e\44\0"+
    "\1\u033f\156\0\1\u0340\114\0\1\u0341\110\0\1\u0342\101\0"+
    "\1\u0343\107\0\1\u0344\46\0\1\u0345\105\0\1\u0346\153\0"+
    "\1\u0347\122\0\1\u0348\76\0\1\u0349\112\0\1\u034a\44\0"+
    "\1\u034b\111\0\1\u034c\163\0\1\u034d\101\0\1\u034e\122\0"+
    "\1\u034f\30\0\1\u0350\166\0\1\u0351\101\0\1\u0352\116\0"+
    "\1\u0353\102\0\1\u0354\112\0\1\u0355\42\0\1\u0356\107\0"+
    "\1\u0357\163\0\1\u0358\33\0\1\u0359\113\0\1\u035a\43\0"+
    "\1\u035b\116\0\1\u035c\34\0\1\u035d\156\0\1\u035e\101\0"+
    "\1\u035f\140\0\1\u0360\115\0\1\u0361\61\0\1\u0362\112\0"+
    "\1\u0363\115\0\1\u0364\100\0\1\u0365\46\0\1\u0366\152\0"+
    "\1\u0367\120\0\1\u0368\106\0\1\u0369\106\0\1\u036a\105\0"+
    "\1\u036b\43\0\1\u036c\164\0\1\u036d\112\0\1\u036e\31\0"+
    "\1\u036f\110\0\1\u0370\165\0\1\u0371\34\0\1\u0372\107\0"+
    "\1\u0373\112\0\1\u0374\106\0\1\u0375\165\0\1\u0376\117\0"+
    "\1\u0377\71\0\1\u0378\114\0\1\u0379\107\0\1\u037a\110\0"+
    "\1\u037b\111\0\1\u037c\104\0\1\u037d\120\0\1\u037e\34\0"+
    "\1\u037f\160\0\1\u0380\40\0\1\u0381\107\0\1\u0382\157\0"+
    "\1\u0383\43\0\1\u0384\106\0\1\u0385\152\0\1\u0386\133\0"+
    "\1\u0387\23\0\1\u0388\50\0\1\u0389\106\0\1\u038a\41\0"+
    "\1\u038b\160\0\1\u038c\40\0\1\u038d\113\0\1\u038e\160\0"+
    "\1\u038f\40\0\1\u0390\110\0\1\u0391\105\0\1\u0392\110\0"+
    "\1\u0393\162\0\1\u0394\107\0\1\u0395\37\0\1\u0396\203\0"+
    "\1\u0397\72\0\1\u0398\5\0\1\u0399\74\0\1\u039a\104\0"+
    "\1\u039b\2\0\1\u039c\105\0\1\u039d\122\0\1\u039e\35\0"+
    "\1\u039f\156\0\1\u03a0\107\0\1\u03a1\116\0\1\u03a2\33\0"+
    "\1\u03a3\165\0\1\u03a4\34\0\1\u03a5\112\0\1\u03a6\157\0"+
    "\1\u03a7\2\0\1\u03a8\5\0\1\u03a9\5\0\1\u03aa\62\0"+
    "\1\u03ab\113\0\1\u03ac\110\0\1\u03ad\113\0\1\u03ae\104\0"+
    "\1\u03af\43\0\1\u03b0\112\0\1\u03b1\153\0\1\u03b2\14\0"+
    "\1\u03b3\75\0\1\u03b4\111\0\1\u03b5\105\0\1\u03b6\46\0"+
    "\1\u03b7\163\0\1\u03b8\100\0\1\u03b9\42\0\1\u03ba\157\0"+
    "\1\u03bb\106\0\1\u03bc\43\0\1\u03bd\203\0\1\u03be\15\0"+
    "\1\u03bf\153\0\1\u03c0\50\0\1\u03c1\156\0\1\u03c2\37\0"+
    "\1\u03c3\157\0\1\u03c4\104\0\1\u03c5\5\0\1\u03c6\110\0"+
    "\1\u03c7\37\0\1\u03c8\157\0\1\u03c9\114\0\1\u03ca\35\0"+
    "\1\u03cb\42\0\1\u03cc\45\0\1\u03cd\161\0\1\u03ce\41\0"+
    "\1\u03cf\1\u03d0\105\0\1\u03d1\157\0\1\u03d2\106\0\1\u03d3"+
    "\43\0\1\u03d4\174\0\1\u03d5\67\0\1\u03d6\122\0\1\u03d7"+
    "\34\0\1\u03d8\53\0\1\u03d9\102\0\1\u03da\116\0\1\u03db"+
    "\1\u03dc\34\0\1\u03dd\157\0\1\u03de\122\0\1\u03df\75\0"+
    "\1\u03e0\107\0\1\u03e1\104\0\1\u03e2\110\0\1\u03e3\114\0"+
    "\1\u03e4\113\0\1\u03e5\113\0\1\u03e6\123\0\1\u03e7\67\0"+
    "\1\u03e8\44\0\1\u03e9\162\0\1\u03ea\110\0\1\u03eb\110\0"+
    "\1\u03ec\76\0\1\u03ed\120\0\1\u03ee\112\0\1\u03ef\35\0"+
    "\1\u03f0\162\0\1\u03f1\115\0\1\u03f2\117\0\1\u03f3\64\0"+
    "\1\u03f4\47\0\1\u03f5\156\0\1\u03f6\40\0\1\u03f7\160\0"+
    "\1\u03f8\3\0\1\u03f9\101\0\1\u03fa\113\0\1\u03fb\112\0"+
    "\1\u03fc\103\0\1\u03fd\42\0\1\u03fe\110\0\1\u03ff\161\0"+
    "\1\u0400\120\0\1\u0401\110\0\1\u0402\32\0\1\u0403\161\0"+
    "\1\u0404\103\0\1\u0405\122\0\1\u0406\76\0\1\u0407\110\0"+
    "\1\u0408\107\0\1\u0409\111\0\1\u040a\41\0\1\u040b\162\0"+
    "\1\u040c\107\0\1\u040d\114\0\1\u040e\107\0\1\u040f\34\0"+
    "\1\u0410\157\0\1\u0411\110\0\1\u0412\131\0\1\u0413\63\0"+
    "\1\u0414\114\0\1\u0415\106\0\1\u0416\1\0\1\u0417\44\0"+
    "\1\u0418\153\0\1\u0419\6\0\1\u041a\110\0\1\u041b\110\0"+
    "\1\u041c\34\0\1\u041d\164\0\1\u041e\116\0\1\u041f\102\0"+
    "\1\u0420\117\0\1\u0421\75\0\1\u0422\37\0\1\u0423\110\0"+
    "\1\u0424\161\0\1\u0425\41\0\1\u0426\41\0\1\u0427\112\0"+
    "\1\u0428\44\0\1\u0429\155\0\1\u042a\116\0\1\u042b\76\0"+
    "\1\u042c\114\0\1\u042d\126\0\1\u042e\23\0\1\u042f\171\0"+
    "\1\u0430\72\0\1\u0431\116\0\1\u0432\40\0\1\u0433\112\0"+
    "\1\u0434\110\0\1\u0435\57\0\1\u0436\70\0\1\u0437\114\0"+
    "\1\u0438\6\0\1\u0439\103\0\1\u043a\37\0\1\u043b\110\0"+
    "\1\u043c\42\0\1\u043d\110\0\1\u043e\2\0\1\u043f\111\0"+
    "\1\u0440\107\0\1\u0441\110\0\1\u0442\105\0\1\u0443\110\0"+
    "\1\u0444\5\0\1\u0445\41\0\1\u0446\106\0\1\u0447\161\0"+
    "\1\u0448\102\0\1\u0449\120\0\1\u044a\106\0\1\u044b\113\0"+
    "\1\u044c\103\0\1\u044d\110\0\1\u044e\41\0\1\u044f\165\0"+
    "\1\u0450\104\0\1\u0451\110\0\1\u0452\102\0\1\u0453\45\0"+
    "\1\u0454\157\0\1\u0455\116\0\1\u0456\76\0\1\u0457\116\0"+
    "\1\u0458\113\0\1\u0459\102\0\1\u045a\110\0\1\u045b\2\0"+
    "\1\u045c\120\0\1\u045d\27\0\1\u045e\110\0\1\u045f\110\0"+
    "\1\u0460\110\0\1\u0461\211\0\1\u0462\10\0\1\u0463\107\0"+
    "\1\u0464\113\0\1\u0465\154\0\1\u0466\42\0\1\u0467\157\0"+
    "\1\u0468\107\0\1\u0469\106\0\1\u046a\110\0\1\u046b\117\0"+
    "\1\u046c\105\0\1\u046d\102\0\1\u046e\46\0\1\u046f\111\0"+
    "\1\u0470\156\0\1\u0471\43\0\1\u0472\172\0\1\u0473\72\0"+
    "\1\u0474\41\0\1\u0475\176\0\1\u0476\70\0\1\u0477\42\0"+
    "\1\u0478\171\0\1\u0479\30\0\1\u047a\152\0\1\u047b\110\0"+
    "\1\u047c\114\0\1\u047d\107\0\1\u047e\110\0\1\u047f\103\0"+
    "\1\u0480\110\0\1\u0481\103\0\1\u0482\131\0\1\u0483\76\0"+
    "\1\u0484\47\0\1\u0485\157\0\1\u0486\106\0\1\u0487\41\0"+
    "\1\u0488\160\0\1\u0489\41\0\1\u048a\165\0\1\u048b\32\0"+
    "\1\u048c\110\0\1\u048d\157\0\1\u048e\126\0\1\u048f\66\0"+
    "\1\u0490\124\0\1\u0491\31\0\1\u0492\157\0\1\u0493\110\0"+
    "\1\u0494\122\0\1\u0495\75\0\1\u0496\42\0\1\u0497\161\0"+
    "\1\u0498\111\0\1\u0499\104\0\1\u049a\111\0\1\u049b\42\0"+
    "\1\u049c\164\0\1\u049d\36\0\1\u049e\211\0\1\u049f\52\0"+
    "\1\u04a0\115\0\1\u04a1\102\0\1\u04a2\2\0\1\u04a3\120\0"+
    "\1\u04a4\77\0\1\u04a5\44\0\1\u04a6\150\0\1\u04a7\110\0"+
    "\1\u04a8\116\0\1\u04a9\112\0\1\u04aa\104\0\1\u04ab\107\0"+
    "\1\u04ac\116\0\1\u04ad\131\0\1\u04ae\70\0\1\u04af\103\0"+
    "\1\u04b0\103\0\1\u04b1\117\0\1\u04b2\113\0\1\u04b3\102\0"+
    "\1\u04b4\110\0\1\u04b5\116\0\1\u04b6\102\0\1\u04b7\104\0"+
    "\1\u04b8\110\0\1\u04b9\110\0\1\u04ba\113\0\1\u04bb\115\0"+
    "\1\u04bc\37\0\1\u04bd\155\0\1\u04be\42\0\1\u04bf\164\0"+
    "\1\u04c0\34\0\1\u04c1\160\0\1\u04c2\104\0\1\u04c3\106\0"+
    "\1\u04c4\114\0\1\u04c5\107\0\1\u04c6\105\0\1\u04c7\50\0"+
    "\1\u04c8\37\0\1\u04c9\10\0\1\u04ca\105\0\1\u04cb\37\0"+
    "\1\u04cc\165\0\1\u04cd\34\0\1\u04ce\107\0\1\u04cf\200\0"+
    "\1\u04d0\72\0\1\u04d1\110\0\1\u04d2\104\0\1\u04d3\43\0"+
    "\1\u04d4\157\0\1\u04d5\115\0\1\u04d6\104\0\1\u04d7\40\0"+
    "\1\u04d8\156\0\1\u04d9\116\0\1\u04da\34\0\1\u04db\157\0"+
    "\1\u04dc\107\0\1\u04dd\106\0\1\u04de\112\0\1\u04df\110\0"+
    "\1\u04e0\41\0\1\u04e1\155\0\1\u04e2\43\0\1\u04e3\175\0"+
    "\1\u04e4\73\0\1\u04e5\105\0\1\u04e6\112\0\1\u04e7\106\0"+
    "\1\u04e8\2\0\1\u04e9\7\0\1\u04ea\30\0\1\u04eb\162\0"+
    "\1\u04ec\101\0\1\u04ed\110\0\1\u04ee\114\0\1\u04ef\110\0"+
    "\1\u04f0\112\0\1\u04f1\110\0\1\u04f2\37\0\1\u04f3\151\0"+
    "\1\u04f4\47\0\1\u04f5\156\0\1\u04f6\44\0\1\u04f7\43\0"+
    "\1\u04f8\113\0\1\u04f9\112\0\1\u04fa\112\0\1\u04fb\76\0"+
    "\1\u04fc\122\0\1\u04fd\36\0\1\u04fe\147\0\1\u04ff\111\0"+
    "\1\u0500\45\0\1\u0501\111\0\1\u0502\155\0\1\u0503\43\0"+
    "\1\u0504\160\0\1\u0505\40\0\1\u0506\155\0\1\u0507\113\0"+
    "\1\u0508\111\0\1\u0509\113\0\1\u050a\100\0\1\u050b\43\0"+
    "\1\u050c\161\0\1\u050d\5\0\1\u050e\31\0\1\u050f\161\0"+
    "\1\u0510\37\0\1\u0511\111\0\1\u0512\165\0\1\u0513\75\0"+
    "\1\u0514\110\0\1\u0515\122\0\1\u0516\33\0\1\u0517\110\0"+
    "\1\u0518\155\0\1\u0519\114\0\1\u051a\37\0\1\u051b\157\0"+
    "\1\u051c\116\0\1\u051d\104\0\1\u051e\40\0\1\u051f\154\0"+
    "\1\u0520\117\0\1\u0521\34\0\1\u0522\157\0\1\u0523\41\0"+
    "\1\u0524\160\0\1\u0525\115\0\1\u0526\34\0\1\u0527\174\0"+
    "\1\u0528\66\0\1\u0529\47\0\1\u052a\157\0\1\u052b\102\0"+
    "\1\u052c\50\0\1\u052d\156\0\1\u052e\104\0\1\u052f\106\0"+
    "\1\u0530\111\0\1\u0531\45\0\1\u0532\165\0\1\u0533\100\0"+
    "\1\u0534\42\0\1\u0535\161\0\1\u0536\112\0\1\u0537\104\0"+
    "\1\u0538\117\0\1\u0539\33\0\1\u053a\164\0\1\u053b\116\0"+
    "\1\u053c\71\0\1\u053d\111\0\1\u053e\44\0\1\u053f\51\0"+
    "\1\u0540\35\0\1\u0541\160\0\1\u0542\115\0\1\u0543\36\0"+
    "\1\u0544\162\0\1\u0545\33\0\1\u0546\111\0\1\u0547\157\0"+
    "\1\u0548\43\0\1\u0549\105\0\1\u054a\153\0\1\u054b\3\0"+
    "\1\u054c\112\0\1\u054d\110\0\1\u054e\114\0\1\u054f\105\0"+
    "\1\u0550\103\0\1\u0551\126\0\1\u0552\102\0\1\u0553\105\0"+
    "\1\u0554\113\0\1\u0555\36\0\1\u0556\153\0\1\u0557\130\0"+
    "\1\u0558\24\0\1\u0559\107\0\1\u055a\156\0\1\u055b\121\0"+
    "\1\u055c\67\0\1\u055d\120\0\1\u055e\41\0\1\u055f\153\0"+
    "\1\u0560\114\0\1\u0561\112\0\1\u0562\107\0\1\u0563\43\0"+
    "\1\u0564\150\0\1\u0565\112\0\1\u0566\127\0\1\u0567\75\0"+
    "\1\u0568\37\0\1\u0569\111\0\1\u056a\156\0\1\u056b\110\0"+
    "\1\u056c\117\0\1\u056d\110\0\1\u056e\35\0\1\u056f\156\0"+
    "\1\u0570\114\0\1\u0571\75\0\1\u0572\136\0\1\u0573\116\0"+
    "\1\u0574\63\0\1\u0575\106\0\1\u0576\110\0\1\u0577\110\0"+
    "\1\u0578\112\0\1\u0579\106\0\1\u057a\104\0\1\u057b\46\0"+
    "\1\u057c\110\0\1\u057d\160\0\1\u057e\40\0\1\u057f\164\0"+
    "\1\u0580\102\0\1\u0581\42\0\1\u0582\160\0\1\u0583\107\0"+
    "\1\u0584\111\0\1\u0585\106\0\1\u0586\103\0\1\u0587\117\0"+
    "\1\u0588\37\0\1\u0589\157\0\1\u058a\43\0\1\u058b\163\0"+
    "\1\u058c\34\0\1\u058d\164\0\1\u058e\121\0\1\u058f\73\0"+
    "\1\u0590\37\0\1\u0591\156\0\1\u0592\42\0\1\u0593\157\0"+
    "\1\u0594\41\0\1\u0595\111\0\1\u0596\107\0\1\u0597\155\0"+
    "\1\u0598\46\0\1\u0599\164\0\1\u059a\5\0\1\u059b\72\0"+
    "\1\u059c\127\0\1\u059d\25\0\1\u059e\105\0\1\u059f\161\0"+
    "\1\u05a0\102\0\1\u05a1\110\0\1\u05a2\127\0\1\u05a3\71\0"+
    "\1\u05a4\50\0\1\u05a5\150\0\1\u05a6\46\0\1\u05a7\156\0"+
    "\1\u05a8\104\0\1\u05a9\115\0\1\u05aa\106\0\1\u05ab\43\0"+
    "\1\u05ac\164\0\1\u05ad\102\0\1\u05ae\116\0\1\u05af\72\0"+
    "\1\u05b0\51\0\1\u05b1\166\0\1\u05b2\75\0\1\u05b3\114\0"+
    "\1\u05b4\43\0\1\u05b5\40\0\1\u05b6\46\0\1\u05b7\111\0"+
    "\1\u05b8\157\0\1\u05b9\106\0\1\u05ba\110\0\1\u05bb\41\0"+
    "\1\u05bc\50\0\1\u05bd\107\0\1\u05be\40\0\1\u05bf\157\0"+
    "\1\u05c0\126\0\1\u05c1\71\0\1\u05c2\111\0\1\u05c3\112\0"+
    "\1\u05c4\37\0\1\u05c5\110\0\1\u05c6\153\0\1\u05c7\122\0"+
    "\1\u05c8\33\0\1\u05c9\113\0\1\u05ca\154\0\1\u05cb\112\0"+
    "\1\u05cc\37\0\1\u05cd\157\0\1\u05ce\104\0\1\u05cf\150\0"+
    "\1\u05d0\55\0\1\u05d1\110\0\1\u05d2\117\0\1\u05d3\75\0"+
    "\1\u05d4\20\0\1\u05d5\74\0\1\u05d6\37\0\1\u05d7\113\0"+
    "\1\u05d8\105\0\1\u05d9\42\0\1\u05da\114\0\1\u05db\106\0"+
    "\1\u05dc\110\0\1\u05dd\113\0\1\u05de\104\0\1\u05df\45\0"+
    "\1\u05e0\110\0\1\u05e1\157\0\1\u05e2\40\0\1\u05e3\110\0"+
    "\1\u05e4\156\0\1\u05e5\125\0\1\u05e6\26\0\1\u05e7\110\0"+
    "\1\u05e8\157\0\1\u05e9\123\0\1\u05ea\123\0\1\u05eb\12\0"+
    "\1\u05ec\170\0\1\u05ed\113\0\1\u05ee\25\0\1\u05ef\160\0"+
    "\1\u05f0\105\0\1\u05f1\114\0\1\u05f2\110\0\1\u05f3\40\0"+
    "\1\u05f4\152\0\1\u05f5\122\0\1\u05f6\33\0\1\u05f7\160\0"+
    "\1\u05f8\41\0\1\u05f9\161\0\1\u05fa\41\0\1\u05fb\106\0"+
    "\1\u05fc\164\0\1\u05fd\36\0\1\u05fe\163\0\1\u05ff\102\0"+
    "\1\u0600\113\0\1\u0601\102\0\1\u0602\43\0\1\u0603\165\0"+
    "\1\u0604\76\0\1\u0605\116\0\1\u0606\106\0\1\u0607\44\0"+
    "\1\u0608\154\0\1\u0609\111\0\1\u060a\113\0\1\u060b\112\0"+
    "\1\u060c\35\0\1\u060d\106\0\1\u060e\161\0\1\u060f\104\0"+
    "\1\u0610\120\0\1\u0611\102\0\1\u0612\110\0\1\u0613\44\0"+
    "\1\u0614\156\0\1\u0615\122\0\1\u0616\73\0\1\u0617\122\0"+
    "\1\u0618\30\0\1\u0619\161\0\1\u061a\37\0\1\u061b\112\0"+
    "\1\u061c\165\0\1\u061d\31\0\1\u061e\165\0\1\u061f\102\0"+
    "\1\u0620\41\0\1\u0621\110\0\1\u0622\206\0\1\u0623\15\0"+
    "\1\u0624\153\0\1\u0625\45\0\1\u0626\154\0\1\u0627\123\0"+
    "\1\u0628\26\0\1\u0629\110\0\1\u062a\163\0\1\u062b\131\0"+
    "\1\u062c\76\0\1\u062d\26\0\1\u062e\110\0\1\u062f\161\0"+
    "\1\u0630\105\0\1\u0631\117\0\1\u0632\102\0\1\u0633\121\0"+
    "\1\u0634\107\0\1\u0635\101\0\1\u0636\40\0\1\u0637\111\0"+
    "\1\u0638\160\0\1\u0639\40\0\1\u063a\110\0\1\u063b\160\0"+
    "\1\u063c\114\0\1\u063d\102\0\1\u063e\112\0\1\u063f\40\0"+
    "\1\u0640\157\0\1\u0641\136\0\1\u0642\67\0\1\u0643\120\0"+
    "\1\u0644\23\0\1\u0645\161\0\1\u0646\40\0\1\u0647\160\0"+
    "\1\u0648\104\0\1\u0649\106\0\1\u064a\112\0\1\u064b\120\0"+
    "\1\u064c\101\0\1\u064d\117\0\1\u064e\102\0\1\u064f\41\0"+
    "\1\u0650\163\0\1\u0651\110\0\1\u0652\35\0\1\u0653\110\0"+
    "\1\u0654\157\0\1\u0655\110\0\1\u0656\116\0\1\u0657\111\0"+
    "\1\u0658\32\0\1\u0659\206\0\1\u065a\64\0\1\u065b\41\0"+
    "\1\u065c\156\0\1\u065d\107\0\1\u065e\111\0\1\u065f\104\0"+
    "\1\u0660\43\0\1\u0661\156\0\1\u0662\110\0\1\u0663\42\0"+
    "\1\u0664\161\0\1\u0665\105\0\1\u0666\113\0\1\u0667\37\0"+
    "\1\u0668\157\0\1\u0669\111\0\1\u066a\125\0\1\u066b\26\0"+
    "\1\u066c\110\0\1\u066d\45\0\1\u066e\105\0\1\u066f\110\0"+
    "\1\u0670\121\0\1\u0671\100\0\1\u0672\102\0\1\u0673\112\0"+
    "\1\u0674\114\0\1\u0675\41\0\1\u0676\157\0\1\u0677\42\0"+
    "\1\u0678\161\0\1\u0679\102\0\1\u067a\44\0\1\u067b\157\0"+
    "\1\u067c\110\0\1\u067d\43\0\1\u067e\106\0\1\u067f\153\0"+
    "\1\u0680\114\0\1\u0681\106\0\1\u0682\44\0\1\u0683\156\0"+
    "\1\u0684\110\0\1\u0685\110\0\1\u0686\137\0\1\u0687\12\0"+
    "\1\u0688\157\0\1\u0689\110\0\1\u068a\121\0\1\u068b\106\0"+
    "\1\u068c\102\0\1\u068d\107\0\1\u068e\107\0\1\u068f\126\0"+
    "\1\u0690\73\0\1\u0691\111\0\1\u0692\116\0\1\u0693\32\0"+
    "\1\u0694\174\0\1\u0695\24\0\1\u0696\157\0\1\u0697\106\0"+
    "\1\u0698\114\0\1\u0699\114\0\1\u069a\76\0\1\u069b\45\0"+
    "\1\u069c\153\0\1\u069d\45\0\1\u069e\153\0\1\u069f\120\0"+
    "\1\u06a0\102\0\1\u06a1\115\0\1\u06a2\36\0\1\u06a3\167\0"+
    "\1\u06a4\102\0\1\u06a5\37\0\1\u06a6\156\0\1\u06a7\43\0"+
    "\1\u06a8\107\0\1\u06a9\165\0\1\u06aa\101\0\1\u06ab\117\0"+
    "\1\u06ac\111\0\1\u06ad\115\0\1\u06ae\102\0\1\u06af\34\0"+
    "\1\u06b0\107\0\1\u06b1\110\0\1\u06b2\173\0\1\u06b3\25\0"+
    "\1\u06b4\153\0\1\u06b5\125\0\1\u06b6\31\0\1\u06b7\160\0"+
    "\1\u06b8\37\0\1\u06b9\110\0\1\u06ba\153\0\1\u06bb\112\0"+
    "\1\u06bc\16\0\1\u06bd\102\0\1\u06be\77\0\1\u06bf\112\0"+
    "\1\u06c0\110\0\1\u06c1\111\0\1\u06c2\40\0\1\u06c3\160\0"+
    "\1\u06c4\107\0\1\u06c5\137\0\1\u06c6\61\0\1\u06c7\42\0"+
    "\1\u06c8\157\0\1\u06c9\107\0\1\u06ca\106\0\1\u06cb\43\0"+
    "\1\u06cc\167\0\1\u06cd\32\0\1\u06ce\166\0\1\u06cf\31\0"+
    "\1\u06d0\175\0\1\u06d1\110\0\1\u06d2\23\0\1\u06d3\50\0"+
    "\1\u06d4\110\0\1\u06d5\112\0\1\u06d6\107\0\1\u06d7\77\0"+
    "\1\u06d8\120\0\1\u06d9\105\0\1\u06da\111\0\1\u06db\42\0"+
    "\1\u06dc\156\0\1\u06dd\42\0\1\u06de\110\0\1\u06df\155\0"+
    "\1\u06e0\43\0\1\u06e1\110\0\1\u06e2\164\0\1\u06e3\104\0"+
    "\1\u06e4\106\0\1\u06e5\110\0\1\u06e6\120\0\1\u06e7\113\0"+
    "\1\u06e8\103\0\1\u06e9\34\0\1\u06ea\157\0\1\u06eb\40\0"+
    "\1\u06ec\150\0\1\u06ed\117\0\1\u06ee\107\0\1\u06ef\110\0"+
    "\1\u06f0\113\0\1\u06f1\42\0\1\u06f2\156\0\1\u06f3\106\0"+
    "\1\u06f4\111\0\1\u06f5\115\0\1\u06f6\102\0\1\u06f7\107\0"+
    "\1\u06f8\111\0\1\u06f9\103\0\1\u06fa\46\0\1\u06fb\112\0"+
    "\1\u06fc\106\0\1\u06fd\50\0\1\u06fe\110\0\1\u06ff\114\0"+
    "\1\u0700\101\0\1\u0701\43\0\1\u0702\154\0\1\u0703\130\0"+
    "\1\u0704\67\0\1\u0705\123\0\1\u0706\34\0\1\u0707\154\0"+
    "\1\u0708\42\0\1\u0709\156\0\1\u070a\41\0\1\u070b\157\0"+
    "\1\u070c\104\0\1\u070d\50\0\1\u070e\162\0\1\u070f\34\0"+
    "\1\u0710\110\0\1\u0711\107\0\1\u0712\110\0\1\u0713\157\0"+
    "\1\u0714\116\0\1\u0715\102\0\1\u0716\106\0\1\u0717\112\0"+
    "\1\u0718\41\0\1\u0719\160\0\1\u071a\42\0\1\u071b\157\0"+
    "\1\u071c\37\0\1\u071d\110\0\1\u071e\155\0\1\u071f\122\0"+
    "\1\u0720\73\0\1\u0721\117\0\1\u0722\115\0\1\u0723\32\0"+
    "\1\u0724\167\0\1\u0725\77\0\1\u0726\111\0\1\u0727\44\0"+
    "\1\u0728\153\0\1\u0729\110\0\1\u072a\104\0\1\u072b\115\0"+
    "\1\u072c\42\0\1\u072d\155\0\1\u072e\111\0\1\u072f\104\0"+
    "\1\u0730\46\0\1\u0731\161\0\1\u0732\105\0\1\u0733\121\0"+
    "\1\u0734\101\0\1\u0735\37\0\1\u0736\156\0\1\u0737\101\0"+
    "\1\u0738\51\0\1\u0739\165\0\1\u073a\110\0\1\u073b\100\0"+
    "\1\u073c\43\0\1\u073d\160\0\1\u073e\40\0\1\u073f\157\0"+
    "\1\u0740\120\0\1\u0741\74\0\1\u0742\122\0\1\u0743\76\0"+
    "\1\u0744\143\0\1\u0745\67\0\1\u0746\100\0\1\u0747\44\0"+
    "\1\u0748\155\0\1\u0749\45\0\1\u074a\154\0\1\u074b\104\0"+
    "\1\u074c\47\0\1\u074d\157\0\1\u074e\106\0\1\u074f\41\0"+
    "\1\u0750\111\0\1\u0751\156\0\1\u0752\41\0\1\u0753\155\0"+
    "\1\u0754\110\0\1\u0755\43\0\1\u0756\157\0\1\u0757\112\0"+
    "\1\u0758\111\0\1\u0759\111\0\1\u075a\114\0\1\u075b\100\0"+
    "\1\u075c\126\0\1\u075d\121\0\1\u075e\60\0\1\u075f\107\0"+
    "\1\u0760\45\0\1\u0761\106\0\1\u0762\111\0\1\u0763\110\0"+
    "\1\u0764\154\0\1\u0765\5\0\1\u0766\114\0\1\u0767\106\0"+
    "\1\u0768\100\0\1\u0769\107\0\1\u076a\115\0\1\u076b\37\0"+
    "\1\u076c\156\0\1\u076d\45\0\1\u076e\177\0\1\u076f\65\0"+
    "\1\u0770\106\0\1\u0771\115\0\1\u0772\102\0\1\u0773\110\0"+
    "\1\u0774\151\0\1\u0775\3\0\1\u0776\166\0\1\u0777\33\0"+
    "\1\u0778\157\0\1\u0779\107\0\1\u077a\123\0\1\u077b\75\0"+
    "\1\u077c\41\0\1\u077d\162\0\1\u077e\101\0\1\u077f\113\0"+
    "\1\u0780\113\0\1\u0781\110\0\1\u0782\124\0\1\u0783\23\0"+
    "\1\u0784\111\0\1\u0785\164\0\1\u0786\74\0\1\u0787\156\0"+
    "\1\u0788\4\0\1\u0789\106\0\1\u078a\110\0\1\u078b\151\0"+
    "\1\u078c\117\0\1\u078d\42\0\1\u078e\110\0\1\u078f\105\0"+
    "\1\u0790\110\0\1\u0791\110\0\1\u0792\163\0\1\u0793\36\0"+
    "\1\u0794\156\0\1\u0795\44\0\1\u0796\166\0\1\u0797\77\0"+
    "\1\u0798\146\0\1\u0799\106\0\1\u079a\4\0\1\u079b\166\0"+
    "\1\u079c\130\0\1\u079d\62\0\1\u079e\40\0\1\u079f\110\0"+
    "\1\u07a0\155\0\1\u07a1\110\0\1\u07a2\130\0\1\u07a3\66\0"+
    "\1\u07a4\122\0\1\u07a5\33\0\1\u07a6\146\0\1\u07a7\142\0"+
    "\1\u07a8\75\0\1\u07a9\76\0\1\u07aa\151\0\1\u07ab\45\0"+
    "\1\u07ac\120\0\1\u07ad\104\0\1\u07ae\77\0\1\u07af\160\0"+
    "\1\u07b0\53\0\1\u07b1\41\0\1\u07b2\151\0\1\u07b3\126\0"+
    "\1\u07b4\100\0\1\u07b5\134\0\1\u07b6\64\0\1\u07b7\2\0"+
    "\1\u07b8\101\0\1\u07b9\101\0\1\u07ba\117\0\1\u07bb\45\0"+
    "\1\u07bc\154\0\1\u07bd\103\0\1\u07be\115\0\1\u07bf\113\0"+
    "\1\u07c0\44\0\1\u07c1\105\0\1\u07c2\113\0\1\u07c3\150\0"+
    "\1\u07c4\45\0\1\u07c5\206\0\1\u07c6\12\0\1\u07c7\161\0"+
    "\1\u07c8\135\0\1\u07c9\15\0\1\u07ca\147\0\1\u07cb\113\0"+
    "\1\u07cc\141\0\1\u07cd\61\0\1\u07ce\104\0\1\u07cf\111\0"+
    "\1\u07d0\47\0\1\u07d1\105\0\1\u07d2\107\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[115340];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\6\11\6\1\2\11\1\1\1\11"+
    "\1\1\1\11\1\1\2\11\1\1\1\11\31\1\1\11"+
    "\25\0\12\11\7\0\2\1\15\0\1\11\17\0\1\1"+
    "\4\0\2\1\5\0\1\1\14\0\2\1\3\0\1\11"+
    "\37\0\1\1\31\0\1\11\14\0\1\11\5\0\1\11"+
    "\11\0\1\1\26\0\2\11\1\0\1\1\5\0\1\11"+
    "\3\0\2\11\2\0\1\11\2\0\1\1\5\0\1\11"+
    "\4\0\1\11\6\0\1\1\4\0\1\11\23\0\1\1"+
    "\1\0\1\1\1\11\3\0\1\1\11\0\1\11\5\0"+
    "\1\11\33\0\1\1\17\0\1\1\6\0\1\11\15\0"+
    "\2\11\1\0\2\1\7\0\1\1\12\0\1\1\10\0"+
    "\1\1\2\0\1\11\6\0\1\1\7\0\1\11\6\0"+
    "\1\11\2\0\1\11\14\0\1\11\3\0\2\11\3\0"+
    "\1\1\4\0\1\11\1\0\1\11\1\1\4\0\1\11"+
    "\13\0\1\11\6\0\2\11\2\0\1\11\2\0\1\11"+
    "\4\0\1\11\21\0\2\11\3\0\1\11\3\0\1\11"+
    "\10\0\1\11\11\0\1\1\1\11\10\0\1\11\13\0"+
    "\1\11\10\0\2\1\7\0\1\1\1\0\1\11\1\0"+
    "\1\1\1\0\1\11\1\0\4\11\6\0\1\1\2\11"+
    "\23\0\1\1\4\0\1\11\13\0\1\11\3\0\1\1"+
    "\7\0\1\11\1\0\1\11\1\1\1\11\5\0\1\11"+
    "\1\0\1\11\14\0\1\1\6\0\1\11\3\0\1\1"+
    "\1\11\3\0\1\11\1\1\12\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\0\1\11\5\0\1\11\2\0\1\11"+
    "\4\0\1\11\1\0\1\11\1\1\2\11\15\0\1\11"+
    "\2\0\1\11\1\0\1\11\12\0\1\1\5\0\1\11"+
    "\1\0\1\1\2\0\1\1\2\0\1\11\4\0\1\11"+
    "\12\0\1\11\3\0\1\11\2\0\1\11\1\0\1\11"+
    "\2\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\1\1\0\1\11\1\0\1\11\5\0\2\11\6\0"+
    "\3\11\3\0\1\11\4\0\1\11\15\0\1\11\2\0"+
    "\1\1\1\0\1\11\2\0\1\11\10\0\1\11\4\0"+
    "\1\11\2\0\1\11\2\0\1\11\2\0\1\11\13\0"+
    "\1\1\3\0\1\11\7\0\2\11\13\0\1\11\11\0"+
    "\2\11\1\1\1\0\1\11\2\0\1\11\4\0\1\11"+
    "\1\0\1\11\17\0\2\11\14\0\1\11\1\0\2\11"+
    "\3\0\1\11\3\0\3\11\4\0\1\11\1\0\1\1"+
    "\2\0\1\11\10\0\1\11\3\0\1\11\6\0\1\11"+
    "\2\0\1\11\2\1\25\0\1\11\10\0\1\11\6\0"+
    "\2\11\6\0\1\11\1\1\1\0\2\11\2\0\2\11"+
    "\3\0\1\1\3\11\7\0\2\11\2\0\1\1\1\11"+
    "\5\0\1\11\11\0\2\11\2\0\3\11\1\0\2\11"+
    "\1\0\2\11\3\0\1\11\11\0\2\11\1\0\2\11"+
    "\2\0\1\11\3\0\1\1\5\0\2\11\11\0\1\11"+
    "\15\0\1\11\3\0\1\11\11\0\1\11\3\0\1\11"+
    "\3\0\1\11\3\0\1\11\13\0\1\11\1\0\1\11"+
    "\11\0\1\11\1\0\2\11\6\0\2\11\1\0\1\11"+
    "\1\0\2\11\2\0\1\11\3\0\1\11\5\0\1\11"+
    "\2\0\1\1\3\0\2\11\3\0\1\11\4\0\1\11"+
    "\1\0\1\11\3\0\1\11\5\0\1\11\16\0\2\11"+
    "\10\0\1\11\5\0\1\11\1\0\1\11\3\0\2\11"+
    "\1\0\1\11\1\0\2\11\2\0\1\11\1\0\3\11"+
    "\1\0\1\11\1\0\1\11\1\0\2\11\1\0\1\11"+
    "\7\0\2\11\1\0\2\11\1\0\1\11\4\0\1\11"+
    "\4\0\1\11\10\0\1\11\2\0\1\11\1\0\1\11"+
    "\3\0\1\11\6\0\1\11\7\0\2\11\2\0\1\1"+
    "\1\11\1\0\1\1\5\0\3\11\2\0\1\11\10\0"+
    "\2\11\3\0\1\11\5\0\1\11\3\0\2\11\2\0"+
    "\1\11\6\0\1\11\4\0\2\11\3\0\1\11\2\0"+
    "\1\11\1\0\1\11\5\0\1\11\3\0\1\11\1\0"+
    "\1\11\1\0\1\11\7\0\1\11\1\0\1\11\10\0"+
    "\1\1\1\0\1\11\1\0\1\11\4\0\1\11\1\0"+
    "\1\11\1\0\2\11\2\0\2\11\1\0\1\11\3\0"+
    "\1\11\1\0\1\11\1\0\2\11\7\0\1\11\6\0"+
    "\1\11\1\0\1\11\1\1\1\0\1\11\1\0\1\11"+
    "\3\0\1\11\6\0\1\11\2\0\2\11\3\0\1\11"+
    "\2\0\1\11\4\0\1\1\1\11\2\0\1\11\7\0"+
    "\1\11\4\0\1\1\4\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\0\1\11\3\0\3\11\2\0\1\1\1\0"+
    "\3\11\5\0\2\11\1\0\3\11\6\0\1\11\6\0"+
    "\2\11\3\0\3\11\4\0\2\11\1\0\1\11\1\0"+
    "\1\1\2\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\2\11\1\0\2\11\10\0\4\11\1\0\2\11\2\0"+
    "\2\11\6\0\2\11\3\0\1\11\1\0\1\1\2\11"+
    "\1\0\2\11\1\0\1\11\16\0\1\11\4\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\0\1\11\3\0\1\11"+
    "\2\0\1\1\3\11\1\0\1\11\1\0\1\11\2\0"+
    "\2\11\4\0\1\11\3\0\1\11\1\0\1\11\1\0"+
    "\1\11\5\0\1\11\1\0\1\1\1\0\1\11\1\0"+
    "\1\11\2\0\1\11\2\0\3\11\1\0\1\11\2\0"+
    "\2\11\1\0\1\11\3\0\1\11\2\0\2\11\3\0"+
    "\2\11\2\0\3\11\6\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\3\11\2\0\3\11\2\0\1\11\1\0"+
    "\1\11\2\0\2\11\2\0\4\11\3\0\3\11\5\0"+
    "\2\11\5\0\1\11\6\0\1\11\1\0\2\11\5\0"+
    "\11\11\2\0\1\11\10\0\1\11\16\0\1\1\6\0"+
    "\1\11\1\0\1\11\5\0\1\11\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[2002];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Symbol symbol(int type){
        return new Symbol (type, yyline, yycolumn);
    }

    private Symbol symbol(int type, Object value){
        return new Symbol (type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 230) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol(sym.ERROR, yychar, yyline, yytext());
            } 
            // fall through
          case 498: break;
          case 2: 
            { return new Symbol(sym.Menos, yychar, yyline, yytext());
            } 
            // fall through
          case 499: break;
          case 3: 
            { return new Symbol(sym.Punto, yychar, yyline, yytext());
            } 
            // fall through
          case 500: break;
          case 4: 
            { return new Symbol(sym.Mas, yychar, yyline, yytext());
            } 
            // fall through
          case 501: break;
          case 5: 
            { return new Symbol(sym.Asterisco, yychar, yyline, yytext());
            } 
            // fall through
          case 502: break;
          case 6: 
            { return new Symbol(sym.Slash, yychar, yyline, yytext());
            } 
            // fall through
          case 503: break;
          case 7: 
            { return new Symbol(sym.Porcentaje, yychar, yyline, yytext());
            } 
            // fall through
          case 504: break;
          case 8: 
            { return new Symbol(sym.Igual, yychar, yyline, yytext());
            } 
            // fall through
          case 505: break;
          case 9: 
            { return new Symbol(sym.Menor, yychar, yyline, yytext());
            } 
            // fall through
          case 506: break;
          case 10: 
            { return new Symbol(sym.Mayor, yychar, yyline, yytext());
            } 
            // fall through
          case 507: break;
          case 11: 
            { return new Symbol(sym.Not, yychar, yyline, yytext());
            } 
            // fall through
          case 508: break;
          case 12: 
            { return new Symbol(sym.PuntoYComa, yychar, yyline, yytext());
            } 
            // fall through
          case 509: break;
          case 13: 
            { return new Symbol(sym.Coma, yychar, yyline, yytext());
            } 
            // fall through
          case 510: break;
          case 14: 
            { return new Symbol(sym.CorcheteAbre, yychar, yyline, yytext());
            } 
            // fall through
          case 511: break;
          case 15: 
            { return new Symbol(sym.CorcheteCierre, yychar, yyline, yytext());
            } 
            // fall through
          case 512: break;
          case 16: 
            { return new Symbol(sym.parentesisAbre, yychar, yyline, yytext());
            } 
            // fall through
          case 513: break;
          case 17: 
            { return new Symbol(sym.ParentesisCierre, yychar, yyline, yytext());
            } 
            // fall through
          case 514: break;
          case 18: 
            { return new Symbol(sym.LlaveAbre, yychar, yyline, yytext());
            } 
            // fall through
          case 515: break;
          case 19: 
            { return new Symbol(sym.LlaveCierre, yychar, yyline, yytext());
            } 
            // fall through
          case 516: break;
          case 20: 
            { return new Symbol(sym.Arroba, yychar, yyline, yytext());
            } 
            // fall through
          case 517: break;
          case 21: 
            { return new Symbol(sym.Tag, yychar, yyline, yytext());
            } 
            // fall through
          case 518: break;
          case 22: 
            { return new Symbol(sym.ComillaSimple, yychar, yyline, yytext());
            } 
            // fall through
          case 519: break;
          case 23: 
            { return new Symbol(sym.ComillaDoble, yychar, yyline, yytext());
            } 
            // fall through
          case 520: break;
          case 24: 
            { return new Symbol(sym.IgualComparador, yychar, yyline, yytext());
            } 
            // fall through
          case 521: break;
          case 25: 
            { return new Symbol(sym.MenorIgual, yychar, yyline, yytext());
            } 
            // fall through
          case 522: break;
          case 26: 
            { return new Symbol(sym.MayorIgual, yychar, yyline, yytext());
            } 
            // fall through
          case 523: break;
          case 27: 
            { return new Symbol(sym.NotIgual, yychar, yyline, yytext());
            } 
            // fall through
          case 524: break;
          case 28: 
            { return new Symbol(sym.And, yychar, yyline, yytext());
            } 
            // fall through
          case 525: break;
          case 29: 
            { return new Symbol(sym.Or, yychar, yyline, yytext());
            } 
            // fall through
          case 526: break;
          case 30: 
            { return new Symbol(sym.Corchetes, yychar, yyline, yytext());
            } 
            // fall through
          case 527: break;
          case 31: 
            { return new Symbol(sym.Parentesis, yychar, yyline, yytext());
            } 
            // fall through
          case 528: break;
          case 32: 
            { return new Symbol(sym.Lllaves, yychar, yyline, yytext());
            } 
            // fall through
          case 529: break;
          case 33: 
            { return new Symbol(sym.TagDoble, yychar, yyline, yytext());
            } 
            // fall through
          case 530: break;
          case 34: 
            { return new Symbol(sym.AS , yychar, yyline, yytext());
            } 
            // fall through
          case 531: break;
          case 35: 
            { return new Symbol(sym.AT , yychar, yyline, yytext());
            } 
            // fall through
          case 532: break;
          case 36: 
            { return new Symbol(sym.BY , yychar, yyline, yytext());
            } 
            // fall through
          case 533: break;
          case 37: 
            { return new Symbol(sym.ON , yychar, yyline, yytext());
            } 
            // fall through
          case 534: break;
          case 38: 
            { return new Symbol(sym.OF , yychar, yyline, yytext());
            } 
            // fall through
          case 535: break;
          case 39: 
            { return new Symbol(sym.OR , yychar, yyline, yytext());
            } 
            // fall through
          case 536: break;
          case 40: 
            { return new Symbol(sym.TO , yychar, yyline, yytext());
            } 
            // fall through
          case 537: break;
          case 41: 
            { return new Symbol(sym.IN , yychar, yyline, yytext());
            } 
            // fall through
          case 538: break;
          case 42: 
            { return new Symbol(sym.IS , yychar, yyline, yytext());
            } 
            // fall through
          case 539: break;
          case 43: 
            { return new Symbol(sym.IF , yychar, yyline, yytext());
            } 
            // fall through
          case 540: break;
          case 44: 
            { return new Symbol(sym.GO , yychar, yyline, yytext());
            } 
            // fall through
          case 541: break;
          case 45: 
            { return new Symbol(sym.END , yychar, yyline, yytext());
            } 
            // fall through
          case 542: break;
          case 46: 
            { return new Symbol(sym.NEW , yychar, yyline, yytext());
            } 
            // fall through
          case 543: break;
          case 47: 
            { return new Symbol(sym.NOT , yychar, yyline, yytext());
            } 
            // fall through
          case 544: break;
          case 48: 
            { return new Symbol(sym.USE , yychar, yyline, yytext());
            } 
            // fall through
          case 545: break;
          case 49: 
            { return new Symbol(sym.AND , yychar, yyline, yytext());
            } 
            // fall through
          case 546: break;
          case 50: 
            { return new Symbol(sym.ANY , yychar, yyline, yytext());
            } 
            // fall through
          case 547: break;
          case 51: 
            { return new Symbol(sym.ALL , yychar, yyline, yytext());
            } 
            // fall through
          case 548: break;
          case 52: 
            { return new Symbol(sym.ASC , yychar, yyline, yytext());
            } 
            // fall through
          case 549: break;
          case 53: 
            { return new Symbol(sym.ADA , yychar, yyline, yytext());
            } 
            // fall through
          case 550: break;
          case 54: 
            { return new Symbol(sym.ADD , yychar, yyline, yytext());
            } 
            // fall through
          case 551: break;
          case 55: 
            { return new Symbol(sym.ARE , yychar, yyline, yytext());
            } 
            // fall through
          case 552: break;
          case 56: 
            { return new Symbol(sym.AVG , yychar, yyline, yytext());
            } 
            // fall through
          case 553: break;
          case 57: 
            { return new Symbol(sym.BIT, yychar, yyline, yytext());
            } 
            // fall through
          case 554: break;
          case 58: 
            { return new Symbol(sym.BIT , yychar, yyline, yytext());
            } 
            // fall through
          case 555: break;
          case 59: 
            { return new Symbol(sym.SET , yychar, yyline, yytext());
            } 
            // fall through
          case 556: break;
          case 60: 
            { return new Symbol(sym.SUM , yychar, yyline, yytext());
            } 
            // fall through
          case 557: break;
          case 61: 
            { return new Symbol(sym.SQL , yychar, yyline, yytext());
            } 
            // fall through
          case 558: break;
          case 62: 
            { return new Symbol(sym.OUT , yychar, yyline, yytext());
            } 
            // fall through
          case 559: break;
          case 63: 
            { return new Symbol(sym.OLD , yychar, yyline, yytext());
            } 
            // fall through
          case 560: break;
          case 64: 
            { return new Symbol(sym.OFF , yychar, yyline, yytext());
            } 
            // fall through
          case 561: break;
          case 65: 
            { return new Symbol(sym.TOP , yychar, yyline, yytext());
            } 
            // fall through
          case 562: break;
          case 66: 
            { return new Symbol(sym.TRY , yychar, yyline, yytext());
            } 
            // fall through
          case 563: break;
          case 67: 
            { return new Symbol(sym.INT , yychar, yyline, yytext());
            } 
            // fall through
          case 564: break;
          case 68: 
            { return new Symbol(sym.DEC , yychar, yyline, yytext());
            } 
            // fall through
          case 565: break;
          case 69: 
            { return new Symbol(sym.DAY , yychar, yyline, yytext());
            } 
            // fall through
          case 566: break;
          case 70: 
            { return new Symbol(sym.MAX , yychar, yyline, yytext());
            } 
            // fall through
          case 567: break;
          case 71: 
            { return new Symbol(sym.MAP , yychar, yyline, yytext());
            } 
            // fall through
          case 568: break;
          case 72: 
            { return new Symbol(sym.MOD , yychar, yyline, yytext());
            } 
            // fall through
          case 569: break;
          case 73: 
            { return new Symbol(sym.MIN , yychar, yyline, yytext());
            } 
            // fall through
          case 570: break;
          case 74: 
            { return new Symbol(sym.FOR , yychar, yyline, yytext());
            } 
            // fall through
          case 571: break;
          case 75: 
            { return new Symbol(sym.REF , yychar, yyline, yytext());
            } 
            // fall through
          case 572: break;
          case 76: 
            { return new Symbol(sym.ROW , yychar, yyline, yytext());
            } 
            // fall through
          case 573: break;
          case 77: 
            { return new Symbol(sym.GET , yychar, yyline, yytext());
            } 
            // fall through
          case 574: break;
          case 78: 
            { return new Symbol(sym.VAR , yychar, yyline, yytext());
            } 
            // fall through
          case 575: break;
          case 79: 
            { return new Symbol(sym.KEY , yychar, yyline, yytext());
            } 
            // fall through
          case 576: break;
          case 80: 
            { return new Symbol(sym.PAD , yychar, yyline, yytext());
            } 
            // fall through
          case 577: break;
          case 81: 
            { return new Symbol(sym.POP , yychar, yyline, yytext());
            } 
            // fall through
          case 578: break;
          case 82: 
            { return new Symbol(sym.bit , yychar, yyline, yytext());
            } 
            // fall through
          case 579: break;
          case 83: 
            { return new Symbol(sym.ELSE , yychar, yyline, yytext());
            } 
            // fall through
          case 580: break;
          case 84: 
            { return new Symbol(sym.EACH , yychar, yyline, yytext());
            } 
            // fall through
          case 581: break;
          case 85: 
            { return new Symbol(sym.EXEC , yychar, yyline, yytext());
            } 
            // fall through
          case 582: break;
          case 86: 
            { return new Symbol(sym.EXIT , yychar, yyline, yytext());
            } 
            // fall through
          case 583: break;
          case 87: 
            { return new Symbol(sym.NEXT , yychar, yyline, yytext());
            } 
            // fall through
          case 584: break;
          case 88: 
            { return new Symbol(sym.NULL , yychar, yyline, yytext());
            } 
            // fall through
          case 585: break;
          case 89: 
            { return new Symbol(sym.NONE , yychar, yyline, yytext());
            } 
            // fall through
          case 586: break;
          case 90: 
            { return new Symbol(sym.USER , yychar, yyline, yytext());
            } 
            // fall through
          case 587: break;
          case 91: 
            { return new Symbol(sym.LESS , yychar, yyline, yytext());
            } 
            // fall through
          case 588: break;
          case 92: 
            { return new Symbol(sym.LEFT , yychar, yyline, yytext());
            } 
            // fall through
          case 589: break;
          case 93: 
            { return new Symbol(sym.LAST , yychar, yyline, yytext());
            } 
            // fall through
          case 590: break;
          case 94: 
            { return new Symbol(sym.LOAD , yychar, yyline, yytext());
            } 
            // fall through
          case 591: break;
          case 95: 
            { return new Symbol(sym.LIKE , yychar, yyline, yytext());
            } 
            // fall through
          case 592: break;
          case 96: 
            { return new Symbol(sym.AVGY , yychar, yyline, yytext());
            } 
            // fall through
          case 593: break;
          case 97: 
            { return new Symbol(sym.AVGX , yychar, yyline, yytext());
            } 
            // fall through
          case 594: break;
          case 98: 
            { return new Symbol(sym.BULK , yychar, yyline, yytext());
            } 
            // fall through
          case 595: break;
          case 99: 
            { return new Symbol(sym.BOTH , yychar, yyline, yytext());
            } 
            // fall through
          case 596: break;
          case 100: 
            { return new Symbol(sym.SETS , yychar, yyline, yytext());
            } 
            // fall through
          case 597: break;
          case 101: 
            { return new Symbol(sym.SAVE , yychar, yyline, yytext());
            } 
            // fall through
          case 598: break;
          case 102: 
            { return new Symbol(sym.SOME , yychar, yyline, yytext());
            } 
            // fall through
          case 599: break;
          case 103: 
            { return new Symbol(sym.SIZE , yychar, yyline, yytext());
            } 
            // fall through
          case 600: break;
          case 104: 
            { return new Symbol(sym.ONLY , yychar, yyline, yytext());
            } 
            // fall through
          case 601: break;
          case 105: 
            { return new Symbol(sym.OVER , yychar, yyline, yytext());
            } 
            // fall through
          case 602: break;
          case 106: 
            { return new Symbol(sym.OPEN , yychar, yyline, yytext());
            } 
            // fall through
          case 603: break;
          case 107: 
            { return new Symbol(sym.TIME , yychar, yyline, yytext());
            } 
            // fall through
          case 604: break;
          case 108: 
            { return new Symbol(sym.TRUE , yychar, yyline, yytext());
            } 
            // fall through
          case 605: break;
          case 109: 
            { return new Symbol(sym.TRAN , yychar, yyline, yytext());
            } 
            // fall through
          case 606: break;
          case 110: 
            { return new Symbol(sym.TRIM , yychar, yyline, yytext());
            } 
            // fall through
          case 607: break;
          case 111: 
            { return new Symbol(sym.TYPE , yychar, yyline, yytext());
            } 
            // fall through
          case 608: break;
          case 112: 
            { return new Symbol(sym.THEN , yychar, yyline, yytext());
            } 
            // fall through
          case 609: break;
          case 113: 
            { return new Symbol(sym.THAN , yychar, yyline, yytext());
            } 
            // fall through
          case 610: break;
          case 114: 
            { return new Symbol(sym.CUBE , yychar, yyline, yytext());
            } 
            // fall through
          case 611: break;
          case 115: 
            { return new Symbol(sym.CALL , yychar, yyline, yytext());
            } 
            // fall through
          case 612: break;
          case 116: 
            { return new Symbol(sym.CASE , yychar, yyline, yytext());
            } 
            // fall through
          case 613: break;
          case 117: 
            { return new Symbol(sym.CAST , yychar, yyline, yytext());
            } 
            // fall through
          case 614: break;
          case 118: 
            { return new Symbol(sym.CHAR , yychar, yyline, yytext());
            } 
            // fall through
          case 615: break;
          case 119: 
            { return new Symbol(sym.INTO , yychar, yyline, yytext());
            } 
            // fall through
          case 616: break;
          case 120: 
            { return new Symbol(sym.DENY , yychar, yyline, yytext());
            } 
            // fall through
          case 617: break;
          case 121: 
            { return new Symbol(sym.DESC , yychar, yyline, yytext());
            } 
            // fall through
          case 618: break;
          case 122: 
            { return new Symbol(sym.DUMP , yychar, yyline, yytext());
            } 
            // fall through
          case 619: break;
          case 123: 
            { return new Symbol(sym.DATE , yychar, yyline, yytext());
            } 
            // fall through
          case 620: break;
          case 124: 
            { return new Symbol(sym.DATA , yychar, yyline, yytext());
            } 
            // fall through
          case 621: break;
          case 125: 
            { return new Symbol(sym.DBCC , yychar, yyline, yytext());
            } 
            // fall through
          case 622: break;
          case 126: 
            { return new Symbol(sym.DISK , yychar, yyline, yytext());
            } 
            // fall through
          case 623: break;
          case 127: 
            { return new Symbol(sym.DROP , yychar, yyline, yytext());
            } 
            // fall through
          case 624: break;
          case 128: 
            { return new Symbol(sym.FULL , yychar, yyline, yytext());
            } 
            // fall through
          case 625: break;
          case 129: 
            { return new Symbol(sym.FILE , yychar, yyline, yytext());
            } 
            // fall through
          case 626: break;
          case 130: 
            { return new Symbol(sym.FREE , yychar, yyline, yytext());
            } 
            // fall through
          case 627: break;
          case 131: 
            { return new Symbol(sym.FROM , yychar, yyline, yytext());
            } 
            // fall through
          case 628: break;
          case 132: 
            { return new Symbol(sym.REAL , yychar, yyline, yytext());
            } 
            // fall through
          case 629: break;
          case 133: 
            { return new Symbol(sym.READ , yychar, yyline, yytext());
            } 
            // fall through
          case 630: break;
          case 134: 
            { return new Symbol(sym.RULE , yychar, yyline, yytext());
            } 
            // fall through
          case 631: break;
          case 135: 
            { return new Symbol(sym.RANK , yychar, yyline, yytext());
            } 
            // fall through
          case 632: break;
          case 136: 
            { return new Symbol(sym.ROLE , yychar, yyline, yytext());
            } 
            // fall through
          case 633: break;
          case 137: 
            { return new Symbol(sym.ROWS , yychar, yyline, yytext());
            } 
            // fall through
          case 634: break;
          case 138: 
            { return new Symbol(sym.GOTO , yychar, yyline, yytext());
            } 
            // fall through
          case 635: break;
          case 139: 
            { return new Symbol(sym.YEAR , yychar, yyline, yytext());
            } 
            // fall through
          case 636: break;
          case 140: 
            { return new Symbol(sym.VIEW , yychar, yyline, yytext());
            } 
            // fall through
          case 637: break;
          case 141: 
            { return new Symbol(sym.HOUR , yychar, yyline, yytext());
            } 
            // fall through
          case 638: break;
          case 142: 
            { return new Symbol(sym.HOLD , yychar, yyline, yytext());
            } 
            // fall through
          case 639: break;
          case 143: 
            { return new Symbol(sym.HOST , yychar, yyline, yytext());
            } 
            // fall through
          case 640: break;
          case 144: 
            { return new Symbol(sym.ZONE , yychar, yyline, yytext());
            } 
            // fall through
          case 641: break;
          case 145: 
            { return new Symbol(sym.KILL , yychar, yyline, yytext());
            } 
            // fall through
          case 642: break;
          case 146: 
            { return new Symbol(sym.PLAN , yychar, yyline, yytext());
            } 
            // fall through
          case 643: break;
          case 147: 
            { return new Symbol(sym.PATH , yychar, yyline, yytext());
            } 
            // fall through
          case 644: break;
          case 148: 
            { return new Symbol(sym.PROC , yychar, yyline, yytext());
            } 
            // fall through
          case 645: break;
          case 149: 
            { return new Symbol(sym.WORK , yychar, yyline, yytext());
            } 
            // fall through
          case 646: break;
          case 150: 
            { return new Symbol(sym.WITH , yychar, yyline, yytext());
            } 
            // fall through
          case 647: break;
          case 151: 
            { return new Symbol(sym.WHEN , yychar, yyline, yytext());
            } 
            // fall through
          case 648: break;
          case 152: 
            { return new Symbol(sym.JOIN , yychar, yyline, yytext());
            } 
            // fall through
          case 649: break;
          case 153: 
            { return new Symbol(sym.EVERY , yychar, yyline, yytext());
            } 
            // fall through
          case 650: break;
          case 154: 
            { return new Symbol(sym.NAMES , yychar, yyline, yytext());
            } 
            // fall through
          case 651: break;
          case 155: 
            { return new Symbol(sym.NCHAR , yychar, yyline, yytext());
            } 
            // fall through
          case 652: break;
          case 156: 
            { return new Symbol(sym.UNION , yychar, yyline, yytext());
            } 
            // fall through
          case 653: break;
          case 157: 
            { return new Symbol(sym.UNDER , yychar, yyline, yytext());
            } 
            // fall through
          case 654: break;
          case 158: 
            { return new Symbol(sym.USAGE , yychar, yyline, yytext());
            } 
            // fall through
          case 655: break;
          case 159: 
            { return new Symbol(sym.USING , yychar, yyline, yytext());
            } 
            // fall through
          case 656: break;
          case 160: 
            { return new Symbol(sym.UPPER , yychar, yyline, yytext());
            } 
            // fall through
          case 657: break;
          case 161: 
            { return new Symbol(sym.LEVEL , yychar, yyline, yytext());
            } 
            // fall through
          case 658: break;
          case 162: 
            { return new Symbol(sym.LARGE , yychar, yyline, yytext());
            } 
            // fall through
          case 659: break;
          case 163: 
            { return new Symbol(sym.LOCAL , yychar, yyline, yytext());
            } 
            // fall through
          case 660: break;
          case 164: 
            { return new Symbol(sym.LOWER , yychar, yyline, yytext());
            } 
            // fall through
          case 661: break;
          case 165: 
            { return new Symbol(sym.LIMIT , yychar, yyline, yytext());
            } 
            // fall through
          case 662: break;
          case 166: 
            { return new Symbol(sym.ALTER , yychar, yyline, yytext());
            } 
            // fall through
          case 663: break;
          case 167: 
            { return new Symbol(sym.ALIAS , yychar, yyline, yytext());
            } 
            // fall through
          case 664: break;
          case 168: 
            { return new Symbol(sym.ADMIN , yychar, yyline, yytext());
            } 
            // fall through
          case 665: break;
          case 169: 
            { return new Symbol(sym.AFTER , yychar, yyline, yytext());
            } 
            // fall through
          case 666: break;
          case 170: 
            { return new Symbol(sym.ARRAY , yychar, yyline, yytext());
            } 
            // fall through
          case 667: break;
          case 171: 
            { return new Symbol(sym.BEGIN , yychar, yyline, yytext());
            } 
            // fall through
          case 668: break;
          case 172: 
            { return new Symbol(sym.BREAK , yychar, yyline, yytext());
            } 
            // fall through
          case 669: break;
          case 173: 
            { return new Symbol(sym.SLOPE , yychar, yyline, yytext());
            } 
            // fall through
          case 670: break;
          case 174: 
            { return new Symbol(sym.STATE , yychar, yyline, yytext());
            } 
            // fall through
          case 671: break;
          case 175: 
            { return new Symbol(sym.START , yychar, yyline, yytext());
            } 
            // fall through
          case 672: break;
          case 176: 
            { return new Symbol(sym.SCOPE , yychar, yyline, yytext());
            } 
            // fall through
          case 673: break;
          case 177: 
            { return new Symbol(sym.SPACE , yychar, yyline, yytext());
            } 
            // fall through
          case 674: break;
          case 178: 
            { return new Symbol(sym.SQLCA , yychar, yyline, yytext());
            } 
            // fall through
          case 675: break;
          case 179: 
            { return new Symbol(sym.OUTER , yychar, yyline, yytext());
            } 
            // fall through
          case 676: break;
          case 180: 
            { return new Symbol(sym.OCTET , yychar, yyline, yytext());
            } 
            // fall through
          case 677: break;
          case 181: 
            { return new Symbol(sym.ORDER , yychar, yyline, yytext());
            } 
            // fall through
          case 678: break;
          case 182: 
            { return new Symbol(sym.TABLE , yychar, yyline, yytext());
            } 
            // fall through
          case 679: break;
          case 183: 
            { return new Symbol(sym.TREAT , yychar, yyline, yytext());
            } 
            // fall through
          case 680: break;
          case 184: 
            { return new Symbol(sym.CLASS , yychar, yyline, yytext());
            } 
            // fall through
          case 681: break;
          case 185: 
            { return new Symbol(sym.CLOSE , yychar, yyline, yytext());
            } 
            // fall through
          case 682: break;
          case 186: 
            { return new Symbol(sym.COUNT , yychar, yyline, yytext());
            } 
            // fall through
          case 683: break;
          case 187: 
            { return new Symbol(sym.CROSS , yychar, yyline, yytext());
            } 
            // fall through
          case 684: break;
          case 188: 
            { return new Symbol(sym.CYCLE , yychar, yyline, yytext());
            } 
            // fall through
          case 685: break;
          case 189: 
            { return new Symbol(sym.CHECK , yychar, yyline, yytext());
            } 
            // fall through
          case 686: break;
          case 190: 
            { return new Symbol(sym.INNER , yychar, yyline, yytext());
            } 
            // fall through
          case 687: break;
          case 191: 
            { return new Symbol(sym.INOUT , yychar, yyline, yytext());
            } 
            // fall through
          case 688: break;
          case 192: 
            { return new Symbol(sym.INDEX , yychar, yyline, yytext());
            } 
            // fall through
          case 689: break;
          case 193: 
            { return new Symbol(sym.INPUT , yychar, yyline, yytext());
            } 
            // fall through
          case 690: break;
          case 194: 
            { return new Symbol(sym.DEREF , yychar, yyline, yytext());
            } 
            // fall through
          case 691: break;
          case 195: 
            { return new Symbol(sym.DEPTH , yychar, yyline, yytext());
            } 
            // fall through
          case 692: break;
          case 196: 
            { return new Symbol(sym.MERGE , yychar, yyline, yytext());
            } 
            // fall through
          case 693: break;
          case 197: 
            { return new Symbol(sym.MATCH , yychar, yyline, yytext());
            } 
            // fall through
          case 694: break;
          case 198: 
            { return new Symbol(sym.MONTH , yychar, yyline, yytext());
            } 
            // fall through
          case 695: break;
          case 199: 
            { return new Symbol(sym.FETCH , yychar, yyline, yytext());
            } 
            // fall through
          case 696: break;
          case 200: 
            { return new Symbol(sym.FLOAT , yychar, yyline, yytext());
            } 
            // fall through
          case 697: break;
          case 201: 
            { return new Symbol(sym.FALSE , yychar, yyline, yytext());
            } 
            // fall through
          case 698: break;
          case 202: 
            { return new Symbol(sym.FOUND , yychar, yyline, yytext());
            } 
            // fall through
          case 699: break;
          case 203: 
            { return new Symbol(sym.FIRST , yychar, yyline, yytext());
            } 
            // fall through
          case 700: break;
          case 204: 
            { return new Symbol(sym.FLOAT, yychar, yyline, yytext());
            } 
            // fall through
          case 701: break;
          case 205: 
            { return new Symbol(sym.READS , yychar, yyline, yytext());
            } 
            // fall through
          case 702: break;
          case 206: 
            { return new Symbol(sym.REGEX , yychar, yyline, yytext());
            } 
            // fall through
          case 703: break;
          case 207: 
            { return new Symbol(sym.RANGE , yychar, yyline, yytext());
            } 
            // fall through
          case 704: break;
          case 208: 
            { return new Symbol(sym.RIGHT , yychar, yyline, yytext());
            } 
            // fall through
          case 705: break;
          case 209: 
            { return new Symbol(sym.GRANT , yychar, yyline, yytext());
            } 
            // fall through
          case 706: break;
          case 210: 
            { return new Symbol(sym.GROUP , yychar, yyline, yytext());
            } 
            // fall through
          case 707: break;
          case 211: 
            { return new Symbol(sym.VALUE , yychar, yyline, yytext());
            } 
            // fall through
          case 708: break;
          case 212: 
            { return new Symbol(sym.XMLPI , yychar, yyline, yytext());
            } 
            // fall through
          case 709: break;
          case 213: 
            { return new Symbol(sym.PIVOT , yychar, yyline, yytext());
            } 
            // fall through
          case 710: break;
          case 214: 
            { return new Symbol(sym.PRINT , yychar, yyline, yytext());
            } 
            // fall through
          case 711: break;
          case 215: 
            { return new Symbol(sym.PRIOR , yychar, yyline, yytext());
            } 
            // fall through
          case 712: break;
          case 216: 
            { return new Symbol(sym.WIDTH , yychar, yyline, yytext());
            } 
            // fall through
          case 713: break;
          case 217: 
            { return new Symbol(sym.WRITE , yychar, yyline, yytext());
            } 
            // fall through
          case 714: break;
          case 218: 
            { return new Symbol(sym.WHERE , yychar, yyline, yytext());
            } 
            // fall through
          case 715: break;
          case 219: 
            { return new Symbol(sym.WHILE , yychar, yyline, yytext());
            } 
            // fall through
          case 716: break;
          case 220: 
            { return new Symbol(sym.ESCAPE , yychar, yyline, yytext());
            } 
            // fall through
          case 717: break;
          case 221: 
            { return new Symbol(sym.ERRLVL , yychar, yyline, yytext());
            } 
            // fall through
          case 718: break;
          case 222: 
            { return new Symbol(sym.EXCEPT , yychar, yyline, yytext());
            } 
            // fall through
          case 719: break;
          case 223: 
            { return new Symbol(sym.EXISTS , yychar, yyline, yytext());
            } 
            // fall through
          case 720: break;
          case 224: 
            { return new Symbol(sym.EQUALS , yychar, yyline, yytext());
            } 
            // fall through
          case 721: break;
          case 225: 
            { return new Symbol(sym.NULLIF , yychar, yyline, yytext());
            } 
            // fall through
          case 722: break;
          case 226: 
            { return new Symbol(sym.UNNEST , yychar, yyline, yytext());
            } 
            // fall through
          case 723: break;
          case 227: 
            { return new Symbol(sym.UNIQUE , yychar, yyline, yytext());
            } 
            // fall through
          case 724: break;
          case 228: 
            { return new Symbol(sym.UPDATE , yychar, yyline, yytext());
            } 
            // fall through
          case 725: break;
          case 229: 
            { return new Symbol(sym.LENGTH , yychar, yyline, yytext());
            } 
            // fall through
          case 726: break;
          case 230: 
            { return new Symbol(sym.LINENO , yychar, yyline, yytext());
            } 
            // fall through
          case 727: break;
          case 231: 
            { return new Symbol(sym.ATOMIC , yychar, yyline, yytext());
            } 
            // fall through
          case 728: break;
          case 232: 
            { return new Symbol(sym.ACTION , yychar, yyline, yytext());
            } 
            // fall through
          case 729: break;
          case 233: 
            { return new Symbol(sym.BEFORE , yychar, yyline, yytext());
            } 
            // fall through
          case 730: break;
          case 234: 
            { return new Symbol(sym.BUCKET , yychar, yyline, yytext());
            } 
            // fall through
          case 731: break;
          case 235: 
            { return new Symbol(sym.BACKUP , yychar, yyline, yytext());
            } 
            // fall through
          case 732: break;
          case 236: 
            { return new Symbol(sym.BINARY , yychar, yyline, yytext());
            } 
            // fall through
          case 733: break;
          case 237: 
            { return new Symbol(sym.BROWSE , yychar, yyline, yytext());
            } 
            // fall through
          case 734: break;
          case 238: 
            { return new Symbol(sym.SELECT , yychar, yyline, yytext());
            } 
            // fall through
          case 735: break;
          case 239: 
            { return new Symbol(sym.SEARCH , yychar, yyline, yytext());
            } 
            // fall through
          case 736: break;
          case 240: 
            { return new Symbol(sym.SECOND , yychar, yyline, yytext());
            } 
            // fall through
          case 737: break;
          case 241: 
            { return new Symbol(sym.STATIC , yychar, yyline, yytext());
            } 
            // fall through
          case 738: break;
          case 242: 
            { return new Symbol(sym.STDDEV , yychar, yyline, yytext());
            } 
            // fall through
          case 739: break;
          case 243: 
            { return new Symbol(sym.SCROLL , yychar, yyline, yytext());
            } 
            // fall through
          case 740: break;
          case 244: 
            { return new Symbol(sym.SCHEMA , yychar, yyline, yytext());
            } 
            // fall through
          case 741: break;
          case 245: 
            { return new Symbol(sym.SYSTEM , yychar, yyline, yytext());
            } 
            // fall through
          case 742: break;
          case 246: 
            { return new Symbol(sym.STRING, yychar, yyline, yytext());
            } 
            // fall through
          case 743: break;
          case 247: 
            { return new Symbol(sym.OUTPUT , yychar, yyline, yytext());
            } 
            // fall through
          case 744: break;
          case 248: 
            { return new Symbol(sym.OBJECT , yychar, yyline, yytext());
            } 
            // fall through
          case 745: break;
          case 249: 
            { return new Symbol(sym.OPTION , yychar, yyline, yytext());
            } 
            // fall through
          case 746: break;
          case 250: 
            { return new Symbol(sym.CURSOR , yychar, yyline, yytext());
            } 
            // fall through
          case 747: break;
          case 251: 
            { return new Symbol(sym.CALLED , yychar, yyline, yytext());
            } 
            // fall through
          case 748: break;
          case 252: 
            { return new Symbol(sym.COLUMN , yychar, yyline, yytext());
            } 
            // fall through
          case 749: break;
          case 253: 
            { return new Symbol(sym.COMMIT , yychar, yyline, yytext());
            } 
            // fall through
          case 750: break;
          case 254: 
            { return new Symbol(sym.CREATE , yychar, yyline, yytext());
            } 
            // fall through
          case 751: break;
          case 255: 
            { return new Symbol(sym.INSERT , yychar, yyline, yytext());
            } 
            // fall through
          case 752: break;
          case 256: 
            { return new Symbol(sym.IGNORE , yychar, yyline, yytext());
            } 
            // fall through
          case 753: break;
          case 257: 
            { return new Symbol(sym.DELETE , yychar, yyline, yytext());
            } 
            // fall through
          case 754: break;
          case 258: 
            { return new Symbol(sym.INT, yychar, yyline, yytext());
            } 
            // fall through
          case 755: break;
          case 259: 
            { return new Symbol(sym.DOUBLE , yychar, yyline, yytext());
            } 
            // fall through
          case 756: break;
          case 260: 
            { return new Symbol(sym.DOMAIN , yychar, yyline, yytext());
            } 
            // fall through
          case 757: break;
          case 261: 
            { return new Symbol(sym.METHOD , yychar, yyline, yytext());
            } 
            // fall through
          case 758: break;
          case 262: 
            { return new Symbol(sym.MEMBER , yychar, yyline, yytext());
            } 
            // fall through
          case 759: break;
          case 263: 
            { return new Symbol(sym.MODULE , yychar, yyline, yytext());
            } 
            // fall through
          case 760: break;
          case 264: 
            { return new Symbol(sym.MODIFY , yychar, yyline, yytext());
            } 
            // fall through
          case 761: break;
          case 265: 
            { return new Symbol(sym.MINUTE , yychar, yyline, yytext());
            } 
            // fall through
          case 762: break;
          case 266: 
            { return new Symbol(sym.FUSION , yychar, yyline, yytext());
            } 
            // fall through
          case 763: break;
          case 267: 
            { return new Symbol(sym.FILTER , yychar, yyline, yytext());
            } 
            // fall through
          case 764: break;
          case 268: 
            { return new Symbol(sym.RESULT , yychar, yyline, yytext());
            } 
            // fall through
          case 765: break;
          case 269: 
            { return new Symbol(sym.RETURN , yychar, yyline, yytext());
            } 
            // fall through
          case 766: break;
          case 270: 
            { return new Symbol(sym.REVERT , yychar, yyline, yytext());
            } 
            // fall through
          case 767: break;
          case 271: 
            { return new Symbol(sym.REVOKE , yychar, yyline, yytext());
            } 
            // fall through
          case 768: break;
          case 272: 
            { return new Symbol(sym.ROLLUP , yychar, yyline, yytext());
            } 
            // fall through
          case 769: break;
          case 273: 
            { return new Symbol(sym.GLOBAL , yychar, yyline, yytext());
            } 
            // fall through
          case 770: break;
          case 274: 
            { return new Symbol(sym.VALUES , yychar, yyline, yytext());
            } 
            // fall through
          case 771: break;
          case 275: 
            { return new Symbol(sym.HAVING , yychar, yyline, yytext());
            } 
            // fall through
          case 772: break;
          case 276: 
            { return new Symbol(sym.XMLAGG , yychar, yyline, yytext());
            } 
            // fall through
          case 773: break;
          case 277: 
            { return new Symbol(sym.PUBLIC , yychar, yyline, yytext());
            } 
            // fall through
          case 774: break;
          case 278: 
            { return new Symbol(sym.PASCAL , yychar, yyline, yytext());
            } 
            // fall through
          case 775: break;
          case 279: 
            { return new Symbol(sym.PREFIX , yychar, yyline, yytext());
            } 
            // fall through
          case 776: break;
          case 280: 
            { return new Symbol(sym.WINDOW , yychar, yyline, yytext());
            } 
            // fall through
          case 777: break;
          case 281: 
            { return new Symbol(sym.WITHIN , yychar, yyline, yytext());
            } 
            // fall through
          case 778: break;
          case 282: 
            { return new Symbol(sym.ELEMENT , yychar, yyline, yytext());
            } 
            // fall through
          case 779: break;
          case 283: 
            { return new Symbol(sym.EXECUTE , yychar, yyline, yytext());
            } 
            // fall through
          case 780: break;
          case 284: 
            { return new Symbol(sym.EXTRACT , yychar, yyline, yytext());
            } 
            // fall through
          case 781: break;
          case 285: 
            { return new Symbol(sym.NUMERIC , yychar, yyline, yytext());
            } 
            // fall through
          case 782: break;
          case 286: 
            { return new Symbol(sym.NATURAL , yychar, yyline, yytext());
            } 
            // fall through
          case 783: break;
          case 287: 
            { return new Symbol(sym.NOCHECK , yychar, yyline, yytext());
            } 
            // fall through
          case 784: break;
          case 288: 
            { return new Symbol(sym.UESCAPE , yychar, yyline, yytext());
            } 
            // fall through
          case 785: break;
          case 289: 
            { return new Symbol(sym.UNKNOWN , yychar, yyline, yytext());
            } 
            // fall through
          case 786: break;
          case 290: 
            { return new Symbol(sym.UNPIVOT , yychar, yyline, yytext());
            } 
            // fall through
          case 787: break;
          case 291: 
            { return new Symbol(sym.LEADING , yychar, yyline, yytext());
            } 
            // fall through
          case 788: break;
          case 292: 
            { return new Symbol(sym.LATERAL , yychar, yyline, yytext());
            } 
            // fall through
          case 789: break;
          case 293: 
            { return new Symbol(sym.LOCATOR , yychar, yyline, yytext());
            } 
            // fall through
          case 790: break;
          case 294: 
            { /*Ignore*/
            } 
            // fall through
          case 791: break;
          case 295: 
            { return new Symbol(sym.integer , yychar, yyline, yytext());
            } 
            // fall through
          case 792: break;
          case 296: 
            { return new Symbol(sym.BETWEEN , yychar, yyline, yytext());
            } 
            // fall through
          case 793: break;
          case 297: 
            { return new Symbol(sym.BOOLEAN , yychar, yyline, yytext());
            } 
            // fall through
          case 794: break;
          case 298: 
            { return new Symbol(sym.SESSION , yychar, yyline, yytext());
            } 
            // fall through
          case 795: break;
          case 299: 
            { return new Symbol(sym.SETUSER , yychar, yyline, yytext());
            } 
            // fall through
          case 796: break;
          case 300: 
            { return new Symbol(sym.SECTION , yychar, yyline, yytext());
            } 
            // fall through
          case 797: break;
          case 301: 
            { return new Symbol(sym.OPERADORES, yychar, yyline, yytext());
            } 
            // fall through
          case 798: break;
          case 302: 
            { return new Symbol(sym.SIMILAR , yychar, yyline, yytext());
            } 
            // fall through
          case 799: break;
          case 303: 
            { return new Symbol(sym.SQLCODE , yychar, yyline, yytext());
            } 
            // fall through
          case 800: break;
          case 304: 
            { return new Symbol(sym.OFFSETS , yychar, yyline, yytext());
            } 
            // fall through
          case 801: break;
          case 305: 
            { return new Symbol(sym.OVERLAY , yychar, yyline, yytext());
            } 
            // fall through
          case 802: break;
          case 306: 
            { return new Symbol(sym.OPENXML , yychar, yyline, yytext());
            } 
            // fall through
          case 803: break;
          case 307: 
            { return new Symbol(sym.TSEQUAL , yychar, yyline, yytext());
            } 
            // fall through
          case 804: break;
          case 308: 
            { return new Symbol(sym.TRIGGER , yychar, yyline, yytext());
            } 
            // fall through
          case 805: break;
          case 309: 
            { return new Symbol(sym.CURRENT , yychar, yyline, yytext());
            } 
            // fall through
          case 806: break;
          case 310: 
            { return new Symbol(sym.CASCADE , yychar, yyline, yytext());
            } 
            // fall through
          case 807: break;
          case 311: 
            { return new Symbol(sym.CATALOG , yychar, yyline, yytext());
            } 
            // fall through
          case 808: break;
          case 312: 
            { return new Symbol(sym.CONNECT , yychar, yyline, yytext());
            } 
            // fall through
          case 809: break;
          case 313: 
            { return new Symbol(sym.CONVERT , yychar, yyline, yytext());
            } 
            // fall through
          case 810: break;
          case 314: 
            { return new Symbol(sym.COLLECT , yychar, yyline, yytext());
            } 
            // fall through
          case 811: break;
          case 315: 
            { return new Symbol(sym.COLLATE , yychar, yyline, yytext());
            } 
            // fall through
          case 812: break;
          case 316: 
            { return new Symbol(sym.COMPUTE , yychar, yyline, yytext());
            } 
            // fall through
          case 813: break;
          case 317: 
            { return new Symbol(sym.INTEGER , yychar, yyline, yytext());
            } 
            // fall through
          case 814: break;
          case 318: 
            { return new Symbol(sym.INCLUDE , yychar, yyline, yytext());
            } 
            // fall through
          case 815: break;
          case 319: 
            { return new Symbol(sym.ITERATE , yychar, yyline, yytext());
            } 
            // fall through
          case 816: break;
          case 320: 
            { return new Symbol(sym.DESTROY , yychar, yyline, yytext());
            } 
            // fall through
          case 817: break;
          case 321: 
            { return new Symbol(sym.DECLARE , yychar, yyline, yytext());
            } 
            // fall through
          case 818: break;
          case 322: 
            { return new Symbol(sym.DECIMAL , yychar, yyline, yytext());
            } 
            // fall through
          case 819: break;
          case 323: 
            { return new Symbol(sym.DEFAULT , yychar, yyline, yytext());
            } 
            // fall through
          case 820: break;
          case 324: 
            { return new Symbol(sym.DYNAMIC , yychar, yyline, yytext());
            } 
            // fall through
          case 821: break;
          case 325: 
            { return new Symbol(sym.FOREIGN , yychar, yyline, yytext());
            } 
            // fall through
          case 822: break;
          case 326: 
            { return new Symbol(sym.FORTRAN , yychar, yyline, yytext());
            } 
            // fall through
          case 823: break;
          case 327: 
            { return new Symbol(sym.RELEASE , yychar, yyline, yytext());
            } 
            // fall through
          case 824: break;
          case 328: 
            { return new Symbol(sym.RESTORE , yychar, yyline, yytext());
            } 
            // fall through
          case 825: break;
          case 329: 
            { return new Symbol(sym.RETURNS , yychar, yyline, yytext());
            } 
            // fall through
          case 826: break;
          case 330: 
            { return new Symbol(sym.ROUTINE , yychar, yyline, yytext());
            } 
            // fall through
          case 827: break;
          case 331: 
            { return new Symbol(sym.GENERAL , yychar, yyline, yytext());
            } 
            // fall through
          case 828: break;
          case 332: 
            { return new Symbol(sym.VARCHAR , yychar, yyline, yytext());
            } 
            // fall through
          case 829: break;
          case 333: 
            { return new Symbol(sym.VARYING , yychar, yyline, yytext());
            } 
            // fall through
          case 830: break;
          case 334: 
            { return new Symbol(sym.XMLTEXT , yychar, yyline, yytext());
            } 
            // fall through
          case 831: break;
          case 335: 
            { return new Symbol(sym.XMLCAST , yychar, yyline, yytext());
            } 
            // fall through
          case 832: break;
          case 336: 
            { return new Symbol(sym.PERCENT , yychar, yyline, yytext());
            } 
            // fall through
          case 833: break;
          case 337: 
            { return new Symbol(sym.PARTIAL , yychar, yyline, yytext());
            } 
            // fall through
          case 834: break;
          case 338: 
            { return new Symbol(sym.POSTFIX , yychar, yyline, yytext());
            } 
            // fall through
          case 835: break;
          case 339: 
            { return new Symbol(sym.PREPARE , yychar, yyline, yytext());
            } 
            // fall through
          case 836: break;
          case 340: 
            { return new Symbol(sym.PRIMARY , yychar, yyline, yytext());
            } 
            // fall through
          case 837: break;
          case 341: 
            { return new Symbol(sym.WAITFOR , yychar, yyline, yytext());
            } 
            // fall through
          case 838: break;
          case 342: 
            { return new Symbol(sym.WITHOUT , yychar, yyline, yytext());
            } 
            // fall through
          case 839: break;
          case 343: 
            { return new Symbol(sym.varchar , yychar, yyline, yytext());
            } 
            // fall through
          case 840: break;
          case 344: 
            { return new Symbol(sym.EXTERNAL , yychar, yyline, yytext());
            } 
            // fall through
          case 841: break;
          case 345: 
            { return new Symbol(sym.NATIONAL , yychar, yyline, yytext());
            } 
            // fall through
          case 842: break;
          case 346: 
            { return new Symbol(sym.LANGUAGE , yychar, yyline, yytext());
            } 
            // fall through
          case 843: break;
          case 347: 
            { return new Symbol(sym.identity , yychar, yyline, yytext());
            } 
            // fall through
          case 844: break;
          case 348: 
            { return new Symbol(sym.ALLOCATE , yychar, yyline, yytext());
            } 
            // fall through
          case 845: break;
          case 349: 
            { return new Symbol(sym.ABSOLUTE , yychar, yyline, yytext());
            } 
            // fall through
          case 846: break;
          case 350: 
            { return new Symbol(sym.SEQUENCE , yychar, yyline, yytext());
            } 
            // fall through
          case 847: break;
          case 351: 
            { return new Symbol(sym.SMALLINT , yychar, yyline, yytext());
            } 
            // fall through
          case 848: break;
          case 352: 
            { return new Symbol(sym.SHUTDOWN , yychar, yyline, yytext());
            } 
            // fall through
          case 849: break;
          case 353: 
            { return new Symbol(sym.SPECIFIC , yychar, yyline, yytext());
            } 
            // fall through
          case 850: break;
          case 354: 
            { return new Symbol(sym.SQLERROR , yychar, yyline, yytext());
            } 
            // fall through
          case 851: break;
          case 355: 
            { return new Symbol(sym.SQLSTATE , yychar, yyline, yytext());
            } 
            // fall through
          case 852: break;
          case 356: 
            { return new Symbol(sym.OVERLAPS , yychar, yyline, yytext());
            } 
            // fall through
          case 853: break;
          case 357: 
            { return new Symbol(sym.TEXTSIZE , yychar, yyline, yytext());
            } 
            // fall through
          case 854: break;
          case 358: 
            { return new Symbol(sym.TIMEZONE , yychar, yyline, yytext());
            } 
            // fall through
          case 855: break;
          case 359: 
            { return new Symbol(sym.TRUNCATE , yychar, yyline, yytext());
            } 
            // fall through
          case 856: break;
          case 360: 
            { return new Symbol(sym.TRAILING , yychar, yyline, yytext());
            } 
            // fall through
          case 857: break;
          case 361: 
            { return new Symbol(sym.CASCADED , yychar, yyline, yytext());
            } 
            // fall through
          case 858: break;
          case 362: 
            { return new Symbol(sym.CONTAINS , yychar, yyline, yytext());
            } 
            // fall through
          case 859: break;
          case 363: 
            { return new Symbol(sym.CONTINUE , yychar, yyline, yytext());
            } 
            // fall through
          case 860: break;
          case 364: 
            { return new Symbol(sym.COALESCE , yychar, yyline, yytext());
            } 
            // fall through
          case 861: break;
          case 365: 
            { return new Symbol(sym.INTERVAL , yychar, yyline, yytext());
            } 
            // fall through
          case 862: break;
          case 366: 
            { return new Symbol(sym.IDENTITY , yychar, yyline, yytext());
            } 
            // fall through
          case 863: break;
          case 367: 
            { return new Symbol(sym.DESCRIBE , yychar, yyline, yytext());
            } 
            // fall through
          case 864: break;
          case 368: 
            { return new Symbol(sym.DEFERRED , yychar, yyline, yytext());
            } 
            // fall through
          case 865: break;
          case 369: 
            { return new Symbol(sym.DATABASE , yychar, yyline, yytext());
            } 
            // fall through
          case 866: break;
          case 370: 
            { return new Symbol(sym.DISTINCT , yychar, yyline, yytext());
            } 
            // fall through
          case 867: break;
          case 371: 
            { return new Symbol(sym.MULTISET , yychar, yyline, yytext());
            } 
            // fall through
          case 868: break;
          case 372: 
            { return new Symbol(sym.MODIFIES , yychar, yyline, yytext());
            } 
            // fall through
          case 869: break;
          case 373: 
            { return new Symbol(sym.FUNCTION , yychar, yyline, yytext());
            } 
            // fall through
          case 870: break;
          case 374: 
            { return new Symbol(sym.FREETEXT , yychar, yyline, yytext());
            } 
            // fall through
          case 871: break;
          case 375: 
            { return new Symbol(sym.RELATIVE , yychar, yyline, yytext());
            } 
            // fall through
          case 872: break;
          case 376: 
            { return new Symbol(sym.READTEXT , yychar, yyline, yytext());
            } 
            // fall through
          case 873: break;
          case 377: 
            { return new Symbol(sym.RESTRICT , yychar, yyline, yytext());
            } 
            // fall through
          case 874: break;
          case 378: 
            { return new Symbol(sym.ROLLBACK , yychar, yyline, yytext());
            } 
            // fall through
          case 875: break;
          case 379: 
            { return new Symbol(sym.ROWCOUNT , yychar, yyline, yytext());
            } 
            // fall through
          case 876: break;
          case 380: 
            { return new Symbol(sym.GROUPING , yychar, yyline, yytext());
            } 
            // fall through
          case 877: break;
          case 381: 
            { return new Symbol(sym.VARIABLE , yychar, yyline, yytext());
            } 
            // fall through
          case 878: break;
          case 382: 
            { return new Symbol(sym.HOLDLOCK , yychar, yyline, yytext());
            } 
            // fall through
          case 879: break;
          case 383: 
            { return new Symbol(sym.XMLTABLE , yychar, yyline, yytext());
            } 
            // fall through
          case 880: break;
          case 384: 
            { return new Symbol(sym.XMLPARSE , yychar, yyline, yytext());
            } 
            // fall through
          case 881: break;
          case 385: 
            { return new Symbol(sym.XMLQUERY , yychar, yyline, yytext());
            } 
            // fall through
          case 882: break;
          case 386: 
            { return new Symbol(sym.POSITION , yychar, yyline, yytext());
            } 
            // fall through
          case 883: break;
          case 387: 
            { return new Symbol(sym.PRESERVE , yychar, yyline, yytext());
            } 
            // fall through
          case 884: break;
          case 388: 
            { return new Symbol(sym.PREORDER , yychar, yyline, yytext());
            } 
            // fall through
          case 885: break;
          case 389: 
            { return new Symbol(sym.WHENEVER , yychar, yyline, yytext());
            } 
            // fall through
          case 886: break;
          case 390: 
            { return new Symbol(sym.EXCEPTION , yychar, yyline, yytext());
            } 
            // fall through
          case 887: break;
          case 391: 
            { return new Symbol(sym.NORMALIZE , yychar, yyline, yytext());
            } 
            // fall through
          case 888: break;
          case 392: 
            { return new Symbol(sym.LOCALTIME , yychar, yyline, yytext());
            } 
            // fall through
          case 889: break;
          case 393: 
            { return new Symbol(sym.ASSERTION , yychar, yyline, yytext());
            } 
            // fall through
          case 890: break;
          case 394: 
            { return new Symbol(sym.AGGREGATE , yychar, yyline, yytext());
            } 
            // fall through
          case 891: break;
          case 395: 
            { return new Symbol(sym.SENSITIVE , yychar, yyline, yytext());
            } 
            // fall through
          case 892: break;
          case 396: 
            { return new Symbol(sym.SUBSTRING , yychar, yyline, yytext());
            } 
            // fall through
          case 893: break;
          case 397: 
            { return new Symbol(sym.SAVEPOINT , yychar, yyline, yytext());
            } 
            // fall through
          case 894: break;
          case 398: 
            { return new Symbol(sym.STATEMENT , yychar, yyline, yytext());
            } 
            // fall through
          case 895: break;
          case 399: 
            { return new Symbol(sym.STRUCTURE , yychar, yyline, yytext());
            } 
            // fall through
          case 896: break;
          case 400: 
            { return new Symbol(sym.SYMMETRIC , yychar, yyline, yytext());
            } 
            // fall through
          case 897: break;
          case 401: 
            { return new Symbol(sym.OPENQUERY , yychar, yyline, yytext());
            } 
            // fall through
          case 898: break;
          case 402: 
            { return new Symbol(sym.OPERATION , yychar, yyline, yytext());
            } 
            // fall through
          case 899: break;
          case 403: 
            { return new Symbol(sym.TEMPORARY , yychar, yyline, yytext());
            } 
            // fall through
          case 900: break;
          case 404: 
            { return new Symbol(sym.TERMINATE , yychar, yyline, yytext());
            } 
            // fall through
          case 901: break;
          case 405: 
            { return new Symbol(sym.TIMESTAMP , yychar, yyline, yytext());
            } 
            // fall through
          case 902: break;
          case 406: 
            { return new Symbol(sym.TRANSLATE , yychar, yyline, yytext());
            } 
            // fall through
          case 903: break;
          case 407: 
            { return new Symbol(sym.TRANSFORM , yychar, yyline, yytext());
            } 
            // fall through
          case 904: break;
          case 408: 
            { return new Symbol(sym.CLUSTERED , yychar, yyline, yytext());
            } 
            // fall through
          case 905: break;
          case 409: 
            { return new Symbol(sym.CONDITION , yychar, yyline, yytext());
            } 
            // fall through
          case 906: break;
          case 410: 
            { return new Symbol(sym.COLLATION , yychar, yyline, yytext());
            } 
            // fall through
          case 907: break;
          case 411: 
            { return new Symbol(sym.CHARACTER , yychar, yyline, yytext());
            } 
            // fall through
          case 908: break;
          case 412: 
            { return new Symbol(sym.INTERSECT , yychar, yyline, yytext());
            } 
            // fall through
          case 909: break;
          case 413: 
            { return new Symbol(sym.INTERCEPT , yychar, yyline, yytext());
            } 
            // fall through
          case 910: break;
          case 414: 
            { return new Symbol(sym.INITIALLY , yychar, yyline, yytext());
            } 
            // fall through
          case 911: break;
          case 415: 
            { return new Symbol(sym.INDICATOR , yychar, yyline, yytext());
            } 
            // fall through
          case 912: break;
          case 416: 
            { return new Symbol(sym.ISOLATION , yychar, yyline, yytext());
            } 
            // fall through
          case 913: break;
          case 417: 
            { return new Symbol(sym.IMMEDIATE , yychar, yyline, yytext());
            } 
            // fall through
          case 914: break;
          case 418: 
            { return new Symbol(sym.RECURSIVE , yychar, yyline, yytext());
            } 
            // fall through
          case 915: break;
          case 419: 
            { return new Symbol(sym.RAISERROR , yychar, yyline, yytext());
            } 
            // fall through
          case 916: break;
          case 420: 
            { return new Symbol(sym.XMLEXISTS , yychar, yyline, yytext());
            } 
            // fall through
          case 917: break;
          case 421: 
            { return new Symbol(sym.XMLBINARY , yychar, yyline, yytext());
            } 
            // fall through
          case 918: break;
          case 422: 
            { return new Symbol(sym.XMLCONCAT , yychar, yyline, yytext());
            } 
            // fall through
          case 919: break;
          case 423: 
            { return new Symbol(sym.XMLFOREST , yychar, yyline, yytext());
            } 
            // fall through
          case 920: break;
          case 424: 
            { return new Symbol(sym.PARAMETER , yychar, yyline, yytext());
            } 
            // fall through
          case 921: break;
          case 425: 
            { return new Symbol(sym.PARTITION , yychar, yyline, yytext());
            } 
            // fall through
          case 922: break;
          case 426: 
            { return new Symbol(sym.PRECISION , yychar, yyline, yytext());
            } 
            // fall through
          case 923: break;
          case 427: 
            { return new Symbol(sym.PROCEDURE , yychar, yyline, yytext());
            } 
            // fall through
          case 924: break;
          case 428: 
            { return new Symbol(sym.WRITETEXT , yychar, yyline, yytext());
            } 
            // fall through
          case 925: break;
          case 429: 
            { return new Symbol(sym.UPDATETEXT , yychar, yyline, yytext());
            } 
            // fall through
          case 926: break;
          case 430: 
            { return new Symbol(sym.ASENSITIVE , yychar, yyline, yytext());
            } 
            // fall through
          case 927: break;
          case 431: 
            { return new Symbol(sym.ASYMMETRIC , yychar, yyline, yytext());
            } 
            // fall through
          case 928: break;
          case 432: 
            { return new Symbol(sym.STATISTICS , yychar, yyline, yytext());
            } 
            // fall through
          case 929: break;
          case 433: 
            { return new Symbol(sym.SQLWARNING , yychar, yyline, yytext());
            } 
            // fall through
          case 930: break;
          case 434: 
            { return new Symbol(sym.ORDINALITY , yychar, yyline, yytext());
            } 
            // fall through
          case 931: break;
          case 435: 
            { return new Symbol(sym.OPENROWSET , yychar, yyline, yytext());
            } 
            // fall through
          case 932: break;
          case 436: 
            { return new Symbol(sym.CONNECTION , yychar, yyline, yytext());
            } 
            // fall through
          case 933: break;
          case 437: 
            { return new Symbol(sym.CONSTRAINT , yychar, yyline, yytext());
            } 
            // fall through
          case 934: break;
          case 438: 
            { return new Symbol(sym.COMPLETION , yychar, yyline, yytext());
            } 
            // fall through
          case 935: break;
          case 439: 
            { return new Symbol(sym.CHECKPOINT , yychar, yyline, yytext());
            } 
            // fall through
          case 936: break;
          case 440: 
            { return new Symbol(sym.INITIALIZE , yychar, yyline, yytext());
            } 
            // fall through
          case 937: break;
          case 441: 
            { return new Symbol(sym.DEALLOCATE , yychar, yyline, yytext());
            } 
            // fall through
          case 938: break;
          case 442: 
            { return new Symbol(sym.DESTRUCTOR , yychar, yyline, yytext());
            } 
            // fall through
          case 939: break;
          case 443: 
            { return new Symbol(sym.DESCRIPTOR , yychar, yyline, yytext());
            } 
            // fall through
          case 940: break;
          case 444: 
            { return new Symbol(sym.DEFERRABLE , yychar, yyline, yytext());
            } 
            // fall through
          case 941: break;
          case 445: 
            { return new Symbol(sym.DISCONNECT , yychar, yyline, yytext());
            } 
            // fall through
          case 942: break;
          case 446: 
            { return new Symbol(sym.DICTIONARY , yychar, yyline, yytext());
            } 
            // fall through
          case 943: break;
          case 447: 
            { return new Symbol(sym.FILLFACTOR , yychar, yyline, yytext());
            } 
            // fall through
          case 944: break;
          case 448: 
            { return new Symbol(sym.REFERENCES , yychar, yyline, yytext());
            } 
            // fall through
          case 945: break;
          case 449: 
            { return new Symbol(sym.ROWGUIDCOL , yychar, yyline, yytext());
            } 
            // fall through
          case 946: break;
          case 450: 
            { return new Symbol(sym.XMLELEMENT , yychar, yyline, yytext());
            } 
            // fall through
          case 947: break;
          case 451: 
            { return new Symbol(sym.XMLCOMMENT , yychar, yyline, yytext());
            } 
            // fall through
          case 948: break;
          case 452: 
            { return new Symbol(sym.XMLITERATE , yychar, yyline, yytext());
            } 
            // fall through
          case 949: break;
          case 453: 
            { return new Symbol(sym.PERCENTILE , yychar, yyline, yytext());
            } 
            // fall through
          case 950: break;
          case 454: 
            { return new Symbol(sym.PARAMETERS , yychar, yyline, yytext());
            } 
            // fall through
          case 951: break;
          case 455: 
            { return new Symbol(sym.PRIVILEGES , yychar, yyline, yytext());
            } 
            // fall through
          case 952: break;
          case 456: 
            { return new Symbol(sym.SUBMULTISET , yychar, yyline, yytext());
            } 
            // fall through
          case 953: break;
          case 457: 
            { return new Symbol(sym.STRINGERROR, yychar, yyline, yytext());
            } 
            // fall through
          case 954: break;
          case 458: 
            { return new Symbol(sym.OCCURRENCES , yychar, yyline, yytext());
            } 
            // fall through
          case 955: break;
          case 459: 
            { return new Symbol(sym.TABLESAMPLE , yychar, yyline, yytext());
            } 
            // fall through
          case 956: break;
          case 460: 
            { return new Symbol(sym.TRANSLATION , yychar, yyline, yytext());
            } 
            // fall through
          case 957: break;
          case 461: 
            { return new Symbol(sym.TRANSACTION , yychar, yyline, yytext());
            } 
            // fall through
          case 958: break;
          case 462: 
            { return new Symbol(sym.CARDINALITY , yychar, yyline, yytext());
            } 
            // fall through
          case 959: break;
          case 463: 
            { return new Symbol(sym.CONSTRUCTOR , yychar, yyline, yytext());
            } 
            // fall through
          case 960: break;
          case 464: 
            { return new Symbol(sym.CONSTRAINTS , yychar, yyline, yytext());
            } 
            // fall through
          case 961: break;
          case 465: 
            { return new Symbol(sym.INSENSITIVE , yychar, yyline, yytext());
            } 
            // fall through
          case 962: break;
          case 466: 
            { return new Symbol(sym.IDENTITYCOL , yychar, yyline, yytext());
            } 
            // fall through
          case 963: break;
          case 467: 
            { return new Symbol(sym.DIAGNOSTICS , yychar, yyline, yytext());
            } 
            // fall through
          case 964: break;
          case 468: 
            { return new Symbol(sym.DISTRIBUTED , yychar, yyline, yytext());
            } 
            // fall through
          case 965: break;
          case 469: 
            { return new Symbol(sym.FLOATERROR, yychar, yyline, yytext());
            } 
            // fall through
          case 966: break;
          case 470: 
            { return new Symbol(sym.RECONFIGURE , yychar, yyline, yytext());
            } 
            // fall through
          case 967: break;
          case 471: 
            { return new Symbol(sym.REFERENCING , yychar, yyline, yytext());
            } 
            // fall through
          case 968: break;
          case 472: 
            { return new Symbol(sym.REPLICATION , yychar, yyline, yytext());
            } 
            // fall through
          case 969: break;
          case 473: 
            { return new Symbol(sym.XMLDOCUMENT , yychar, yyline, yytext());
            } 
            // fall through
          case 970: break;
          case 474: 
            { return new Symbol(sym.XMLVALIDATE , yychar, yyline, yytext());
            } 
            // fall through
          case 971: break;
          case 475: 
            { return new Symbol(sym.NONCLUSTERED , yychar, yyline, yytext());
            } 
            // fall through
          case 972: break;
          case 476: 
            { return new Symbol(sym.SPECIFICTYPE , yychar, yyline, yytext());
            } 
            // fall through
          case 973: break;
          case 477: 
            { return new Symbol(sym.SQLEXCEPTION , yychar, yyline, yytext());
            } 
            // fall through
          case 974: break;
          case 478: 
            { return new Symbol(sym.INTERSECTION , yychar, yyline, yytext());
            } 
            // fall through
          case 975: break;
          case 479: 
            { return new Symbol(sym.XMLSERIALIZE , yychar, yyline, yytext());
            } 
            // fall through
          case 976: break;
          case 480: 
            { return new Symbol(sym.AUTHORIZATION , yychar, yyline, yytext());
            } 
            // fall through
          case 977: break;
          case 481: 
            { return new Symbol(sym.SECURITYAUDIT , yychar, yyline, yytext());
            } 
            // fall through
          case 978: break;
          case 482: 
            { return new Symbol(sym.CONTAINSTABLE , yychar, yyline, yytext());
            } 
            // fall through
          case 979: break;
          case 483: 
            { return new Symbol(sym.CORRESPONDING , yychar, yyline, yytext());
            } 
            // fall through
          case 980: break;
          case 484: 
            { return new Symbol(sym.IDENTIFICADORES, yychar, yyline, yytext());
            } 
            // fall through
          case 981: break;
          case 485: 
            { return new Symbol(sym.DETERMINISTIC , yychar, yyline, yytext());
            } 
            // fall through
          case 982: break;
          case 486: 
            { return new Symbol(sym.FULLTEXTTABLE , yychar, yyline, yytext());
            } 
            // fall through
          case 983: break;
          case 487: 
            { return new Symbol(sym.FREETEXTTABLE , yychar, yyline, yytext());
            } 
            // fall through
          case 984: break;
          case 488: 
            { return new Symbol(sym.XMLNAMESPACES , yychar, yyline, yytext());
            } 
            // fall through
          case 985: break;
          case 489: 
            { return new Symbol(sym.XMLATTRIBUTES , yychar, yyline, yytext());
            } 
            // fall through
          case 986: break;
          case 490: 
            { return new Symbol(sym.LOCALTIMESTAMP , yychar, yyline, yytext());
            } 
            // fall through
          case 987: break;
          case 491: 
            { return new Symbol(sym.OPENDATASOURCE , yychar, yyline, yytext());
            } 
            // fall through
          case 988: break;
          case 492: 
            { return new Symbol(sym.COMMENT, yychar, yyline, yytext());
            } 
            // fall through
          case 989: break;
          case 493: 
            { /*ignore*/
            } 
            // fall through
          case 990: break;
          case 494: 
            { return new Symbol(sym.SEMANTICKEYPHRASETABLE , yychar, yyline, yytext());
            } 
            // fall through
          case 991: break;
          case 495: 
            { return new Symbol(sym.SEMANTICSIMILARITYTABLE , yychar, yyline, yytext());
            } 
            // fall through
          case 992: break;
          case 496: 
            { return new Symbol(sym.ERRORCOMMENT, yychar, yyline, yytext());
            } 
            // fall through
          case 993: break;
          case 497: 
            { return new Symbol(sym.SEMANTICSIMILARITYDETAILSTABLE , yychar, yyline, yytext());
            } 
            // fall through
          case 994: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
