/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lexCode;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Reader;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 *
 * @author Bryan
 */
public class FrmMain extends javax.swing.JFrame {

    /**
     * Creates new form FrmMain
     */
    public FrmMain() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaOutput = new javax.swing.JTextArea();
        btnAnalizar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtAreaOutput.setColumns(20);
        txtAreaOutput.setRows(5);
        jScrollPane1.setViewportView(txtAreaOutput);

        btnAnalizar.setText("Analizar");
        btnAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 526, Short.MAX_VALUE)
                    .addComponent(btnAnalizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(btnAnalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarActionPerformed
        // TODO add your handling code here:
        File archive = new File("Archivo.out");
        JFileChooser jf = new JFileChooser();
        String path = "";
        ArrayList<String> Statements = new ArrayList<String>();
        try{
           FileWriter fw = new FileWriter(archive); 
           BufferedWriter bw = new BufferedWriter(fw);
        
          
        if (jf.showOpenDialog(null) == JFileChooser.APPROVE_OPTION){
            
            path = jf.getSelectedFile().getAbsolutePath();
        }
        
        try {
            Reader lector = new BufferedReader(new FileReader(path));
            Lexer lexer = new Lexer(lector);
            String result = "";
            
            while(true){
                Tokens tokens = lexer.yylex();
                if(tokens == null) {
                    result += "END";
                    Statements.add("$");
                    Recursive_Descendent_Parser RDP = new Recursive_Descendent_Parser(Statements);
                    try {
                        RDP.Parse();
                    } catch (Exception ex) {
                        txtAreaOutput.setText(ex.getMessage());
                        Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    //txtAreaOutput.setText(result);
                    break;
                }
                
                switch(tokens){
                    case ERROR:
                        result += lexer.lexeme + "|" + lexer.linea + "~";
                        
                        break;
                    case OPERADORES:
                        
                        if(lexer.lexeme.equals(";")){
                            result += lexer.lexeme + "|" + lexer.linea + "~";
                            Statements.add(result);
                            result = "";
                        }
                        
                        result += lexer.lexeme + "|" + lexer.linea + "~";
                        
                        break;
                    case RESERVADAS:
                        if(lexer.lexeme.equals("GO")){
                            result += lexer.lexeme + "|" + lexer.linea + "~";
                            Statements.add(result);
                            result = "";
                        }
                        result += lexer.lexeme + "|" + lexer.linea + "~";
                        
                        break;
                    case IDENTIFICADORES:
                        
                        //int length = lexer.yylength();
                        /*if (length > 31){
                            lexer.lexeme = lexer.lexeme.substring(0, 30);
                            lexer.lexeme += " <RECORTADO> ";
                        }*/
                        result += tokens + "|" + lexer.linea + "~";
                        
                        break;
                    case INT:
                        result += "int" + "|" + lexer.linea + "~";
                        
                        break;
                    case FLOAT: 
                        result += "float" + "|" + lexer.linea + "~";
                        break;
                        
                     case BIT:
                        result += "bit" + "|" + lexer.linea + "~";
                     break;
                     case STRING:
                         result += tokens + "|" + lexer.linea + "~";
                     break;
                        
                    case SINGLECOMMENT: case MULTICOMMENT:case SEPARADOR:
                        break;  
                   
                    case ERRORCOMMENT:
                        result += "ERROR" + "|" + lexer.linea + "~";
                        break;
                        
                    case STRINGERROR:
                        result += "ERROR" + "|" + lexer.linea + "~";
                        
                        break;
                    
                    case FLOATERROR:
                        result += "ERROR" + "|" + lexer.linea + "~";    
                }
            }
            
            
            
        }catch (IOException ex){
            Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
        }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAnalizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnalizar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtAreaOutput;
    // End of variables declaration//GEN-END:variables
}
